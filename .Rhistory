gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
library(R.utils)
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
for (i in list.files(list.files.path$RawDataDump)) {
gzip(i, destname=sprintf("%s.gz", i), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
traceback()
list.files(list.files.path$RawDataDump)
i = "MaurerRaw.clinic.csv"
list.files.path$RawDataDump
paste(list.files.path$RawDataDump,i, collapse = /)
paste(list.files.path$RawDataDump,i, collapse = "/")
paste(c(list.files.path$RawDataDump,i), collapse = "/"
)
filename <- paste(c(list.files.path$RawDataDump,i)
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
}
}
}
filename <- paste(c(list.files.path$RawDataDump,i))
filename
filename <- paste(c(list.files.path$RawDataDump,i),collapse = "/")
sprintf("%s.gz", filename)
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
for (i in list.files(list.files.path$RawDataDump)) {
filename <- paste(c(list.files.path$RawDataDump,i),collapse = "/")
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = filename)
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = filename)
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = filename)
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = filename)
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
Meta2 <- list()
Meta2 <- AddExpressionMatrix(Metadata = Meta2,
local = T,path = list.files.path$RawDataDump, name.local.file = "MaurerRaw")
View(Meta2)
Meta2[["MaurerRaw.matrix"]]
library(PublicDataNorm)
?remove.files.recursively
??remove.files.recursively
devtools::document()
setwd("D:/JR_analytics_Rwork/JRA_U1149_Nicolle/PublicDataNorm")
devtools::document()
`rm(list = c("ExportCSV"))
rm(list = c("ExportCSV"))
devtools::document()
usethis::use_package("DT", "TCGAbiolinks" , "data.table" , "dplyr", "stringr")
usethis::use_package("DT")
usethis::use_package("data.table")
usethis::use_package("dplyr")
usethis::use_package("stringr")
usethis::use_package("TCGAbiolinks")
utils::globalVariables(c("SamplesID", "PatientsID", "na.omit", "query", "bcr_patient_barcode", "type", "gene_type" ,"gene_names"))
usethis::use_package("stats")
usethis::use_github_action_check_standard()
library(PublicDataNorm)
library(stringr)
project <- "Maurer"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching yout own Dir configuratioh
list.files.path <- DirCheck(project,path)
Local.Data.base.Path <- list.files.path$Parent
Local.Data.base.Path
list.files(Local.Data.base.Path)
lf <- list.files(Local.Data.base.Path)
lf <- lf[!lf%in%"Lexic"]
lf
Sys.setenv('PATH' = paste0('C:\Program Files\qpdf-version_numer\bin;', Sys.getenv('PATH'))
Sys.setenv('PATH' = paste0('C:/Program Files\qpdf-version_numer/bin;', Sys.getenv('PATH')))
Sys.setenv('PATH' = paste0('C:/Program Files/qpdf-version_numer/bin;', Sys.getenv('PATH')))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.setenv('PATH' = paste0('C:/Programmes/qpdf 11.2.0/bin;', Sys.getenv('PATH')))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
devtools::check_win_release()
project <- "Maurer"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching yout own Dir configuratioh
list.files()
list.files.path <- DirCheck(project,path)
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta2,
local = T,path = list.files.path$RawDataDump, name.local.file = "MaurerRaw")
Meta <- AddExpressionMatrix(Metadata = Meta,
local = T,path = list.files.path$RawDataDump, name.local.file = "MaurerRaw")
head(Meta$MaurerRaw.matrix[,1:5])
Meta[["MaurerRaw.matrix"]] <- Meta[["MaurerRaw.matrix"]][,-1]  # First colonne, geneSymbols drop off.
Meta <- AddClinic(Metadata = Meta, path = list.files.path$RawDataDump, name.local.file = "MaurerRaw.clinic", merge = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample Pheno", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
Meta <- CleaningClinic(Metadata = Meta, type = "Patients' clinical data", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
CheckMeta(Meta)
Meta <- AddgeneAnnot(Meta = Meta , gtf.file.dir = "~/R/gtf" , gtf.files = "gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
GeneOut <-  unlist(subset( Meta$geneAnnotation, subset = c(chr=="chrX" |chr=="chrY"))$GeneSymbol)
keep <- data.frame(var = apply(Meta$MaurerRaw.matrix,1,var),gene = rownames(Meta$MaurerRaw.matrix),row.names = rownames(Meta$MaurerRaw.matrix))
DF <- Meta$MaurerRaw.matrix[rownames(keep[keep$var!=0,]),]
###### Upper quartile normalization from Matrix with all samples and log2+1 transformation
UQnorm = function (rawcounts)  {
log2(1 + (t(t(rawcounts)/apply(rawcounts, 2, function(x) {
quantile(x[which(x > 0)], probs = 0.75)
})) * 1000))
}
DF_UQnorm <- as.data.frame(UQnorm(DF))
Meta$MaurerNormalized.Matrix <- DF_UQnorm
View(Meta)
str_detect(name(Meta), "Patients")
Npatient <- rownames(Meta[[str_detect(names(Meta), "Patients")])
Npatient <- rownames(Meta[[str_detect(names(Meta), "Patients")]])
str_detect(names(Meta), "Patients")
names(Meta)
Npatient <- rownames(Meta[[str_detect(names(Meta), "Patient")]])
str_detect(names(Meta), "Patient")
Npatient <- rownames(Meta[[which(str_detect(names(Meta), "Patient"))]])
Nsamples <- rownames(Meta[[which(str_detect(names(Meta), "Samples"))]])
RawGenes <- rownames(Meta[[which(str_detect(names(Meta), "Raw.Matrix"))]])
NormGenes <- rownames(Meta[[which(str_detect(names(Meta), "Normalized.Matrix"))]])
Nsamples <- rownames(Meta[[which(str_detect(names(Meta), "Sample"))]])
RawGenes <- rownames(Meta[[which(str_detect(names(Meta), "Raw.matrix"))]])
Npatient <- nrow(Meta[[which(str_detect(names(Meta), "Patient"))]])
Nsamples <- nrow(Meta[[which(str_detect(names(Meta), "Sample"))]])
RawGenes <- nrow(Meta[[which(str_detect(names(Meta), "Raw.matrix"))]])
NormGenes <- nrow(Meta[[which(str_detect(names(Meta), "Normalized.Matrix"))]])
system.time()
Sys.Date()
dt <- data.frame("Project" = project,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = "UpperQuartile",
"Sequençing.DeepenessPerMillionReads" = 30,
"Sequençing.LengthPer.pb" = 100,
"Sequençing.Run" = "Single-end",
"Sequençing.Platform" ="Illumina HiSeq 2000" ,
"First.Author" = "Carlo Maurer",
"Article.DOI" = "http://dx.doi.org/10.1136/gutjnl-2018-317706",row.names = project)
dt
View(Meta)
Meta[["MaurerRaw.clinic"]]
which(str_detect(names(Meta), "Raw.clinic"))
colNamesRawClinic <- colnames(Meta[[which(str_detect(names(Meta), "Raw.clinic"))]])
str_detect(colNamesRawClinic, "Treatement")
all(str_detect(colNamesRawClinic, "Treatement"))==F
colNamesPatientClinic <- colnames(Meta[[which(str_detect(names(Meta), "Patient"))]])
str_detect(colNamesRawClinic, "OS")
colNamesPatientClinic
Meta$Patient.clinic
Meta$Patient.clinic$OSdelay
Meta[[which(str_detect(names(Meta), "Patient"))]]$OSdelay
OSpresent <- is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$OSdelay)
OSpresent
OSpresent <- all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$OSdelay))
OSpresent
Patient.Pheno <- Meta[[which(str_detect(names(Meta), "Patient"))]]
Patient.Pheno
Patient.Pheno[Patient.Pheno==""]
Patient.Pheno[Patient.Pheno==""] <- NA
Patient.Pheno
Meta[[which(str_detect(names(Meta), "Patient"))]]
Meta <- CleaningClinic(Metadata = Meta, type = "Sample Pheno", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
Meta <- CleaningClinic(Metadata = Meta, type = "Patients' clinical data", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
library(PublicDataNorm)
Meta[[which(str_detect(names(Meta), "Patient"))]]
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
OSinfo
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" }
PFSinfo
dt <- data.frame("Project" = project,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Information" = TTTinfo,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = "UpperQuartile",
"Sequençing.DeepenessPerMillionReads" = 30,
"Sequençing.LengthPer.pb" = 100,
"Sequençing.Run" = "Single-end",
"Sequençing.Platform" ="Illumina HiSeq 2000" ,
"First.Author" = "Carlo Maurer",
"Article.DOI" = "http://dx.doi.org/10.1136/gutjnl-2018-317706",row.names = project)
if( all(str_detect(colNamesRawClinic, "Treatement"))==F    ){ TTTinfo <- "No"   } else { TTTinfo <- "Yes"}
dt <- data.frame("Project" = project,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Information" = TTTinfo,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = "UpperQuartile",
"Sequençing.DeepenessPerMillionReads" = 30,
"Sequençing.LengthPer.pb" = 100,
"Sequençing.Run" = "Single-end",
"Sequençing.Platform" ="Illumina HiSeq 2000" ,
"First.Author" = "Carlo Maurer",
"Article.DOI" = "http://dx.doi.org/10.1136/gutjnl-2018-317706",row.names = project)
dt
if( all(str_detect(colNamesRawClinic, "Treatement"))==F    ){
TTTinfo <- "No"
TTTtype <- NA } else {
TTTinfo <- "Yes"
TTTtype <- NA
}
dt <- data.frame("Project" = project,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Type" = TTTtype,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = "UpperQuartile",
"Sequençing.DeepenessPerMillionReads" = 30,
"Sequençing.LengthPer.pb" = 100,
"Sequençing.Run" = "Single-end",
"Sequençing.Platform" ="Illumina HiSeq 2000" ,
"First.Author" = "Carlo Maurer",
"Article.DOI" = "http://dx.doi.org/10.1136/gutjnl-2018-317706",
row.names = project)
dt
dt
dev.off()
#' @param project a character string : project name
#' @param path dir path of Parent directory
#' @importFrom rstudioapi getSourceEditorContext
#' @return a file path list of dir project in ~parent/dir/project file
#' @export
#'
#' @examples "none"
#'
#'
#'
DirCheck <- function(project,path){
file.path.parent <- paste(unlist(strsplit(path, "/")),collapse = "/")
# Directories in "parent" Dir. Refereces, Script, RawData and VerifiedDataSet
file.path.References <- paste(c(unlist(strsplit(path, "/")),project,"References"),collapse = "/")
file.path.Script <- paste(c(unlist(strsplit(path, "/")),project,"Script"),collapse = "/")
file.path.Project.Script <- paste(file.path.Script,project),collapse = "/")
file.path.RawData <- paste(c(unlist(strsplit(path, "/")),project,"RawData"),collapse = "/")
file.path.Project.RawData <- paste(file.path.RawDataDump),project),collapse = "/")
file.path.PipelineDump <- paste(file.path.RawDataDump,project,"PipelineDump"),collapse = "/")
file.path.VerifiedDataSet <- paste(c(unlist(strsplit(path, "/")),project,"VerifiedDataSet"),collapse = "/")
file.path.Project.VerifiedDataset <- paste(file.path.VerifiedDataSet),project),collapse = "/")
if(!dir.exists(file.path.Project)){dir.create(file.path.Project)}
if(!dir.exists(file.path.Script)){dir.create(file.path.Script)}
if(!dir.exists(file.path.RawDataDump)){dir.create(file.path.RawDataDump)}
if(!dir.exists(file.path.RawPhenoAnnotation)){dir.create(file.path.RawPhenoAnnotation)}
if(!dir.exists(file.path.References)){dir.create(file.path.References)}
if(!dir.exists(file.path.PipelineDump)){dir.create(file.path.PipelineDump)}
if(!dir.exists(file.path.VerifiedDataSet)){dir.create(file.path.VerifiedDataSet)}
list.files.path <- list( "Parent"= file.path.parent,
"RawData" = file.path.RawData,
"Project.RawData" = file.path.Project.RawData,
"Script" = file.path.Script,
"Project.Script" = file.path.Project.Script,
"References"= file.path.References,
"VerifiedDataSet" = file.path.VerifiedDataSet,
"Propject.VerifiedDataset" = file.path.Project.VerifiedDataset)
message("Creating Project directories")
for (i in list.files.path) {
message(paste(i, "------------dir exsist--------------",dir.exists(i)))
}
return(list.files.path)
}
#' @param project a character string : project name
#' @param path dir path of Parent directory
#' @importFrom rstudioapi getSourceEditorContext
#' @return a file path list of dir project in ~parent/dir/project file
#' @export
#'
#' @examples "none"
#'
#'
#'
DirCheck <- function(project,path){
file.path.parent <- paste(unlist(strsplit(path, "/")),collapse = "/")
# Directories in "parent" Dir. Refereces, Script, RawData and VerifiedDataSet
file.path.References <- paste(c(unlist(strsplit(path, "/")),project,"References"),collapse = "/")
file.path.Script <- paste(c(unlist(strsplit(path, "/")),project,"Script"),collapse = "/")
file.path.Project.Script <- paste(c(file.path.Script,project),collapse = "/")
file.path.RawData <- paste(c(unlist(strsplit(path, "/")),project,"RawData"),collapse = "/")
file.path.Project.RawData <- paste(c(file.path.RawDataDump,project),collapse = "/")
file.path.PipelineDump <- paste(c(file.path.RawDataDump,project,"PipelineDump"),collapse = "/")
file.path.VerifiedDataSet <- paste(c(unlist(strsplit(path, "/")),project,"VerifiedDataSet"),collapse = "/")
file.path.Project.VerifiedDataset <- paste(c(file.path.VerifiedDataSet,project),collapse = "/")
if(!dir.exists(file.path.Project)){dir.create(file.path.Project)}
if(!dir.exists(file.path.Script)){dir.create(file.path.Script)}
if(!dir.exists(file.path.RawDataDump)){dir.create(file.path.RawDataDump)}
if(!dir.exists(file.path.RawPhenoAnnotation)){dir.create(file.path.RawPhenoAnnotation)}
if(!dir.exists(file.path.References)){dir.create(file.path.References)}
if(!dir.exists(file.path.PipelineDump)){dir.create(file.path.PipelineDump)}
if(!dir.exists(file.path.VerifiedDataSet)){dir.create(file.path.VerifiedDataSet)}
list.files.path <- list( "Parent"= file.path.parent,
"RawData" = file.path.RawData,
"Project.RawData" = file.path.Project.RawData,
"Script" = file.path.Script,
"Project.Script" = file.path.Project.Script,
"References"= file.path.References,
"VerifiedDataSet" = file.path.VerifiedDataSet,
"Propject.VerifiedDataset" = file.path.Project.VerifiedDataset)
message("Creating Project directories")
for (i in list.files.path) {
message(paste(i, "------------dir exsist--------------",dir.exists(i)))
}
return(list.files.path)
}
project <- "Maurer"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching yout own Dir configuratioh
list.files()
list.files(path)
list.files.path <- DirCheck(project,path)
#' @param project a character string : project name
#' @param path dir path of Parent directory
#' @importFrom rstudioapi getSourceEditorContext
#' @return a file path list of dir project in ~parent/dir/project file
#' @export
#'
#' @examples "none"
#'
#'
#'
DirCheck <- function(project,path){
file.path.parent <- paste(unlist(strsplit(path, "/")),collapse = "/")
# Directories in "parent" Dir. Refereces, Script, RawData and VerifiedDataSet
file.path.References <- paste(c(unlist(strsplit(path, "/")),project,"References"),collapse = "/")
file.path.Script <- paste(c(unlist(strsplit(path, "/")),project,"Script"),collapse = "/")
file.path.Project.Script <- paste(c(file.path.Script,project),collapse = "/")
file.path.RawData <- paste(c(unlist(strsplit(path, "/")),project,"RawData"),collapse = "/")
file.path.Project.RawData <- paste(c(file.path.RawDataDump,project),collapse = "/")
file.path.PipelineDump <- paste(c(file.path.RawDataDump,project,"PipelineDump"),collapse = "/")
file.path.VerifiedDataSet <- paste(c(unlist(strsplit(path, "/")),project,"VerifiedDataSet"),collapse = "/")
file.path.Project.VerifiedDataset <- paste(c(file.path.VerifiedDataSet,project),collapse = "/")
if(!dir.exists(file.path.Script)){dir.create(file.path.Script)}
if(!dir.exists(file.path.RawData)){dir.create(file.path.RawData)}
if(!dir.exists(file.path.Project.RawData)){dir.create(file.path.Project.RawData)}
if(!dir.exists(file.path.References)){dir.create(file.path.References)}
if(!dir.exists(file.path.PipelineDump)){dir.create(file.path.PipelineDump)}
if(!dir.exists(file.path.VerifiedDataSet)){dir.create(file.path.VerifiedDataSet)}
if(!dir.exists(file.path.Project.VerifiedDataset)){dir.create(file.path.Project.VerifiedDataset)}
if(!dir.exists(file.path.Project.Script)){dir.create(file.path.Project.Script)}
list.files.path <- list( "Parent"= file.path.parent,
"RawData" = file.path.RawData,
"Project.RawData" = file.path.Project.RawData,
"Script" = file.path.Script,
"Project.Script" = file.path.Project.Script,
"References"= file.path.References,
"VerifiedDataSet" = file.path.VerifiedDataSet,
"Propject.VerifiedDataset" = file.path.Project.VerifiedDataset)
message("Creating Project directories")
for (i in list.files.path) {
message(paste(i, "------------dir exsist--------------",dir.exists(i)))
}
return(list.files.path)
}
list.files.path <- DirCheck(project,path)
#' @param project a character string : project name
#' @param path dir path of Parent directory
#' @importFrom rstudioapi getSourceEditorContext
#' @return a file path list of dir project in ~parent/dir/project file
#' @export
#'
#' @examples "none"
#'
#'
#'
DirCheck <- function(project,path){
file.path.parent <- paste(unlist(strsplit(path, "/")),collapse = "/")
# Directories in "parent" Dir. Refereces, Script, RawData and VerifiedDataSet
file.path.References <- paste(c(unlist(strsplit(path, "/")),project,"References"),collapse = "/")
file.path.Script <- paste(c(unlist(strsplit(path, "/")),project,"Script"),collapse = "/")
file.path.Project.Script <- paste(c(file.path.Script,project),collapse = "/")
file.path.RawData <- paste(c(unlist(strsplit(path, "/")),project,"RawData"),collapse = "/")
file.path.Project.RawData <- paste(c(file.path.RawData,project),collapse = "/")
file.path.PipelineDump <- paste(c(file.path.RawData,project,"PipelineDump"),collapse = "/")
file.path.VerifiedDataSet <- paste(c(unlist(strsplit(path, "/")),project,"VerifiedDataSet"),collapse = "/")
file.path.Project.VerifiedDataset <- paste(c(file.path.VerifiedDataSet,project),collapse = "/")
if(!dir.exists(file.path.Script)){dir.create(file.path.Script)}
if(!dir.exists(file.path.RawData)){dir.create(file.path.RawData)}
if(!dir.exists(file.path.Project.RawData)){dir.create(file.path.Project.RawData)}
if(!dir.exists(file.path.References)){dir.create(file.path.References)}
if(!dir.exists(file.path.PipelineDump)){dir.create(file.path.PipelineDump)}
if(!dir.exists(file.path.VerifiedDataSet)){dir.create(file.path.VerifiedDataSet)}
if(!dir.exists(file.path.Project.VerifiedDataset)){dir.create(file.path.Project.VerifiedDataset)}
if(!dir.exists(file.path.Project.Script)){dir.create(file.path.Project.Script)}
list.files.path <- list( "Parent"= file.path.parent,
"RawData" = file.path.RawData,
"Project.RawData" = file.path.Project.RawData,
"Script" = file.path.Script,
"Project.Script" = file.path.Project.Script,
"References"= file.path.References,
"VerifiedDataSet" = file.path.VerifiedDataSet,
"Propject.VerifiedDataset" = file.path.Project.VerifiedDataset)
message("Creating Project directories")
for (i in list.files.path) {
message(paste(i, "------------dir exsist--------------",dir.exists(i)))
}
return(list.files.path)
}
list.files.path <- DirCheck(project,path)
list.files(path)
closeAllConnections()
list.files.path <- DirCheck(project,path)
