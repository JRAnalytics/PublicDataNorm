name = "Normalized.expression")
rm(DFnorm,list.files.path)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multiple functions
head(Meta$Normalized.expression[,1:5])
rownames(Meta$Normalized.expression) <- Meta$Normalized.expression$gene_id
Meta$Normalized.expression$gene_id <- NULL
View(Meta)
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = c("specimen.PACA-AU.tsv.gz","donor.PACA-AU.tsv.gz"),
name = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_donor_id",
mergeBy = "icgc_donor_id",
join = "left_join" ,
Export = F,force.replace = T)
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = "sample.PACA-AU.tsv.gz",
mergeToClinic = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_sample_id",
mergeBy = "icgc_specimen_id",
join = "left_join" ,
Export = F)
View(Meta$sampleannot[Meta$sampleannot$icgc_sample_id%in%colnames(Meta$Normalized.expression),])
View(Meta)
Meta$sampleannot <- as.data.frame( Meta$sampleannot)
Meta$sampleannot[Meta$sampleannot==""] <- NA
attributes(Meta)
CheckMeta(Meta)
View(Meta$sampleannot)
#Cleaning of TNM and AJCC stage because are a mess!!!!!
{
Meta$sampleannot$TNM <-    ifelse(  Meta$sampleannot$tumour_stage_system=="TNM",Meta$sampleannot$tumour_stage,
ifelse(str_detect( Meta$sampleannot$donor_tumour_stage_at_diagnosis, "T"),
Meta$sampleannot$donor_tumour_stage_at_diagnosis,   NA ))
Meta$sampleannot$TNM <- ifelse(  str_detect( Meta$sampleannot$TNM, "T"), Meta$sampleannot$TNM,NA)
Meta$sampleannot$TNM <- ifelse( !is.na(Meta$sampleannot$donor_tumour_stage_at_diagnosis)&str_detect( Meta$sampleannot$donor_tumour_stage_at_diagnosis, "T"),
Meta$sampleannot$donor_tumour_stage_at_diagnosis,
ifelse(Meta$sampleannot$tumour_stage_system=="TNM",Meta$sampleannot$tumour_stage,NA))
Meta$sampleannot$TNM <- ifelse(  str_detect( Meta$sampleannot$TNM, "T"), Meta$sampleannot$TNM,NA)
Meta$sampleannot$AJCC <-    ifelse(  Meta$sampleannot$tumour_stage_system!="TNM",Meta$sampleannot$tumour_stage,
ifelse(!str_detect( Meta$sampleannot$donor_tumour_stage_at_diagnosis, "T"),
Meta$sampleannot$donor_tumour_stage_at_diagnosis,   NA ))
Meta$sampleannot$AJCC <- ifelse(  str_detect( Meta$sampleannot$AJCC, "T"), NA,    Meta$sampleannot$AJCC)
Meta$sampleannot$AJCC <- ifelse(  is.na(Meta$sampleannot$AJCC) &  !str_detect( Meta$sampleannot$donor_tumour_stage_at_diagnosis, "T"),
Meta$sampleannot$donor_tumour_stage_at_diagnosis,    Meta$sampleannot$AJCC )
Meta$sampleannot$AJCC <- ifelse(  is.na(Meta$sampleannot$AJCC)&!is.na(Meta$sampleannot$tumour_stage_supplemental),
Meta$sampleannot$tumour_stage_supplemental,    Meta$sampleannot$AJCC)
}#Cleaning of TNM and AJCC stage because are a mess!!!!!
SL = CreateLexic(Meta, type = "SamplesLexic")
PL = CreateLexic(Meta, type = "PatientsLexic")
names(Meta$sampleannot)
Meta = CleaningClinic(Metadata = Meta,
type = "Samples",
Lexic = SL,
ClinicToClean ="sampleannot",
FilterSamples = T,
exportname = paste(project,"SamplesAnnot" ),
force.replace = T)
colnames(Meta$sampleannot)
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientsID","icgc_donor_id.x") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesID","icgc_sample_id") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SpecimenOrgan","specimen_type") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SpecimenConservation","specimen_storage_other") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SpecimenSampling","specimen_type") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplePathologicalState","tumour_histological_type") )
keys = c("PatientsID" = "icgc_donor_id.x",
"SamplesID"="icgc_sample_id",
"MainRNAID" ="icgc_sample_id",
"MainDNAID" ="MainDNAID",
"Age"="donor_age_at_diagnosis",
"Sex" ="donor_sex",
"PFSdelay" ="donor_relapse_interval",
"PFSevent" ="donor_relapse_type",
"Grade" ="tumour_grade",
"TNM" ="TNM",
"Stage" ="AJCC",
"OSevent" ="donor_vital_status",
"OSdelay" ="donor_survival_time",
"PatientSampling" ="specimen_type",
"TreatmentInfo" ="specimen_donor_treatment_type",
"TreatmentType" ="specimen_donor_treatment_type_other")
PL = addSeveralKeysToLexic(vector = keys,lexic = PL)
Meta = CleaningClinic(Metadata = Meta,
type = "Patients",
Lexic = PL,
ClinicToClean =paste0(project,"SamplesAnnot" ),
CleanFromOtherType = T,
FilterPatients = T,
exportname = paste0(project,"PatientsClinic" ),
force.replace = T)
View(Meta)
Sl = addSeveralKeysToLexic(vector = c("PatientsID"="icgc_donor_id.x",
"SamplesID"="icgc_sample_id",
"SpecimenOrgan"="specimen_type",
"SpecimenConservation"="specimen_storage_other",
"SpecimenSampling"="specimen_type",
"SamplePathologicalState"="tumour_histological_type",
"HadTreatment"="specimen_donor_treatment_type",
"TreatmentType"="specimen_donor_treatment_type_other")
,lexic = SL)
Meta = CleaningClinic(Metadata = Meta,
type = "Samples",
Lexic = SL,
ClinicToClean ="sampleannot",
FilterSamples = T,
exportname = paste(project,"SamplesAnnot" ),
force.replace = T)
View(Meta$`ICGC.PACA.AU.Microarray PatientsClinic`)
Meta <- CreateDataset(project,path) # if all are TRUE ; next step can be done
# Expression matrix
{ list.files.path = attributes(Meta)$File.path
dt <- data.table::fread(paste0(list.files.path$Project.RawData,"/exp_array.PACA-AU.tsv.gz"))
dt2 <- distinct(dt) #suppressing dupliated rows
rm(dt)
summary(unique(dt2$icgc_donor_id))
summary(unique(dt2$icgc_specimen_id))
summary(unique(dt2$icgc_sample_id))
summary(unique(dt2$submitted_sample_id))
DFnorm <- data.table::dcast(dt2, gene_id~icgc_sample_id , value.var =  "normalized_expression_value",fill = 0,drop = F)
DFnorm <- as.data.frame(DFnorm)
rownames(DFnorm) <- DFnorm$gene_id
rm(dt2)
}#expression Matrix
# Clinical data
{
pheno <- data.table::fread(paste0(list.files.path$Project.RawData,"/specimen.PACA-AU.tsv.gz"))
patient <- data.table::fread(paste0(list.files.path$Project.RawData,"/donor.PACA-AU.tsv.gz"))
PatientToSampels <- data.table::fread(paste0(list.files.path$Project.RawData,"/sample.PACA-AU.tsv.gz"))
colnames(pheno)[colnames(pheno)%in%colnames(patient)] # colnames in common "icgc_donor_id"
dt <- list(pheno,patient) %>% purrr::reduce(left_join, by="icgc_donor_id")
colnames(dt)[colnames(dt)%in%colnames(PatientToSampels)] # colnames in common "icgc_specimen_id"
dt <- list(dt,PatientToSampels) %>% purrr::reduce(left_join, by="icgc_specimen_id")
}# Clinical data
Meta <- AddExpressionMatrixMArray(Metadata = Meta,
ExpressionMatrix = DFnorm,
name = "Normalized.expression")
rm(DFnorm,list.files.path)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multiple functions
head(Meta$Normalized.expression[,1:5])
rownames(Meta$Normalized.expression) <- Meta$Normalized.expression$gene_id
Meta$Normalized.expression$gene_id <- NULL
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = c("specimen.PACA-AU.tsv.gz","donor.PACA-AU.tsv.gz"),
name = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_donor_id",
mergeBy = "icgc_donor_id",
join = "left_join" ,
Export = F)
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = "sample.PACA-AU.tsv.gz",
mergeToClinic = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_sample_id",
mergeBy = "icgc_specimen_id",
join = "left_join" ,
Export = F)
Meta$sampleannot <- as.data.frame( Meta$sampleannot)
Meta$sampleannot[Meta$sampleannot==""] <- NA
attributes(Meta)
CheckMeta(Meta)
View(Meta$sampleannot)
#Cleaning of TNM and AJCC stage because are a mess!!!!!
{
Meta$sampleannot$TNM <-    ifelse(  Meta$sampleannot$tumour_stage_system=="TNM",Meta$sampleannot$tumour_stage,
ifelse(str_detect( Meta$sampleannot$donor_tumour_stage_at_diagnosis, "T"),
Meta$sampleannot$donor_tumour_stage_at_diagnosis,   NA ))
Meta$sampleannot$TNM <- ifelse(  str_detect( Meta$sampleannot$TNM, "T"), Meta$sampleannot$TNM,NA)
Meta$sampleannot$TNM <- ifelse( !is.na(Meta$sampleannot$donor_tumour_stage_at_diagnosis)&str_detect( Meta$sampleannot$donor_tumour_stage_at_diagnosis, "T"),
Meta$sampleannot$donor_tumour_stage_at_diagnosis,
ifelse(Meta$sampleannot$tumour_stage_system=="TNM",Meta$sampleannot$tumour_stage,NA))
Meta$sampleannot$TNM <- ifelse(  str_detect( Meta$sampleannot$TNM, "T"), Meta$sampleannot$TNM,NA)
Meta$sampleannot$AJCC <-    ifelse(  Meta$sampleannot$tumour_stage_system!="TNM",Meta$sampleannot$tumour_stage,
ifelse(!str_detect( Meta$sampleannot$donor_tumour_stage_at_diagnosis, "T"),
Meta$sampleannot$donor_tumour_stage_at_diagnosis,   NA ))
Meta$sampleannot$AJCC <- ifelse(  str_detect( Meta$sampleannot$AJCC, "T"), NA,    Meta$sampleannot$AJCC)
Meta$sampleannot$AJCC <- ifelse(  is.na(Meta$sampleannot$AJCC) &  !str_detect( Meta$sampleannot$donor_tumour_stage_at_diagnosis, "T"),
Meta$sampleannot$donor_tumour_stage_at_diagnosis,    Meta$sampleannot$AJCC )
Meta$sampleannot$AJCC <- ifelse(  is.na(Meta$sampleannot$AJCC)&!is.na(Meta$sampleannot$tumour_stage_supplemental),
Meta$sampleannot$tumour_stage_supplemental,    Meta$sampleannot$AJCC)
}#Cleaning of TNM and AJCC stage because are a mess!!!!!
SL = addSeveralKeysToLexic(vector = c("PatientsID"="icgc_donor_id.x",
"SamplesID"="icgc_sample_id",
"SpecimenOrgan"="specimen_type",
"SpecimenConservation"="specimen_storage_other",
"SpecimenSampling"="specimen_type",
"SamplePathologicalState"="tumour_histological_type",
"HadTreatment"="specimen_donor_treatment_type",
"TreatmentType"="specimen_donor_treatment_type_other")
,lexic = SL)
Meta = CleaningClinic(Metadata = Meta,
type = "Samples",
Lexic = SL,
ClinicToClean ="sampleannot",
FilterSamples = T,
exportname = "SamplesAnnot.full",
keep.all.column = T
)
attributes(Meta)
Meta = CleaningClinic(Metadata = Meta,
type = "Patients",
Lexic = PL,
ClinicToClean =paste0(project,"SamplesAnnot" ),
CleanFromOtherType = T,
FilterPatients = T,
exportname = "PatientsClinic.full",
keep.all.column = T)
Meta = CleaningClinic(Metadata = Meta,
type = "Patients",
Lexic = PL,
ClinicToClean ="SamplesAnnot.full",
CleanFromOtherType = T,
FilterPatients = T,
exportname = "PatientsClinic.full",
keep.all.column = T)
Meta$PatientsClinic.full$OSdelay <- as.numeric(Meta$PatientsClinic.full$OSdelay)
Meta$PatientsClinic.full$OSevent <- as.numeric(ifelse(Meta$PatientsClinic.full$OSevent=="alive",0,
ifelse(is.na(Meta$PatientsClinic.full$OSevent),NA,1)))
Meta$PatientsClinic.full$PFSdelay <- as.numeric(Meta$PatientsClinic.full$PFSdelay)
Meta$PatientsClinic.full$LocalPFSevent <- as.numeric(ifelse(Meta$PatientsClinic.full$PFSevent=="local recurrence"| Meta$PatientsClinic.full$PFSevent=="local recurrence and distant metastasis" ,1,0))
Meta$PatientsClinic.full$DistantPFSevent <- as.numeric(ifelse(Meta$PatientsClinic.full$PFSevent=="distant recurrence/metastasis"| Meta$PatientsClinic.full$PFSevent=="local recurrence and distant metastasis" ,1,0))
Meta$PatientsClinic.full$PFSevent <- as.numeric(ifelse(is.na(Meta$PatientsClinic.full$PFSevent),0,1))
# Step 4 : Check Metadata Raw build
CheckMeta(Meta)
Meta = ExportTSV(Metadata = Meta)
AddLocalDatabase(Metadata = Meta,
Normalization.Method = "Lumi using bgAdjust.affy quantile log2",
Technology = "Microarray",
Platform = "Illumina HumanHT-12 v4.0 beadchip" ,
Run.spec = NA,
First.Author = NA,
DOI = NA,
Comment = NA,
User = "JR-Analytics")
View(Meta$sampleannot)
View(Meta)
Meta[["SamplesAnnot.full"]]
View(Meta[["SamplesAnnot.full"]])
length(which(str_detect(toupper(Meta$SamplesAnnot.full$SamplePathologicalState),"NORM|HEAL")))
length(which(str_detect(toupper(Meta[[NBS[1]]]$SamplePathologicalState),"TUM|PRIMARY|CARCINO")))
length(which(str_detect(toupper(Meta$SamplesAnnot.full$SamplePathologicalState),"TUM|PRIMARY|CARCINO")))
summary(as.factor(toupper(Meta$SamplesAnnot.full$SamplePathologicalState)))
AddLocalDatabase(Metadata = Meta,
Normalization.Method = "Lumi using bgAdjust.affy quantile log2",
Technology = "Microarray",
Platform = "Illumina HumanHT-12 v4.0 beadchip" ,
Run.spec = NA,
First.Author = NA,
DOI = NA,
Comment = NA,
User = "JR-Analytics")
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "Maurer"
path <- "E:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix ="MaurerRaw.matrix.csv.gz",
name = "raw.count")
View(Metadata)
Metadata[["raw.count"]]
attributes(Metadata) # attributes(Metadata)$Data.type has the data type information for multipe functions
head(Metadata$rawcount.matrix[,1:5])
head(Metadata$raw.count[,1:5])
Metadata$raw.count$GeneSymbol <- NULL  # First colonne, geneSymbols drop off.
Metadata <- AddClinicFromFile(Metadata = Metadata,
name = "Raw.clinic",
ClinicFile = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"),
force.replace = T,
Export = F,
type = "Samples",
merge = F,
mergeBy = "PatientID",join = "left_join",)
Metadata <- AddClinicFromFile(Metadata = Metadata,
name = "Raw.clinic",
ClinicFile = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"),
force.replace = T,
Export = F,
type = "Samples",
merge = F,mergeBy = "PatientID",
ExpressionMatrixIdColumn = "PatientID",join = "left_join",)
?AddClinicFromFile
Metadata <- AddClinicFromFile(Metadata = Metadata,
name = "Raw.clinic",
ClinicFile = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"),
Export = F,
type = "Samples",
mergeBy = "PatientID",
ExpressionMatrixIdColumn = "PatientID",join = "left_join",)
View(Metadata)
Metadata[["Raw.clinic"]]
Sl=   CreateLexic(Dataset =Metadata ,type = "Samples")
Sl=   CreateLexic(Dataset =Metadata ,type = "SamplesLexic")
Pl=   CreateLexic(Dataset =Metadata ,type = "PatientsLexic")
Sl=   AddKeyLexic(lexic = Sl, key = "SamplesID",value ="CUMC_SampleID" )
Pl=   AddKeyLexic(lexic = Pl, key = "SamplesID",value ="CUMC_SampleID" )
Sl=   AddKeyLexic(lexic = Sl, key = "SampleType",value ="Compartment" )
View(   Metadata$Raw.clinic )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Samples",
ClinicToClean = "Raw.clinic ",
Lexic = Sl,
exportname = "SamplesAnnotation" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Samples",
ClinicToClean = "Raw.clinic ",
Lexic = Sl,
exportname = "SamplesAnnotation" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Samples",
ClinicToClean = "Raw.clinic",
CleanFromOtherType = T,
Lexic = Sl,
exportname = "SamplesAnnotation" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Patients",
ClinicToClean = "Raw.clinic",
Lexic = Sl,
exportname = "Clinical.data" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Patients",
ClinicToClean = "Raw.clinic",
Lexic = Pl,
exportname = "Clinical.data" )
View(Metadata)
library(PublicDataNorm)
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Patients",
ClinicToClean = "Raw.clinic",
Lexic = Pl,
exportname = "Clinical.data" )
traceback()
which(attributes(Metadata)$Data.Type=="Clinic")
Metadata <- CreateDataset(project,path)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix ="MaurerRaw.matrix.csv.gz",
name = "raw.count")
attributes(Metadata) # attributes(Metadata)$Data.type has the data type information for multipe functions
head(Metadata$raw.count[,1:5])
Metadata$raw.count$GeneSymbol <- NULL  # First colonne, geneSymbols drop off.
Metadata <- AddClinicFromFile(Metadata = Metadata,
name = "Raw.clinic",
ClinicFile = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"),
Export = F,
type = "Patients",
mergeBy = "PatientID",
ExpressionMatrixIdColumn = "PatientID",join = "left_join",)
attributes(Metadata)
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Samples",
ClinicToClean = "Raw.clinic",
CleanFromOtherType = T,
Lexic = Sl,
exportname = "SamplesAnnotation" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Patients",
ClinicToClean = "Raw.clinic",
Lexic = Pl,
exportname = "Clinical.data" )
View(Metadata)
CheckMeta(Metadata)
View(Metadata)
Metadata[["Raw.clinic"]]
Metadata <- AddClinicFromFile(Metadata = Metadata,
name = "Raw.clinic",
ClinicFile = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"),
Export = F,
type = "Patients",
mergeBy = "PatientID",force.replace = T
ExpressionMatrixIdColumn = "CUMC_SampleID",join = "full_join",)
Metadata <- AddClinicFromFile(Metadata = Metadata,
name = "Raw.clinic",
ClinicFile = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"),
Export = F,
type = "Patients",
mergeBy = "PatientID",force.replace = T,
ExpressionMatrixIdColumn = "CUMC_SampleID",join = "full_join",)
View(Metadata)
Metadata[["Raw.clinic"]]
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Samples",
ClinicToClean = "Raw.clinic",
CleanFromOtherType = T,
Lexic = Sl,
exportname = "SamplesAnnotation" )
Metadata <- CreateDataset(project,path)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix ="MaurerRaw.matrix.csv.gz",
name = "raw.count")
attributes(Metadata) # attributes(Metadata)$Data.type has the data type information for multipe functions
head(Metadata$raw.count[,1:5])
Metadata$raw.count$GeneSymbol <- NULL  # First colonne, geneSymbols drop off.
###create LexicCLinic and SamplesOrPAtient objects to add or replace colnames of clinical data.
Metadata <- AddClinicFromFile(Metadata = Metadata,
name = "Raw.clinic",
ClinicFile = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"),
Export = F,
type = "Patients",
mergeBy = "PatientID",
ExpressionMatrixIdColumn = "CUMC_SampleID",join = "full_join",)
attributes(Metadata)
Sl=   CreateLexic(Dataset =Metadata ,type = "SamplesLexic")
Pl=   CreateLexic(Dataset =Metadata ,type = "PatientsLexic")
Sl=   AddKeyLexic(lexic = Sl, key = "SamplesID",value ="CUMC_SampleID" )
Pl=   AddKeyLexic(lexic = Pl, key = "SamplesID",value ="CUMC_SampleID" )
Sl=   AddKeyLexic(lexic = Sl, key = "SampleType",value ="Compartment" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Samples",
ClinicToClean = "Raw.clinic",
CleanFromOtherType = T,
Lexic = Sl,
exportname = "SamplesAnnotation" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Patients",
ClinicToClean = "Raw.clinic",
Lexic = Pl,
exportname = "Clinical.data" )
# Step 4 : Check Metadata Raw build
CheckMeta(Metadata)
Metadata <- AddgeneAnnot(Metadata = Metadata , gtf.file.dir =list.files.path$References ,
gtf.files = "gencode.v33.annotation.gtf.gz",
force.replace = T)
Metadata <- AddgeneAnnotGtf(Metadata = Metadata
gtf.files = "gencode.v33.annotation.gtf.gz")
Metadata <- AddgeneAnnotGtf(Metadata = Metadata,
gtf.files = "gencode.v33.annotation.gtf.gz")
attributes(Metadata)
CheckMeta(Metadata) # can display number of common genesSymbols frome Raw or Normalized matrix in geneAnnotation file
#Step 7 : Export data as ".csv"
Metadata = ExportCSV(Metadata = Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
Comment = NA,
User = "JR-Analytics")
Sl
Pl
Sl
View(Pl)
rm(Pl, Sl)
Sl=   CreateLexic(Dataset =Metadata ,type = "SamplesLexic")
Pl=   CreateLexic(Dataset =Metadata ,type = "PatientsLexic")
Sl=   AddKeyLexic(lexic = Sl, key = "SamplesID",value ="CUMC_SampleID" )
Pl=   AddKeyLexic(lexic = Pl, key = "SamplesID",value ="CUMC_SampleID" )
Sl=   AddKeyLexic(lexic = Sl, key = "SampleType",value ="Compartment" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Samples",
ClinicToClean = "Raw.clinic",
CleanFromOtherType = T,
Lexic = Sl,
exportname = "SamplesAnnotation" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Patients",
ClinicToClean = "Raw.clinic",
Lexic = Pl,
exportname = "Clinical.data" )
View(Metadata)
Metadata <- CreateDataset(project,path)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix ="MaurerRaw.matrix.csv.gz",
name = "raw.count")
attributes(Metadata) # attributes(Metadata)$Data.type has the data type information for multipe functions
head(Metadata$raw.count[,1:5])
Metadata$raw.count$GeneSymbol <- NULL  # First colonne, geneSymbols drop off.
###create LexicCLinic and SamplesOrPAtient objects to add or replace colnames of clinical data.
Metadata <- AddClinicFromFile(Metadata = Metadata,
name = "Raw.clinic",
ClinicFile = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"),
Export = F,
type = "Patients",
mergeBy = "PatientID",
ExpressionMatrixIdColumn = "CUMC_SampleID",join = "full_join",)
attributes(Metadata)
Sl=   CreateLexic(Dataset =Metadata ,type = "SamplesLexic")
Pl=   CreateLexic(Dataset =Metadata ,type = "PatientsLexic")
Sl=   AddKeyLexic(lexic = Sl, key = "SamplesID",value ="CUMC_SampleID" )
Pl=   AddKeyLexic(lexic = Pl, key = "SamplesID",value ="CUMC_SampleID" )
Sl=   AddKeyLexic(lexic = Sl, key = "SampleType",value ="Compartment" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Samples",
ClinicToClean = "Raw.clinic",
CleanFromOtherType = T,
Lexic = Sl,
exportname = "SamplesAnnotation" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Patients",
ClinicToClean = "Raw.clinic",
Lexic = Pl,
exportname = "Clinical.data" )
View(Metadata)
Metadata[["Clinical.data"]]
Metadata <- AddgeneAnnotGtf(Metadata = Metadata,
gtf.files = "gencode.v33.annotation.gtf.gz")
#Step 7 : Export data as ".csv"
Metadata = ExportCSV(Metadata = Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
Comment = NA,
User = "JR-Analytics")
