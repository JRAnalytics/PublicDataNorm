z <- cbind(MetaData[[j]])
if(is.na(Vnumber)| is.null(Vnumber)){
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)} else {
if(is.na(Vnumber)) {Vnumber2 = 1}
if(Vnumber2==1){ Vnumber2 = 2}
if(!is.null(Vnumber) & !is.na(Vnumber)){Vnumber2 = Vnumber }
filename <- paste0(list.files.path$Propject.VerifiedDataset,"/",project,".",names(MetaData)[j],".V", Vnumber2,".csv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}
} else{
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j], "file"))
message(paste(attributes(MetaData)$Data.Type[j],"exported file exist. Versionning data."))
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
df <- df[str_detect(df$Filenames, names(MetaData)[j]),]
filepath <- rownames(df)[which.max(df$mtime)]
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split(filename,".csv"),"[[",1))
extension <- unlist(lapply(str_split(filename,".csv"),"[[",2))
if(is.na(Vnumber)) {
Vnumber2 = 1
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename2,".V",Vnumber2,".csv",extension)
file.rename(from = filepath, to = filepath2)
}
#adding version file history
if(!is.null(Vnumber) & !is.na(Vnumber)){Vnumber2 = Vnumber }
if(Vnumber2==1){ Vnumber2 = 2}
message(paste0("Exporting ", count, " / ", object,"object: ",names(MetaData)[j]))
filename3 <- unlist(lapply(str_split(filename2,".V"),"[[",1))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename3,".V",Vnumber2,".csv")
z <- cbind( MetaData[[j]])
write.table(z,row.names = F ,file = filepath2, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filepath2, destname=sprintf("%s.gz", filepath2), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}}
}# if length(NB.geneAnnot)
objs =  mget(ls(envir=.GlobalEnv), envir=.GlobalEnv)
NO <- names(Filter(function(i) inherits(i, "list"), objs))[str_detect(toupper(names(Filter(function(i) inherits(i, "list"), objs))),"META")]
pos <- 1
envir = as.environment(pos)
assign(NO, MetaData, envir = envir)
}#function
attributes(Meta)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
attributes(Meta)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
list.files.path = list.files.path,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x v2 3′ and 5′ Illumina HiSeq 500" ,
Run.spec = NA,
First.Author = "Zhang S.",
DOI = "10.1038/s41467-023-40727-7",
project = project,
Comment = NA,
User = "JR-Analytics")
library(PublicDataNorm)
project <- "Chen"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path) # if all are TRUE ; next step can be done
Clinic=getGEO('GSE212966',GSEMatrix=TRUE)[["GSE212966_series_matrix.txt.gz"]]@phenoData@data
download.file("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE212966&format=file",
file.path(list.files.path$Project.RawData,"GSE212966_RAW.tar"))
untar(tarfile = file.path(list.files.path$Project.RawData,"GSE212966_RAW.tar"),
exdir = list.files.path$Project.RawData, list = F)
View(Clinic)
Clinic$title2 = unlist(lapply(str_split(Clinic$title, ","), "[[", 1))
Clinic$title2
list.files(list.files.path$Project.RawData)
gc()
for(i in Clinic$title2){
files = list.files(list.files.path$Project.RawData)[str_detect(list.files(list.files.path$Project.RawData), i)]
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =files[str_detect(files, "barcode")] ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F)
gc()
colnames(Meta$Raw.count.matrix) = paste0(i,"_",colnames(Meta$Raw.count.matrix))
if(!exists("test")){
test = Matrix(Meta$Raw.count.matrix)
} else {
test = cbind(test, Matrix(Meta$Raw.count.matrix)) }
rm(Meta,i,files)
gc()
}
gc()
for(i in Clinic$title2){
files = list.files(list.files.path$Project.RawData)[str_detect(list.files(list.files.path$Project.RawData), i)]
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =files[str_detect(files, "barcode")] ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F)
gc()
colnames(Meta$Raw.count.matrix) = paste0(i,"_",colnames(Meta$Raw.count.matrix))
if(!exists("test")){
test = Matrix(Meta$Raw.count.matrix)
} else {
if(length(rownames(test))==length(rownames(Meta$Raw.count.matrix))) {
test = cbind(test, Matrix(Meta$Raw.count.matrix)) }} else {
for(i in Clinic$title2){
files = list.files(list.files.path$Project.RawData)[str_detect(list.files(list.files.path$Project.RawData), i)]
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =files[str_detect(files, "barcode")] ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F)
gc()
colnames(Meta$Raw.count.matrix) = paste0(i,"_",colnames(Meta$Raw.count.matrix))
if(!exists("test")){
test = Matrix(Meta$Raw.count.matrix)
} else {
if(length(rownames(test))==length(rownames(Meta$Raw.count.matrix))) {
test = cbind(test, Matrix(Meta$Raw.count.matrix)) } else {
test = full_join(test, Matrix(Meta$Raw.count.matrix))
}
rm(Meta,i,files)
gc()
}
{Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file ="GSM5910784_Case1-YF_matrix.mtx.gz",
Cell.file = "GSM5910784_Case1-YF_barcodes.tsv.gz" ,
Genes.file = "GSM5910784_Case1-YF_features.tsv.gz",
name = "Raw.count",
force.replace = F)
Meta$Raw.count.matrix = test
Meta = AddObjetToMeta(Meta,
{data.frame("CellsID" = colnames(Meta$Raw.count.matrix))},
name = "Cells.Annot",
Data.type = "Samples.Clinical.data",
Raw = "Yes")
gc()
rm(test)
}
Meta = AddObjetToMeta(Meta,
Clinic,
name = "Clinic",
Data.type = "Patient.Clinical.data",
Raw = "Yes")
#Step 5 : Cleaning clinical data
#No samples data file in published exported file. On ly 1 Patient.
LexicData(list.files.path, replaceLexic = F)
# !Series_overall_design	"ZC: normal pancreatic tissue"
# !Series_overall_design	"YF: pancreatic tumors"
# !Series_overall_design	"ZY: hepatic metastases"
Meta$Cells.Annot$PatientID = unlist(lapply(str_split(Meta$Cells.Annot$CellsID, "-"),"[[",1))
Meta$Cells.Annot$SamplesType = unlist(lapply(str_split(Meta$Cells.Annot$CellsID, "-"),"[[",2))
Meta$Cells.Annot$SamplesType = ifelse(unlist(lapply(str_split(Meta$Cells.Annot$SamplesType, "_"),"[[",1))=="ZC", "Normal tissue", ifelse(
unlist(lapply(str_split(Meta$Cells.Annot$SamplesType, "_"),"[[",1))=="YF", "Primary Tumor", "Liver Metastase"))
)
for(i in Clinic$title2){
files = list.files(list.files.path$Project.RawData)[str_detect(list.files(list.files.path$Project.RawData), i)]
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =files[str_detect(files, "barcode")] ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F)
gc()
colnames(Meta$Raw.count.matrix) = paste0(i,"_",colnames(Meta$Raw.count.matrix))
if(!exists("test")){
test = Matrix(Meta$Raw.count.matrix)
} else {
if(length(rownames(test))==length(rownames(Meta$Raw.count.matrix))) {
test = cbind(test, Matrix(Meta$Raw.count.matrix)) } else {
test = full_join(test, Matrix(Meta$Raw.count.matrix))
}}
rm(Meta,i,files)
gc()
}
traceback()
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file ="GSM6567169_ADJ4_matrix.mtx.gz",
Cell.file = "GSM6567169_ADJ4_barcodes.tsv.gz" ,
Genes.file = "GSM6567169_ADJ4_genes.tsv.gz",
name = "Raw.count",
force.replace = F)
Cell = fread(file.path(list.files.path$Project.RawData, "GSM6567169_ADJ4_barcodes.tsv.gz"))
Cell = data.table::fread(file.path(list.files.path$Project.RawData, "GSM6567169_ADJ4_barcodes.tsv.gz"))
View(Cell)
Cell = data.table::fread(file.path(list.files.path$Project.RawData, "GSM6567169_ADJ4_barcodes.tsv.gz"),header = F)
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file ="GSM6567169_ADJ4_matrix.mtx.gz",
Cell.file = NULL ,
Genes.file = "GSM6567169_ADJ4_genes.tsv.gz",
name = "Raw.count",
force.replace = F)
ncol(Meta$Raw.count.matrix)
gc()
colnames(Meta$Raw.count.matrix)
View(Meta)
Meta[["Raw.count.matrix"]]
rm(Meta)
rm(Cell)
gc()
rm(test)
for(i in Clinic$title2){
files = list.files(list.files.path$Project.RawData)[str_detect(list.files(list.files.path$Project.RawData), i)]
Meta = try(AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =files[str_detect(files, "barcode")] ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F), silent = T)
gc()
if(class(Meta)=="try-error"){
message(paste(i, "has not the same length in Genes, or Samples in Matrix"))
Meta = try(AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =NULL ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F), silent = T)
colnames(Meta$Raw.count.matrix) = paste0(i,"-", rep(1:ncol(Meta$Raw.count.matrix)))
}
colnames(Meta$Raw.count.matrix) = paste0(i,"_",colnames(Meta$Raw.count.matrix))
if(!exists("test")){
test = Matrix(Meta$Raw.count.matrix)
} else {
if(length(rownames(test))==length(rownames(Meta$Raw.count.matrix))) {
test = cbind(test, Matrix(Meta$Raw.count.matrix)) } else {
test = full_join(test, Matrix(Meta$Raw.count.matrix))
}}
rm(Meta,i,files)
gc()
}
traceback()
ncol(Meta$Raw.count.matrix)
colnames(Meta$Raw.count.matrix)
rm(Test)
gc()
Meta = try(AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =NULL ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F), silent = T)
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =NULL ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F)
Cell = data.table::fread(file.path(list.files.path$Project.RawData, "GSM6567169_ADJ4_barcodes.tsv.gz"),header = F)
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file ="GSM6567169_ADJ4_matrix.mtx.gz",
Cell.file = NULL ,
Genes.file = "GSM6567169_ADJ4_genes.tsv.gz",
name = "Raw.count",
force.replace = F)
View(Meta)
gc()
project <- "Chen"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path)
Clinic=getGEO('GSE212966',GSEMatrix=TRUE)[["GSE212966_series_matrix.txt.gz"]]@phenoData@data
Clinic$title2 = unlist(lapply(str_split(Clinic$title, ","), "[[", 1))
untar(tarfile = file.path(list.files.path$Project.RawData,"GSE212966_RAW.tar"),
exdir = list.files.path$Project.RawData, list = F)
for(i in Clinic$title2){
files = list.files(list.files.path$Project.RawData)[str_detect(list.files(list.files.path$Project.RawData), i)]
Meta = try(AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =files[str_detect(files, "barcode")] ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F), silent = T)
gc()
if(class(Meta)=="try-error"){
message(paste(i, "has not the same length in Genes, or Samples in Matrix"))
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =NULL ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F)
colnames(Meta$Raw.count.matrix) = paste0(i,"-", rep(1:ncol(Meta$Raw.count.matrix)))
}
colnames(Meta$Raw.count.matrix) = paste0(i,"_",colnames(Meta$Raw.count.matrix))
if(!exists("test")){
test = Matrix(Meta$Raw.count.matrix)
} else {
if(length(rownames(test))==length(rownames(Meta$Raw.count.matrix))) {
test = cbind(test, Matrix(Meta$Raw.count.matrix)) } else {
test = full_join(test, Matrix(Meta$Raw.count.matrix))
}}
rm(Meta,i,files)
gc()
}
View(test)
colnames(test)
colnames(test)[ncol(test)-5:ncol(test)]
files
Meta = try(AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =files[str_detect(files, "barcode")] ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F), silent = T)
class(Meta)=="try-error")
class(Meta)=="try-error"
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =NULL ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F)
readMM(file.path(list.files.path$Project.RawData,files[str_detect(files, ".mtx")]))
Clinic$title2[Clinic$title2!="ADJ5"])
Clinic$title2[Clinic$title2!="ADJ5"]
rm(test)
for(i in Clinic$title2[Clinic$title2!="ADJ5"]){
files = list.files(list.files.path$Project.RawData)[str_detect(list.files(list.files.path$Project.RawData), i)]
Meta = try(AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =files[str_detect(files, "barcode")] ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F), silent = T)
gc()
if(class(Meta)=="try-error"){
message(paste(i, "has not the same length in Genes, or Samples in Matrix"))
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =NULL ,
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F)
colnames(Meta$Raw.count.matrix) = paste0(rep(1:ncol(Meta$Raw.count.matrix)))
}
colnames(Meta$Raw.count.matrix) = paste0(i,"_",colnames(Meta$Raw.count.matrix))
if(!exists("test")){
test = Matrix(Meta$Raw.count.matrix)
} else {
if(length(rownames(test))==length(rownames(Meta$Raw.count.matrix))) {
test = cbind(test, Matrix(Meta$Raw.count.matrix)) } else {
test = full_join(test, Matrix(Meta$Raw.count.matrix))
}}
rm(Meta,i,files)
gc()
}
{
Meta = AddExpressionMatrix(Metadata = NULL,
Omics.type = "Single.Cell", #important!!!!!
Raw = T, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file ="GSM6567157_PDAC1_matrix.mtx.gz",
Cell.file = NULL ,
Genes.file = "GSM6567157_PDAC1_genes.tsv.gz",
name = "Raw.count",
force.replace = F)
Meta$Raw.count.matrix = test
Meta = AddObjetToMeta(Meta,
{data.frame("CellsID" = colnames(Meta$Raw.count.matrix))},
name = "Cells.Annot",
Data.type = "Samples.Clinical.data",
Raw = "Yes")
gc()
rm(test)
}
Meta = AddObjetToMeta(Meta,
Clinic,
name = "Clinic",
Data.type = "Patient.Clinical.data",
Raw = "Yes")
View(Clinic)
colnames(Meta$Raw.count.matrix)[str_detect(colnames(Meta$Raw.count.matrix),"ADJ4")]
summary(colnames(Meta$Raw.count.matrix)[str_detect(colnames(Meta$Raw.count.matrix),"ADJ4")])
Cell = data.table::fread(file.path(list.files.path$Project.RawData, "GSM6567169_ADJ4_barcodes.tsv.gz"),header = F)
#No samples data file in published exported file. On ly 1 Patient.
LexicData(list.files.path, replaceLexic = F)
Meta$Cells.Annot$PatientID = unlist(lapply(str_split(Meta$Cells.Annot$CellsID, "_"),"[[",1))
Meta$Cells.Annot$PatientID
summary(as.factor(Meta$Cells.Annot$PatientID))
Meta$Cells.Annot
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientsID","PatientID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesID","CellsID") )
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
colnames(Meta$Clinic)
head(Meta$Clinic)
View(Clinic)
View(PatientLexic)
Meta$Cells.Annot$SamplesID = unlist(lapply(str_split(Meta$Cells.Annot$CellsID, "_"),"[[",1))
Meta$Cells.Annot$SampleType = ifelse(str_detect("PDAC",Meta$Cells.Annot$PatientID), "Primary tumor", "Normal Adjacent")
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientsID","PatientID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesID","SamplesID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("CellsID","CellsID") )
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SampleType","SampleType") )
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
View(Meta)
Meta[["Chen.Samples.Cells.Annot"]]
#No samples data file in published exported file. On ly 1 Patient.
LexicData(list.files.path, replaceLexic = T)
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientsID","PatientID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesID","CellsID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesOriginn","SamplesID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SampleType","SampleType") )
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
View(Meta)
Meta[["Chen.Samples.Cells.Annot"]]
#No samples data file in published exported file. On ly 1 Patient.
LexicData(list.files.path, replaceLexic = T)
View(SamplesLexic)
Meta$Cells.Annot$SamplesID
Meta$Cells.Annot$PatientID
str_detect("PDAC",Meta$Cells.Annot$PatientID)
Meta$Cells.Annot$SampleType = ifelse(str_detect(Meta$Cells.Annot$PatientID, "PDAC"), "Primary tumor", "Normal Adjacent")
Meta$Cells.Annot$SampleType
Meta$Cells.Annot$SampleNumber = unlist(lapply(str_split(Meta$Cells.Annot$CellsID, "_"),"[[",1))
Meta$Cells.Annot$SampleNumber
Meta$Cells.Annot$PatientID = as.character(gsub("\\D",Meta$Cells.Annot$SampleNumber))
Meta$Cells.Annot$PatientID = as.character(gsub("\\D","",Meta$Cells.Annot$SampleNumber))
Meta$Cells.Annot$PatientID
Meta$Cells.Annot$SamplesID=NULL
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientsID","PatientID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesID","CellsID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesOriginn","SampleNumber") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SampleType","SampleType") )
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
View(Meta)
Meta[["Chen.Samples.Cells.Annot"]]
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplePathologicalState","SampleType") )
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
View(Meta)
Meta[["Chen.Samples.Cells.Annot"]]
