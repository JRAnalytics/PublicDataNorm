l <- length(Metadata)
Metadata[[l+1]] <- clinic2
names(Metadata)[l+1] <- exportname
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"CellsAnnot")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"Yes")}
} else{
stop("Choose type = c('Samples', 'Patients')")}
return(Metadata)
}
#' @param FilterSP default F, if T, keep only retrieved samples in SamplesAnnotation file
#' @param force.replace set as F. T : replace an already object with the same name
#' @param keep.all.column default F, if T, copy all column from clinic.
#' @param FilterGenes Filter for genes found in geneannotation file and rownames of matrices.
#' @importFrom utils menu
#' @import dplyr
#' @return a meataobject
#' @export
#'
#' @examples "non"
CleaningData = function(Metadata = NULL,
PatientsLexic = NULL,
PatientsAnnotToClean = NULL,
PatientsExportname = NULL,
SamplesLexic = NULL,
SamplesAnnotToClean = NULL,
SamplesExportname = NULL,
FilterSP =  F,
force.replace = F,
keep.all.column = F,
FilterGenes = F){
if(is.null(Metadata)){stop("No Metadata found.")}
if(is.null(PatientsLexic)&is.null(SamplesLexic)){stop("A PatientsLexic or SamplesLexic is mandatory for data cleaning")}
if(!is.null(SamplesLexic) & attributes(Metadata)$Omics.type!="Single.Cell"){
if(is.null(SamplesAnnotToClean)){stop("SamplesAnnotToClean has to be specify.")}
SamAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned == "No")
ClinicRaw = which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned == "No")
if(length(SamAnnotRaw)!=0){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = SamplesAnnotToClean,
exportname = SamplesExportname,
FilterSamples =  FilterSP,
force.replace = force.replace )
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = SamplesAnnotToClean,
exportname = paste0(SamplesExportname,".fullCol"),
FilterSamples =  FilterSP,
force.replace = force.replace,
keep.all.column =keep.all.column )}
}
}
if(is.null(PatientsAnnotToClean) & attributes(Metadata)$Omics.type!="Single.Cell" ){
RP = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="No")
message("Creating a Patient clinical table from Samples annotation")
if(length(RP)>0){stop("Raw Patients clinical data found in Metaobject, Specify PatientsAnnotToClean")}
if(is.null(PatientsExportname)){stop("Specify PatientsExportname.")}
if(is.null(PatientsLexic)){stop("PatientsLexic is mandatory.")}
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = SamplesAnnotToClean,
exportname = PatientsExportname,
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace,
CleanFromOtherType = T)
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = SamplesAnnotToClean,
exportname = paste0(PatientsExportname,".fullCol"),
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace,
CleanFromOtherType = T,
keep.all.column = T)
}
} else{
if(is.null(PatientsLexic)){stop("A PatientsLexic is mandatory for data cleaning")}
ClinicRaw = which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned == "No")
SamAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned == "No")
if(length(ClinicRaw)!=0){
if(length(SamAnnotRaw)!=0){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = PatientsAnnotToClean,
exportname = PatientsExportname,
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace )
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = PatientsAnnotToClean,
exportname = paste0(PatientsExportname,".fullCol"),
FilterPatients =FilterSP,
FilterSamples = F,
force.replace = force.replace,
keep.all.column =keep.all.column )}
SID =  Metadata[[SamAnnotRaw[1]]]$SamplesID
if(is.null( Metadata[[SamAnnotRaw[1]]]$PatientsID)){message(paste("No PatientsID column found in", names(Metadata)[SamAnnotRaw[1]], "\nCleaning may be sub optimal."))}
psID =  Metadata[[ClinicRaw[1]]]$SamplesID
if(is.null( Metadata[[ClinicRaw[1]]]$SamplesID)){message(paste("No SamplesID column found in", names(Metadata)[ClinicRaw[1]], "\nCleaning may be sub optimal."))}
if(length(which(SID%in%psID))==length(SID)){
message("All PatientsID are found as SamplesID")
} else {
if(length(which(SID%in%psID))<length(SID)){
message("Not all SamplesID from Samples Annotation object are found in Clinic data")
Metadata[[PatientsExportname]]= Metadata[[PatientsExportname]][which(psID%in%SID),]
if(keep.all.column==T){ Metadata[[paste0(PatientsExportname,".fullCol")]]= Metadata[[paste0(PatientsExportname,".fullCol")]][which(psID%in%SID),]
}}
else {
if(length(which(SID%in%psID))==0){
stop("No SamplesID from Sampels Annot match in Clinical data.")
}
}
}
} else {
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = PatientsAnnotToClean,
exportname = PatientsExportname,
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace )
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = PatientsAnnotToClean,
exportname = paste0(PatientsExportname,".fullCol"),
FilterPatients =FilterSP,
FilterSamples = F,
force.replace = force.replace,
keep.all.column =keep.all.column )}
}
}}
if(FilterGenes == T){
g =  which(attributes(Metadata)$Data.Type=="geneAnnot")[1]
m <- which(attributes(Metadata)$Data.Type=="Count")
object = Metadata[[g]]
if(!is.na(g)){geneAnnot = as.matrix(Metadata[[g]])}
for (i in m){
gene = rownames(Metadata[[i]])
sel = which(geneAnnot %in% gene)
colT = which(apply(geneAnnot, 2, function(x) which(x %in% geneAnnot[sel[1]]))>0)[1]
object <- object[object[,colT]%in%gene,]
if(length(object[,colT])!=length(unique(object[,colT]))){object <- object[!duplicated(object[,colT]),]}
Metadata[[i]] = Metadata[[i]][object[,colT],]
attributes(Metadata)$Cleaned[i] = "Yes"
}
Metadata[[g]] = object
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
if(is.null(SamplesLexic)){stop("You can set SamplesLexic with a Lexic for Cells Annotation cleaning.")}
if(!"SamplesAnnot"%in%attributes(Metadata)$Data.Type & !is.null(SamplesLexic)){
SamAnnotRaw = which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned == "No")
pp = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="Yes")
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Cells",
ClinicToClean = names(Metadata)[SamAnnotRaw],
exportname = paste("Cells.Annotation"),
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
cellID = Metadata$Cells.Annotation$CellsBarcode
if(length(pp)>0){
clinic = Metadata[[pp]]
for (z in clinic$PatientsID){
Metadata$Cells.Annotation$PatientsID=ifelse(str_detect(pattern = paste0(z,"_"), cellID),z,Metadata$Cells.Annotation$PatientsID)
}
}
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Cells",
ClinicToClean = names(Metadata)[SamAnnotRaw],
exportname = "Cells.Annotation.Full",
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =keep.all.column )
cellID = Metadata$Cells.Annotation$CellsBarcode
if(length(pp)>0){
clinic = Metadata[[pp]]
for (z in clinic$PatientsID){
Metadata$Cells.Annotation.Full$PatientsID=ifelse(str_detect(pattern = paste0(z,"_"), cellID),z,Metadata$Cells.Annotation.Full$PatientsID)
}
}
}
}
ClinicRaw = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="No")
SampleAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" &attributes(Metadata)$Cleaned=="No")
if(length(ClinicRaw)<1 & !is.null(PatientsLexic)){
SamAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned == "No")
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[SamAnnotRaw],
exportname = PatientsExportname,
FilterPatients =FilterSP,
FilterSamples = FilterSP,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =F )}
if(length(ClinicRaw)>0 & !is.null(PatientsLexic)){
CellNAnotRaw = which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned == "No")
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Cells",
ClinicToClean = names(Metadata)[CellNAnotRaw],
exportname = paste("Cells.Annotation"),
FilterPatients =FilterSP,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = PatientsExportname,
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = paste0(PatientsExportname,".Full"),
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =T )
}
}
if(length(SampleAnnotRaw)>0 & !is.null(SamplesLexic)){
CellNAnotRaw = which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned == "No")
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Cells",
ClinicToClean = names(Metadata)[CellNAnotRaw],
exportname = paste("Cells.Annotation"),
FilterPatients =FilterSP,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = SamplesExportname,
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = paste0(SamplesExportname,".Full"),
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =T )
}
}
}
return(Metadata)
}
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Raw.Patientannot" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = "Raw.sampleannot",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = F, #set T, will filter with genes found in gene annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["Patients.Clinic"]]
View(Metadata[["Patients.Clinic"]])
CheckMeta(Metadata)
#' CheckMeta : Checking samples accors Metadata files
#'
#' @param Metadata a Metadata list
#'
#' @return none
#' @export
#'
#' @examples "none"
CheckMeta <- function(Metadata) {
if(is.null(Metadata)){stop("Need a Metadata List file")}
if(!is.list(Metadata)){stop("Need a Metadata List file")}
if(is.null(attributes(Metadata)$Omics.type)){attributes(Metadata)$Omics.type="NotDefine"}
if("CellsAnnot"%in%attributes(Metadata)$Data.Type){attributes(Metadata)$Omics.type="Single.Cell"}
l <-length(names(Metadata))
MetaDataN <- names(Metadata)
m <- which(attributes(Metadata)$Data.Type=="Count")
g =  which(attributes(Metadata)$Data.Type=="geneAnnot")[1]
if(!is.na(g)){geneAnnot = as.matrix(Metadata[[g]])}
if(attributes(Metadata)$Omics.type!="Single.Cell"){
c <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="Yes")
s <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
s2 <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(c2)>0){c=c2}
if(length(s2)>0){s=s2}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
if("Clinic" %in%attributes(Metadata)$Data.Type){ c <- which(attributes(Metadata)$Data.Type=="Clinic")}
if("SamplesAnnot" %in%attributes(Metadata)$Data.Type & !"Clinic" %in%attributes(Metadata)$Data.Type){
c <- which(attributes(Metadata)$Data.Type=="SamplesAnnot") }
}
if(attributes(Metadata)$Data.Type[s[1]]=="SamplesAnnot"){sID <- Metadata[[s[1]]][,"SamplesID"] }
if(attributes(Metadata)$Data.Type[c[1]]=="Clinic"){pID <- Metadata[[c[1]]][,"PatientsID"] }
if(attributes(Metadata)$Data.Type[c[1]]=="Clinic" & attributes(Metadata)$Omics.type=="Single.Cell"){
cellannot = which(attributes(Metadata)$Data.Type=="CellsAnnot"& attributes(Metadata)$Cleaned=="No")
cellannot2 = which(attributes(Metadata)$Data.Type=="CellsAnnot"& attributes(Metadata)$Cleaned=="Yes")
if("Clinic" %in%attributes(Metadata)$Data.Type){ c <- which(attributes(Metadata)$Data.Type=="Clinic"  & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="Clinic"  & attributes(Metadata)$Cleaned=="Yes")
cellID <- Metadata[[cellannot[1]]][,"CellsBarcode"]
if(length(c2>0)){     pID <- Metadata[[c2[1]]][,"PatientsID"];c=c2} else {     pID <- Metadata[[c[1]]][,"PatientsID"]}
if(length(cellannot2>0)){ cellID <- Metadata[[cellannot2[1]]][,"CellsBarcode"];cellannot=cellannot2} else {   cellID <- Metadata[[cellannot[1]]][,"CellsBarcode"]}
}
if("SamplesAnnot" %in%attributes(Metadata)$Data.Type){ c <- which(attributes(Metadata)$Data.Type=="Clinic"  & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="SamplesAnnot"  & attributes(Metadata)$Cleaned=="Yes")
cellID <- Metadata[[cellannot[1]]][,"CellsBarcode"]
if(length(c2>0)){     sID <- Metadata[[c2[1]]][,"SamplesID"];c=c2} else {     sID <- Metadata[[c[1]]][,"SamplesID"]}
if(length(cellannot2>0)){ cellID <- Metadata[[cellannot2[1]]][,"CellsBarcode"];cellannot=cellannot2} else {   cellID <- Metadata[[cellannot[1]]][,"CellsBarcode"]}
}
}
if(attributes(Metadata)$Data.Type[c[1]]=="SamplesAnnot" & attributes(Metadata)$Omics.type=="Single.Cell" & !"Clinic" %in% attributes(Metadata)$Data.Type){
cellannot = which(attributes(Metadata)$Data.Type=="CellsAnnot"& attributes(Metadata)$Cleaned=="No")
cellannot2 = which(attributes(Metadata)$Data.Type=="CellsAnnot"& attributes(Metadata)$Cleaned=="Yes")
c <- which(attributes(Metadata)$Data.Type=="SamplesAnnot"  & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="SamplesAnnot"  & attributes(Metadata)$Cleaned=="Yes")
cellID <- Metadata[[cellannot[1]]][,"CellsBarcode"]
if(length(c2>0)){     sID <- Metadata[[c2[1]]][,"SamplesID"]} else {     sID <- Metadata[[c[1]]][,"SamplesID"]}
if(length(cellannot2>0)){ cellID <- Metadata[[cellannot2[1]]][,"CellsBarcode"]} else {   cellID <- Metadata[[cellannot[1]]][,"CellsBarcode"]}
}
for (i in m){
if(attributes(Metadata)$Omics.type!="Single.Cell"){
message("-------------------------")
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
if(length(ccc)>0){  message(paste("Checking SamplesID in Cleaned Metadata sub-objects from", names(Metadata)[s2[1]]))}else {
message(paste("Checking SamplesID in Metadata sub-objects from", names(Metadata)[s[1]])) }
message("-------------------------")
if(all(sID %in% colnames(Metadata[[i]]))==T) {   message(paste(MetaDataN[i]), " colnames : PASS") } else {
message(paste(MetaDataN[i]), " colnames : FAIL")
if(summary(sID %in% colnames(Metadata[[i]]))["TRUE"]==ncol(Metadata[[i]]) ){message(paste("All samples from", MetaDataN[i],"are found in Samples or clinical annotation file."))}
message(paste("Samples not found in ", MetaDataN[i]," : "), paste0(na.omit(sID[!sID%in%colnames(Metadata[[i]])]),collapse = "; "))}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
message("-------------------------")
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
if(length(ccc)>0 ){  message(paste("Checking  Cells barcodes and Samples/Patients correspondances in cleaned Metadata sub-objects from", names(Metadata)[c2[1]]))}else {
message(paste("Checking Cells barcodes and Samples/Patients correspondances in Metadata sub-objects from", names(Metadata)[c[1]]))}
message("-------------------------")
if(all(cellID %in% colnames(Metadata[[i]]))==T) {   message(paste("All Cells barcodes in",MetaDataN[i], "colnames : PASS")) } else {
message(paste(MetaDataN[i]), " colnames : FAIL")
if(length(!cellID%in%colnames(Metadata[[i]]))>10){
mismatch = na.omit(cellID[!cellID%in%colnames(Metadata[[i]])])[1:10]
ext = paste("\n showing ten of",length(cellID[!cellID%in%colnames(Metadata[[i]])]), "not found") }else {
mismatch=na.omit(cellID[!cellID%in%colnames(Metadata[[i]])])
ext = ""}
message(paste("Cells barcodes not found in ", MetaDataN[i]," : "), paste0(mismatch,collapse = "; "),ext)}
}
}
if(!is.na(g)){
message("-------------------------")
message("Checking Matrices probes")
message("-------------------------")
for (i in m){
gene = rownames(Metadata[[i]])
sel = which(geneAnnot %in% gene)
col = which(apply(geneAnnot, 2, function(x) which(x %in% geneAnnot[sel[1]]))>0)[1]
if(all(str_detect(gene, "ENSG")==T)) { message(paste(names(Metadata[i]), " gene probes as ENSEMBL"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(is.numeric(as.numeric(gene))))  { message(paste(names(Metadata[i]), " gene probes as ENTREZ gene id"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(str_detect(gene, "ILMN_")==T)) { message(paste(names(Metadata[i]), " gene probes as Illumina Bead Array Probes"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else{
if(all(str_detect(gene, "_at")==T)) { message(paste(names(Metadata[i]), " gene probes as Illumina Microarray Probes"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(length(which(gene%in%geneAnnot$GeneSymbol))>1)   {
message(paste(names(Metadata[i]), " gene probes as genes Symbols"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(gene%in%geneAnnot)) { message(paste(names(Metadata[i]), " gene probes manualy entered from published data."))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
}
}}}}}}}
message("-------------------------")
if(length(c>0)){
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
if(length(ccc)>0){  message(paste("Checking Common Samples from", names(Metadata)[c2[1]] ,"in other Cleaned Samples or Patients annotations data."))}else {
message(paste("Checking Common Samples from", names(Metadata)[c[1]] ,"in other Samples or Patients annotations data."))}
message("-------------------------")
for (i in c){
if(attributes(Metadata)$Omics.type!="Single.Cell"){
psID =  Metadata[[i]][,"SamplesID"]
if(length(which(psID %in% as.matrix(Metadata[[s]])))==length(sID)){message(paste(MetaDataN[i]), " : PASS") }
if(length(which(psID %in% as.matrix(Metadata[[s]])))<length(sID)){
message(paste(MetaDataN[i]), " : FAIL")
message(paste("SamplesID not found in ", MetaDataN[i]," : "), paste0(na.omit(sID[!sID%in%psID]),collapse = "; "))
}
}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
message(paste("Patients from Single.Cell data:", names(Metadata)[i]))
tot=0
for (z in rownames(Metadata[[i]])) {
t = summary(str_detect(pattern = paste0(z,"_"), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
message(c(z," N= ",as.numeric(t)))
}
message("Total = " , tot, "\n Are all cells barcode associated to Patients found in clinical data ? ", tot/length(cellID)==1)
message("-------------------------")
p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Export=="No")
if(length(p)>0){
message(paste("Samples from Single.Cell data:", names(Metadata)[p]))
tot=0
for (z in rownames(Metadata[[p]])) {
t = summary(str_detect(pattern = paste0(z,"_"), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
message(c(z," N= ",as.numeric(t)))
}
message("Total = " , tot, "\nAre all Cells barcode associated to Samples in SamplesAnnot ? ", tot/length(cellID)==1)
message("-------------------------")
}
mm =  which(attributes(Metadata)$Data.Type=="Count")
if(length(mm)>0){
message(paste("Samples from Single.Cell data:", names(Metadata)[mm]))
tot=0
for (z in sID) {
t = summary(str_detect(pattern = paste0(z,"_"), colnames(Metadata[[mm]])))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
message(c(z," N= ",as.numeric(t)))
}
message("Total = " , tot, "\nAre all cells barcode found in Matrix count ? ", tot/length(cellID)==1)
message("-------------------------")
}
}
}}
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Raw.Patientannot" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = "Raw.sampleannot",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = F, #set T, will filter with genes found in gene annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
CheckMeta(Metadata)
load("E:/JR_analytics_Rwork/JRA_Roya/JRA_Roya_Start.RData")
