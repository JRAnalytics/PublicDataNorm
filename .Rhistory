unique(subset(cellsannot, sample_name=="3829-EC")$patient_id)
summary(as.factor(cellsannot[
which(unlist(lapply( str_split(rownames(cellsannot),"_"),"[[",2)) %in%
colnames(h5test3)),]$sample_name))
dim(h5test3)
list.files(file.path(Rawpath(Metadata),"GSE229413_RAW"))
h5test3  = Read10X_h5(file.path(Rawpath(Metadata),"GSE229413_RAW", "GSM7277528_61354770_Sample_filtered_feature_bc_matrix.h5"))
summary(as.factor(cellsannot[
which(unlist(lapply( str_split(rownames(cellsannot),"_"),"[[",2)) %in%
colnames(h5test3)),]$sample_name))
unique(subset(cellsannot, sample_name=="126197")$patient_id)
unique(SamAnnot$SamplesID) [!unique(SamAnnot$SamplesID) %in% unique(cellsannot$sample_name)] #two sampels diff: donor_6 in geoMX only
h5test4  = Read10X_h5(file.path(Rawpath(Metadata),"GSE229413_RAW", "GSM7277529_61354830_Tissue_filtered_feature_bc_matrix.h5"))
h5test5  = Read10X_h5(file.path(Rawpath(Metadata),"GSE229413_RAW", "GSM7277530_61356750_Tumor_filtered_feature_bc_matrix.h5"))
summary(as.factor(cellsannot[
which(unlist(lapply( str_split(rownames(cellsannot),"_"),"[[",2)) %in%
colnames(h5test4)),]$sample_name))
summary(as.factor(cellsannot[
which(unlist(lapply( str_split(rownames(cellsannot),"_"),"[[",2)) %in%
colnames(h5test5)),]$sample_name))
unique(subset(cellsannot, sample_name=="123798")$patient_id) # pat ID = 4770
unique(subset(cellsannot, sample_name=="127260")$patient_id) # pat ID = 4770
#load clinic and metadata
SamAnnot=getGEO('GSE229413',GSEMatrix=TRUE)[["GSE229413_series_matrix.txt.gz"]]@phenoData@data
SamAnnot$SamplesID = rownames(SamAnnot)
rownames(SamAnnot) = SamAnnot$title
unique(SamAnnot$title)
unique(cellsannot$patient_id)
SamAnnot$PatientsID=NA
for (i in unique(cellsannot$patient_id)){
pos=  which(grepl(i,unique(SamAnnot$title)))
if(!is_empty(pos)){
SamAnnot[pos,]$PatientsID = i}
}
summary(SamAnnot$PatientsID %in% unique(cellsannot$patient_id))
unique(cellsannot$patient_id)[!unique(cellsannot$patient_id) %in% SamAnnot$PatientsID]
SamAnnot[SamAnnot$title=="19-227PancNorm","PatientsID"] = "19227"
SamAnnot[SamAnnot$title=="19-732PancNorm","PatientsID"]= "19732"
SamAnnot[SamAnnot$title=="Donor_6_head","PatientsID"]= "Donor_6"
SamAnnot[SamAnnot$title=="Donor_6_tail","PatientsID"]= "Donor_6"
# looking for samplesID from published clinic and cells annotation to paste into samannot
for (i in 1:nrow(publishedClinic)){
patID = publishedClinic[i,]$`Donor ID`
samplesID = unlist(str_split(publishedClinic[i,]$`Sequencing Run`,"; "))
if(!all(is.na(samplesID))){
if(length(samplesID)>1){
for (j in samplesID){
sam = unlist(str_split(j," "))[2]
loc = unlist(str_split(j," "))[1]
if(length(unique(cellsannot[which(cellsannot$sample_name %in%sam) ,]$patient_id))>0){
if(patID==unique(cellsannot[which(cellsannot$sample_name %in%sam) ,]$patient_id)){
SamAnnot[paste0(patID,'_',tolower(loc)),]$SamplesID = sam
}}else{message("none")}
}
}else{
if(length(unique(cellsannot[which(cellsannot$sample_name %in%samplesID) ,]$patient_id))>0){
if(patID==unique(cellsannot[which(cellsannot$sample_name %in%samplesID) ,]$patient_id)){
SamAnnot[paste0(patID,'_head_and_tail'),]$SamplesID = samplesID
}}else{message("none")}
}}
}
cellsannot$SamplesNewID = paste0(cellsannot$patient_id,"_",cellsannot$location,";", cellsannot$sample_name)
cellsannot2 = subset(cellsannot, !is.na(location))
SamplesNewID = unique(cellsannot2$SamplesNewID)
for (i in SamplesNewID){
patID = unlist(str_split(i,";"))[1]
sam = unlist(str_split(i,";"))[2]
SamAnnot[patID,]$SamplesID = sam
}
SamplesNewID2 = unique(cellsannot$SamplesNewID[!cellsannot$SamplesNewID %in% SamplesNewID])
SamplesNewID2 = gsub("_NA", "", SamplesNewID2)
for (i in SamplesNewID2){
patID = unlist(str_split(i,";"))[1]
sam = unlist(str_split(i,";"))[2]
if(length(which(SamAnnot$PatientsID==patID))==1){
SamAnnot[which(SamAnnot$PatientsID==patID),]$SamplesID = sam}
}
cellsannot$SamplesNewID2 = paste0(cellsannot$patient_id,"_",cellsannot$lesion,";", cellsannot$sample_name)
unique(cellsannot$SamplesNewID2)
summary(unique(cellsannot$patient_id) %in% SamAnnot$PatientsID)
unique(cellsannot$sample_name) [!unique(cellsannot$sample_name) %in% SamAnnot$SamplesID]
summary(as.factor(subset(cellsannot, patient_id=="1261")[
which(unlist(lapply( str_split(rownames(subset(cellsannot, patient_id=="1261")),"_"),"[[",2)) %in%
olnames(h5test)),]$sample_name)) # max barcodes in sample 130840 (16 in the other sample)
summary(as.factor(subset(cellsannot, patient_id=="1261")[
which(unlist(lapply( str_split(rownames(subset(cellsannot, patient_id=="1261")),"_"),"[[",2)) %in%
olnames(h5test)),]$sample_name)) # max barcodes in sample 130840 (16 in the other sample)
summary(as.factor(subset(cellsannot, patient_id=="1261")[
which(unlist(lapply( str_split(rownames(subset(cellsannot, patient_id=="1261")),"_"),"[[",2)) %in%
colnames(h5test)),]$sample_name)) # max barcodes in sample 130840 (16 in the other sample)
summary(as.factor(subset(cellsannot, patient_id=="1261")[
which(unlist(lapply( str_split(rownames(subset(cellsannot, patient_id=="1261")),"_"),"[[",2)) %in%
colnames(h5test2)),]$sample_name)) # max barcodes in sample 130850  (12 in the other sample)
SamAnnot["DS20191261Tumor" ,]$SamplesID = "130450"
SamAnnot["DS20191261TumorKeller" ,]$SamplesID = "130840"
unique(cellsannot$sample_name) [!unique(cellsannot$sample_name) %in% SamAnnot$SamplesID] #three samples to go "126197" "123798" "127260"
unique(SamAnnot$SamplesID) [!unique(SamAnnot$SamplesID) %in% unique(cellsannot$sample_name)] #two sampels diff: donor_6 in geoMX only
summary(as.factor(cellsannot[
which(unlist(lapply( str_split(rownames(cellsannot),"_"),"[[",2)) %in%
colnames(h5test5)),]$sample_name))
unique(subset(cellsannot, sample_name=="126197")$patient_id) # pat ID = 4770
unique(subset(cellsannot, sample_name=="123798")$patient_id) # pat ID = 4770
unique(subset(cellsannot, sample_name=="127260")$patient_id) # pat ID = 4770
unique(SamAnnot$SamplesID) [!unique(SamAnnot$SamplesID) %in% unique(cellsannot$sample_name)] #two sampels diff: donor_6 in geoMX only
list.files(file.path(Rawpath(Metadata),"GSE229413_RAW"))
SamAnnot[SamAnnot$title=="DS20191246Tumor","PatientsID"]= "4770"
SamAnnot[SamAnnot$title=="DS20191238Tumor","PatientsID"]= "4830"
SamAnnot[SamAnnot$title=="DS20191229Tumor","PatientsID"]= "6750"
unique(cellsannot$sample_name) [!unique(cellsannot$sample_name) %in% SamAnnot$SamplesID]
SamAnnot[SamAnnot$title=="DS20191246Tumor","PatientsID"]= "4770"
SamAnnot[SamAnnot$title=="DS20191246Tumor","SamplesID"]= "126197"
SamAnnot[SamAnnot$title=="DS20191238Tumor","PatientsID"]= "4830"
SamAnnot[SamAnnot$title=="DS20191246Tumor","SamplesID"]= "123798"
SamAnnot[SamAnnot$title=="DS20191229Tumor","PatientsID"]= "6750"
SamAnnot[SamAnnot$title=="DS20191246Tumor","SamplesID"]= "127260"
unique(cellsannot$sample_name) [!unique(cellsannot$sample_name) %in% SamAnnot$SamplesID]
SamAnnot[SamAnnot$title=="DS20191246Tumor","SamplesID"]
SamAnnot[SamAnnot$title=="DS20191246Tumor","PatientsID"]= "4770"
SamAnnot[SamAnnot$title=="DS20191246Tumor","SamplesID"]= "126197"
SamAnnot[SamAnnot$title=="DS20191238Tumor","PatientsID"]= "4830"
SamAnnot[SamAnnot$title=="DS20191238Tumor","SamplesID"]= "123798"
SamAnnot[SamAnnot$title=="DS20191229Tumor","PatientsID"]= "6750"
SamAnnot[SamAnnot$title=="DS20191229Tumor","SamplesID"]= "127260"
unique(cellsannot$sample_name) [!unique(cellsannot$sample_name) %in% SamAnnot$SamplesID]
cellsannot = cellsannot[colnames(count),]
# Creating MetaObject to clean
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = publishedClinic,
Export = F,
setSamplesID.Column = NULL,
setPatientID.Column = "Donor ID",
name ="rawClinic" ,
type ="Patients") %>%
AddClinicFromObject(object = SamAnnot,
Export = F,
setSamplesID.Column = "SamplesID",
setPatientID.Column = "PatientsID",
name ="RawSamAnnot" ,
type ="Samples") %>%
AddClinicFromObject(object = cellsannot,
Export = F,
setSamplesID.Column = "sample_name",
setCellsBarcode.Column = "barcodes",
setPatientID.Column = "patient_id",
name ="RawCellsAnnot",
type ="Cells") %>%
AddExpressionMatrixSC(
ExpressionMatrix = count,
name = "rawcount")
CheckMeta(Metadata)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(GEOquery)
library(Matrix)
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Metadata = VersionCheck(Metadata, path = path) # Will check if other version exist in path files
project <- "Hwang"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Metadata = VersionCheck(Metadata, path = path) # Will check if other version exist in path files
library(Seurat)
library(SeuratDisk)
SeuratDisk::Convert(file.path(Rawpath(Metadata),"GSE202051_totaldata-final-toshare.h5ad"),
file.path(Rawpath(Metadata),"GSE202051_totaldata-final-toshare.h5seurat"))
sob <- LoadH5Seurat( file.path(Rawpath(Metadata),"GSE202051_totaldata-final-toshare.h5seurat"),assays = "RNA",reduction="umap")
count = GetAssayData(object = sob, layer = "counts")
ncol(count)
#load clinic and metadata
Clinic=getGEO('GSE202051',GSEMatrix=TRUE)[["GSE202051_series_matrix.txt.gz"]]@phenoData@data
Clinic$SamplesID = rownames(Clinic)
Clinic$patientsID = unlist(lapply(str_split(Clinic$title, ","),"[[",1))
Clinic = Clinic %>%
mutate(patientsID = str_replace_all(patientsID, "PDAC_", "")) %>%  # Enlever "PDAC_"
mutate(patientsID = str_replace_all(patientsID, "_", ""))
publishedClinic = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"clinical data .txt")))
publishedClinic= publishedClinic %>%
mutate(patientsID = str_replace_all(ID, "PDAC_", "")) %>%  # Enlever "PDAC_"
mutate(patientsID = str_replace_all(patientsID, "_", ""))
cellsannot = sob@meta.data
cellsannot$pid
cellsannot$barcodes = rownames(cellsannot)
head(count[,1:5])
summary(rownames(cellsannot) %in% colnames(count))
summary(cellsannot$sampleid %in% colnames(count))
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = publishedClinic,
Export = F,
setSamplesID.Column = NULL,
setPatientID.Column = "patientsID",
name ="RawClinic" ,
type ="Patients") %>%
AddClinicFromObject(object = Clinic,
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "patientsID",
name ="RawSamAnnot" ,
type ="Samples") %>%
AddClinicFromObject(object = cellsannot,
Export = F,
setCellsBarcode.Column = "barcodes",
setSamplesID.Column = "sampleid",
setPatientID.Column = "pid",
name ="RawCellsAnnot" ,
type ="Cells") %>%
AddExpressionMatrixSC(
ExpressionMatrix = count,
Cell.file = NULL,
Genes.file = NULL,
name = "rawcount")
CheckMeta(Metadata)
Metadata$RawCellsAnnot$patientsID = as.character(Metadata$RawCellsAnnot$patientsID)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
SL$samplesID=NULL #will remove all lexic associted to samplesID because probleme with GEO_accession number.
SL = addSeveralKeysToLexic(lexic = SL,vector = c("patientsID"="patientsID",
"samplesID"="samplesID", #modif ici
"samplePathologicalState"="tissue",
"specimenOrgan"="source",
"tumorType"="source",
"hadTreatment"="Treatment",
"histology"="Histology",
"storageDay"="Storage (d)",
"nbCells"="no_cells") )
CL = addSeveralKeysToLexic(lexic = CL,vector = c("samplePathologicalState"="SamplesType" ))
PL$patientsID=NULL
PL = addSeveralKeysToLexic(lexic = PL,vector = c("patientsID"="patientsID",
"age"="Age (decade)",
"OSdelay"="OS (d)",
"PFSdelay"="PFS (d)",
"disease"="Disease",
"treatmentInfo"="Neoadjuvant",
"stage"="Stage",
"histology"="Histology",
"hasTreatment"="hasTreatment",
"specimenOrgan"="source",
"tumorType"="source",
"patientSampling"="PatientSampling") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T,
keep.all.column = F,
FilterGenes = F)
PatientLog(Metadata)
View(Clinic)
clinic
clinic = clinic
clinic = Clinic
LexicClinic = PL
colnames(clinic) <-gsub("[.]", "_",colnames(clinic))
colnames(clinic) <-gsub(" ", "_",colnames(clinic))
colnames(clinic) <-gsub("[:]", "_",colnames(clinic))
colnames(clinic) <-gsub("[(]", "",colnames(clinic))
colnames(clinic) <-gsub("[)]", "",colnames(clinic))
colnames(clinic) <-gsub("[,]", "",colnames(clinic))
colnames(clinic) = gsub("[[:punct:]]","-", colnames(clinic))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[.]", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[:]", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub(" ", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[(]", "",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[)]", "",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[,]", "",x))
LexicClinic = lapply(LexicClinic,function(x) gsub("[[:punct:]]","-",x))
LexicClinic
View(PL)
PL
View(Clinic)
PatientLog()
PatientLog(Metadata)
View(Clinic)
`colnames(Clinic)
colnames(Clinic)
LexicClinic = addSeveralKeysToLexic(lexic = LexicClinic,vector = c("source_name_ch1"=c("source_name_ch1","source", "source_name"))
)
LexicClinic
i=8
pat <- toupper(colnames(clinic)[i])
pat
grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic
LexicClinic <- lapply(LexicClinic, toupper)
grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
pat
LexicClinic = PL
LexicClinic = addSeveralKeysToLexic(lexic = LexicClinic,vector = c("source_name_ch1"="source_name_ch1",
"source_name_ch1"="source",
"source_name_ch1"="source_name"))
LexicClinic <- lapply(LexicClinic, toupper)
grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic
pat
clinic
colnames(clinic) <-gsub("[.]", "_",colnames(clinic))
colnames(clinic) <-gsub(" ", "_",colnames(clinic))
colnames(clinic) <-gsub("[:]", "_",colnames(clinic))
colnames(clinic) <-gsub("[(]", "",colnames(clinic))
colnames(clinic) <-gsub("[)]", "",colnames(clinic))
colnames(clinic) <-gsub("[,]", "",colnames(clinic))
colnames(clinic) = gsub("[[:punct:]]","-", colnames(clinic))
pat <- toupper(colnames(clinic)[i])
pat
colnames(clinic) = gsub("[[:punct:]]","_", colnames(clinic))
pat <- toupper(colnames(clinic)[i])
pat
LexicClinic = lapply(LexicClinic,function(x) gsub("[[:punct:]]","_",x))
grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic
LexicClinic = addSeveralKeysToLexic(lexic = LexicClinic,vector = c("source_name_ch1"="source_name_ch1",
"source"="source",
"source_name"="source_name"))
LexicClinic
LexicClinic <- lapply(LexicClinic, toupper)
LexicClinic = lapply(LexicClinic,function(x) gsub("[[:punct:]]","_",x))
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
col
pat = "SOURCE"
grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
grep(paste("\\b",pat, "\\w",sep=""), LexicClinic)
LexicClinic[col]
LexicClinic = PL
LexicClinic = addSeveralKeysToLexic(lexic = LexicClinic,vector = c("source_name_ch1"="source_name_ch1",
"source"="source",
"source_name"="source_name"))
LexicClinic
LexicClinic <- lapply(LexicClinic, toupper)
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[.]", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[:]", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub(" ", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[(]", "",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[)]", "",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[,]", "",x))
LexicClinic = lapply(LexicClinic,function(x) gsub("[[:punct:]]","_",x))
grep(paste("\\b",pat, "\\w",sep=""), LexicClinic)
col <- grep(paste("\\b",pat, "\\w",sep=""), LexicClinic)
LexicClinic[col]
col <- grep(paste("\\b",pat, "\\w\\b",sep=""), LexicClinic)
col
col <- grep(paste("\\b",pat, "\\b\\w",sep=""), LexicClinic)
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
pat <- toupper(colnames(clinic)[i])
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic[col]
pat
pat = "SOURCE"
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic[col]
pat = "SOURCE_"
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic[col]
pat = "SOURCE_N"
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic[col]
pat = toupper("source_name")
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic[col]
LexicClinic
pat = toupper("source")
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic[col]
col <- grep(paste("\\b",pat, "\\w",sep=""), LexicClinic)
LexicClinic[col]
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic[col]
clinic = clinic[,1:3]
colnames(clinic) = c("PAL", "PAL_SNL", "ASAT")
LexicClinic = PL
LexicClinic = addSeveralKeysToLexic(lexic = LexicClinic,vector = c("PAL"="PAL",
"PAL_SNL"="PAL_SNL"))
LexicClinic <- lapply(LexicClinic, toupper)
clinic
pat <- toupper(colnames(clinic)[1])
pat
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic[col]
if(file.exists(paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"))){ file.remove(paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"))}
cat("Patients.CleanedProcess" , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
cat("Raw.Clinic colnames Origin,Clean.Called" , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
for (i in 1:ncol(clinic)) {
pat <- toupper(colnames(clinic)[i])
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
#      if(length(col)==0){ col <- grep(pat, LexicClinic)}
cat(paste(pat,",", names(LexicClinic)[col]) , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
if(!length(col)==0){}
}
colnames(clinic) = c("PAL", "PAL-SNL", "ASAT")
colnames(clinic) <-gsub("[.]", "_",colnames(clinic))
colnames(clinic) <-gsub(" ", "_",colnames(clinic))
colnames(clinic) <-gsub("[:]", "_",colnames(clinic))
colnames(clinic) <-gsub("[(]", "",colnames(clinic))
colnames(clinic) <-gsub("[)]", "",colnames(clinic))
colnames(clinic) <-gsub("[,]", "",colnames(clinic))
colnames(clinic) = gsub("[[:punct:]]","-", colnames(clinic))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[.]", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[:]", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub(" ", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[(]", "",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[)]", "",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[,]", "",x))
LexicClinic = lapply(LexicClinic,function(x) gsub("[[:punct:]]","-",x))
if(file.exists(paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"))){ file.remove(paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"))}
cat("Patients.CleanedProcess" , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
cat("Raw.Clinic colnames Origin,Clean.Called" , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
for (i in 1:ncol(clinic)) {
pat <- toupper(colnames(clinic)[i])
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
#      if(length(col)==0){ col <- grep(pat, LexicClinic)}
cat(paste(pat,",", names(LexicClinic)[col]) , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
if(!length(col)==0){}
}
PatientLog(Metadata)
colnames(clinic) = gsub("[[:punct:]]","_", colnames(clinic))
LexicClinic = lapply(LexicClinic,function(x) gsub("[[:punct:]]","_",x))
if(file.exists(paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"))){ file.remove(paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"))}
cat("Patients.CleanedProcess" , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
cat("Raw.Clinic colnames Origin,Clean.Called" , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
for (i in 1:ncol(clinic)) {
pat <- toupper(colnames(clinic)[i])
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
#      if(length(col)==0){ col <- grep(pat, LexicClinic)}
cat(paste(pat,",", names(LexicClinic)[col]) , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
if(!length(col)==0){}
}
PatientLog(Metadata)
col
pat <- toupper(colnames(clinic)[1])
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
LexicClinic[col]
match(paste("\\b",pat, "\\b",sep=""), LexicClinic)
?match
paste("\\b",pat, "\\b",sep="")
lapply(LexicClinic, match(paste("\\b",pat, "\\b",sep="")))
lapply(LexicClinic, function(x) match(paste("\\b",pat, "\\b",sep=""),x))
pat
match(paste("\\b",pat, "\\b",sep=""),LexicClinic$PAL)
match(LexicClinic$PAL, paste("\\b",pat, "\\b",sep=""))
lapply(LexicClinic, function(x) match(x, paste("\\b",pat, "\\b",sep="")))
lapply(LexicClinic, function(x) match(x, pat))
which(lapply(LexicClinic, function(x) match(x, pat))>0)
which(lapply(LexicClinic, function(x) match(x, pat)))
which(sum(lapply(LexicClinic, function(x) match(x, pat))))
sum(lapply(LexicClinic, function(x) match(x, pat))
)
lapply(LexicClinic, function(x) match(x, pat))
lapply(which(lapply(LexicClinic, function(x) match(x, pat))>0))
lapply(LexicClinic, function(x) match(x, pat)
)
lapply(lapply(LexicClinic, function(x) match(x, pat)), which(.)>0))
lapply(lapply(LexicClinic, function(x) match(x, pat)), which(.)>0)
lapply(lapply(LexicClinic, function(x) match(x, pat)), function(j)which(j)>0)
lapply(lapply(LexicClinic, function(x) match(x, pat)), function(j) which(j)==T)
lapply(lapply(LexicClinic, function(x) match(x, pat)), function(j) print(j))
lapply(LexicClinic, function(x) match(x, pat))
unlist(lapply(LexicClinic, function(x) match(x, pat)))
unlist(na.omit(lapply(LexicClinic, function(x) match(x, pat))))
na.omit(unlist(lapply(LexicClinic, function(x) match(x, pat))))
na.omit(lapply(LexicClinic, function(x) match(x, pat)))
pat
na.omit(lapply(LexicClinic, function(x) match(x, pat)))
lapply(LexicClinic, function(x) na.omit(match(x, pat)))
print(lapply(LexicClinic, function(x) na.omit(match(x, pat))))
lapply(length(lapply(LexicClinic, function(x) na.omit(match(x, pat))>0)))
lapply(length(lapply(LexicClinic, function(x) na.omit(match(x, pat)))), function(j) j>0)
lapply(length(lapply(LexicClinic, function(x) match(x, pat))), function(j) j>0)
lapply(lapply(LexicClinic, function(x) na.omit(match(x, pat))), function(j) j>0)
which(lapply(lapply(LexicClinic, function(x) na.omit(match(x, pat))), function(j) j>0)==T)
?Map
sapply(LexicClinic, function(x) length(na.omit(match(x, pat)))>0)
which(sapply(LexicClinic, function(x) length(na.omit(match(x, pat)))>0))
col = which(sapply(LexicClinic, function(x) length(na.omit(match(x, pat)))>0))
LexicClinic[col]
if(file.exists(paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"))){ file.remove(paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"))}
cat("Patients.CleanedProcess" , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
cat("Raw.Clinic colnames Origin,Clean.Called" , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
for (i in 1:ncol(clinic)) {
pat <- toupper(colnames(clinic)[i])
# col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
col = which(sapply(LexicClinic, function(x) length(na.omit(match(x, pat)))>0))
#      if(length(col)==0){ col <- grep(pat, LexicClinic)}
cat(paste(pat,",", names(LexicClinic)[col]) , file=paste0(Processpath(Metadata),"/Patients.CleanedProcess.txt"),sep="\n",append = T)
if(!length(col)==0){}
}
PatientLog(Metadata)
str_detect(pattern = paste0("\\b","P1","\\b"), "P1")
str_detect(pattern = paste0("\\b","P1","\\b"), "P11")
str_detect(pattern = paste0("\\b","P1","\\b"), "azrt-P1")
str_detect(pattern = paste0("\\b","P1","\\b"), "azrt_P1")
str_detect(pattern = paste0("\\w","P1","\\b"), "azrt-P1")
str_detect(pattern = paste0("\\w","P1","\\b"), "-P1")
str_detect(pattern = paste0("\\w","P1","\\b"), "P1")
str_detect(pattern = paste0("P1","\\b"), "-P1")
str_detect(pattern = paste0("P1","\\b"), "_P1")
summary(str_detect(pattern = paste0("\\b","P1","\\b"), c("-P1", "P1", "azdzd-P1")))["TRUE"][1]
str_detect(pattern = paste0("\\b","P1","\\b"), c("-P1", "P1", "azdzd-P1")
)
str_detect(pattern = paste0("\\w","P1","\\b"), c("-P1", "P1", "azdzd-P1"))
summary(str_detect(pattern = paste0("\\b","P1","\\b"), c("_P1", "P1", "azdzd_P1")))["TRUE"][1]
summary(str_detect(pattern = paste0("\\b","P1","\\b"),gsub("[[:punct:]]","_", c("-P1", "P1", "azdzd-P1"))))["TRUE"][1]
gsub("[[:punct:]]","_", c("-P1", "P1", "azdzd-P1"))
summary(str_detect(pattern = paste0("\\b","azdzd-P1","\\b"),gsub("[[:punct:]]","_", c("-P1", "P1", "azdzd-P1"))))["TRUE"][1]
str_detect(pattern = paste0("\\b","azdzd-P1","\\b"),gsub("[[:punct:]]","_", c("-P1", "P1", "azdzd-P1")))
summary(str_detect(pattern = gsub("[[:punct:]]","_",paste0("\\b","azdzd-P1","\\b")),gsub("[[:punct:]]","_", c("-P1", "P1", "azdzd-P1"))))["TRUE"][1]
gsub("[[:punct:]]","_", paste0("\\b","azdzd-P1","\\b"))
summary(str_detect(pattern =  paste0("\\b",gsub("[[:punct:]]","_","azdzd-P1"),"\\b"),gsub("[[:punct:]]","_", c("-P1", "P1", "azdzd-P1"))))["TRUE"][1]
