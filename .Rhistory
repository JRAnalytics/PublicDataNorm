legacy = F,workflow.type = "STAR - Counts"                                ,
data.norm = c("FKPM"))
Meta <- TCGAimportEpxression(Meta = NULL,
list.files.path = getwd(),
project =c("TCGA-PAAD"),
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = F,
sample.type = F, platform =  F, file.type = F,
legacy = F,workflow.type = "STAR - Counts"                                ,
data.norm = c("FKPM"))
Meta <- TCGAimportEpxression(Meta = NULL,
list.files.path = NULL,
project =c("TCGA-PAAD"),
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = F,
sample.type = F, platform =  F, file.type = F,
legacy = F,workflow.type = "STAR - Counts"                                ,
data.norm = c("FKPM"))
?move()
library(PublicDataNorm)
?file.move
Meta <- TCGAimportEpxression(Meta = NULL,
list.files.path = NULL,
project =c("TCGA-PAAD"),
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = F,
sample.type = F, platform =  F, file.type = F,
legacy = F,workflow.type = "STAR - Counts"                                ,
data.norm = c("FKPM"))
setwd("D:/")
Meta <- TCGAimportEpxression(Meta = NULL,
list.files.path = NULL,
project =c("TCGA-PAAD"),
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = F,
sample.type = F, platform =  F, file.type = F,
legacy = F,workflow.type = "STAR - Counts"                                ,
data.norm = c("FKPM"))
file.path(
query$results[[1]]$project, source,
gsub(" ","_",query$results[[1]]$data_category),
gsub(" ","_",query$results[[1]]$data_type),
gsub(" ","_",query$results[[1]]$file_id),
gsub(" ","_",query$results[[1]]$file_name)
)
query$results[[1]]$project
source <- ifelse(query$legacy,"legacy","harmonized")
file.path(
query$results[[1]]$project, source,
gsub(" ","_",query$results[[1]]$data_category),
gsub(" ","_",query$results[[1]]$data_type),
gsub(" ","_",query$results[[1]]$file_id),
gsub(" ","_",query$results[[1]]$file_name)
)
nchar("TCGA-PAAD/harmonized/Transcriptome_Profiling/Gene_Expression_Quantification/9acf5e5d-4397-49bd-9a24-bdda7d6b944e/ab02c8e2-e810-476a-a11c-ca95f7877b29.rna_seq.augmented_star_gene_counts.tsv")
nchar(file.paste("D:GDCdata","TCGA-PAAD/harmonized/Transcriptome_Profiling/Gene_Expression_Quantification/9acf5e5d-4397-49bd-9a24-bdda7d6b944e/ab02c8e2-e810-476a-a11c-ca95f7877b29.rna_seq.augmented_star_gene_counts.tsv"))
nchar(file.pasth("D:GDCdata","TCGA-PAAD/harmonized/Transcriptome_Profiling/Gene_Expression_Quantification/9acf5e5d-4397-49bd-9a24-bdda7d6b944e/ab02c8e2-e810-476a-a11c-ca95f7877b29.rna_seq.augmented_star_gene_counts.tsv"))
nchar(file.path("D:GDCdata","TCGA-PAAD/harmonized/Transcriptome_Profiling/Gene_Expression_Quantification/9acf5e5d-4397-49bd-9a24-bdda7d6b944e/ab02c8e2-e810-476a-a11c-ca95f7877b29.rna_seq.augmented_star_gene_counts.tsv"))
Meta <- TCGAimportEpxression(Meta = NULL,
list.files.path = "D:/",
project =c("TCGA-PAAD"),
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = F,
sample.type = F, platform =  F, file.type = F,
legacy = F,workflow.type = "STAR - Counts"                                ,
data.norm = c("FKPM"))
query <- GDCquery(
project = c("TCGA-PAAD") ,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
legacy = F,
experimental.strategy = F,
platform = F,
workflow.type ="STAR - Counts",
sample.type = F
)
GDCdownload(
query = query,
method = "api",
files.per.chunk = NULL)
query$results[[1]]=query$results[[1]][1,]
GDCdownload(
query = query,
method = "api",
files.per.chunk = NULL)
query <- GDCquery(
project = c("TCGA-PAAD") ,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
legacy = F,
experimental.strategy = F,
platform = F,
workflow.type ="STAR - Counts",
sample.type = F
)
query$results[[1]]=query$results[[1]][1:10,]
GDCdownload(
query = query,
method = "api",
files.per.chunk = 10)
GDCdownload(
query = query,
method = "api",
files.per.chunk = 10)
for (i in seq_along(nrow( query$results[[1]]))) {
query = query
query2$results[[1]]=query2$results[[1]][i,]
GDCdownload(
query = query2,
method = "api",
files.per.chunk = NULL)
}
for (i in seq_along(nrow( query$results[[1]]))) {
query2 = query
query2$results[[1]]=query2$results[[1]][i,]
GDCdownload(
query = query2,
method = "api",
files.per.chunk = NULL)
}
seq_along(nrow( query$results[[1]]))
nrow( query$results[[1]]))
nrow( query$results[[1]])
for (i in 1:nrow( query$results[[1]])) {
query2 = query
query2$results[[1]]=query2$results[[1]][i,]
GDCdownload(
query = query2,
method = "api",
files.per.chunk = NULL)
}
sessionInfo()
ses=sessionInfo()
ses
"Windows" %in%ses
str_detect("Windows", ses)
grep("Windows", ses)
ses[c(6,10)]
ses[c(6)]
ses$running
str_detect(ses$running, "Windows")
#' @import data.table
#' @import TCGAbiolinks
#' @import dplyr
#' @import stringr
#' @import DT
#' @return a data frame with build rna expression raw or normalized
#' @export
#'
#' @examples "none"
#'
TCGAimportEpxression <- function(Meta=NULL,
list.files.path= NULL,
alt.dir = NULL
project =NULL,
#' @import data.table
#' @import TCGAbiolinks
#' @import dplyr
#' @import stringr
#' @import DT
#' @return a data frame with build rna expression raw or normalized
#' @export
#'
#' @examples "none"
#'
TCGAimportEpxression <- function(Meta=NULL,
list.files.path= NULL,
alt.dir = NULL,
project =NULL,
data.category = NULL,
data.type = NULL,
experimental.strategy = NULL,
sample.type = NULL,
platform = NULL,
file.type = NULL,
legacy = F,
workflow.type = NULL,
data.norm = c("Raw", "TPM", "FKPM", "FKPM_UQ")){
if(list.files.path=NULL) { stop("A list.files.path is mandatory.")}
#' @import data.table
#' @import TCGAbiolinks
#' @import dplyr
#' @import stringr
#' @import DT
#' @return a data frame with build rna expression raw or normalized
#' @export
#'
#' @examples "none"
#'
TCGAimportEpxression <- function(Meta=NULL,
list.files.path= NULL,
alt.dir = NULL,
project =NULL,
data.category = NULL,
data.type = NULL,
experimental.strategy = NULL,
sample.type = NULL,
platform = NULL,
file.type = NULL,
legacy = F,
workflow.type = NULL,
data.norm = c("Raw", "TPM", "FKPM", "FKPM_UQ")){
if(list.files.path==NULL) { stop("A list.files.path is mandatory.")}
if(isServeOK()==FALSE){stop("Connection to server GDC failled")}
message("Querying", paste(project, "Meta"))
query <- GDCquery(
project = project ,
data.category = data.category,
data.type = data.type,
legacy = legacy,
experimental.strategy = experimental.strategy,
platform = platform,
file.type = file.type,
workflow.type =workflow.type,
sample.type = sample.type
)
pos <- 1
envir = as.environment(pos)
assign("query", query, envir = envir)
query.clinic <- GDCquery(project = project,
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = "BCR Biotab")
source <- ifelse(query$legacy,"legacy","harmonized")
files <- file.path(
query$results[[1]]$project, source,
gsub(" ","_",query$results[[1]]$data_category),
gsub(" ","_",query$results[[1]]$data_type),
gsub(" ","_",query$results[[1]]$file_id),
gsub(" ","_",query$results[[1]]$file_name)
)
if(!dir.exists(file.path("GDCdata", project, source, data.norm))){
message("No ", paste(project, "data found."))
message("Starting", paste(project, "loading. May take a few times"))
ses=sessionInfo()
if(str_detect(ses$running, "Windows")) {
setwd(alt.dir)
for (i in 1:nrow( query$results[[1]])) {
query2 = query
query2$results[[1]]=query2$results[[1]][i,]
GDCdownload(
query = query2,
method = "api",
files.per.chunk = NULL)
}
setwd(list.files.path$Project.RawData)
file.copy(paste0(alt.dir,"/GDCdata"),paste0(list.files.path$Project.RawData,"/GDCdata"))
file.remove(paste0(alt.dir,"/GDCdata"))
} else {
setwd(list.files.path$Project.RawData)
GDCdownload(
query = query,
method = "api",
files.per.chunk = 10)
}
}
if(dir.exists(file.path("GDCdata",project, source))){message(paste(project, "data found"))}
files <- file.path("GDCdata", files)
cases <- ifelse(grepl("TCGA|TARGET",query$results[[1]]$project %>% unlist()),query$results[[1]]$cases,query$results[[1]]$sample.submitter_id)
message("Building gene expression data")
data <- TCGA.build(
ask = data.norm,
legacy = legacy,
files = files,
cases = cases,
genome = ifelse(query$legacy,"hg19","hg38"),
experimental.strategy = unique(query$results[[1]]$experimental_strategy)
)
data <- data[-which(duplicated(unlist(lapply(str_split(rownames(data),"[|]" ), "[[", 1)))),]
rownames(data) <-  unlist(lapply(str_split(rownames(data),"[|]" ), "[[", 1))
if(!dir.exists(file.path("GDCdata",project,source,"Clinical"))){
message(paste(project, "clinical data  not found"))
message(paste("Downloading", project, "clinical data."))
GDCdownload(query.clinic)
}
if(is.null(Meta)){
if(dir.exists(file.path("GDCdata",project,source,"Clinical"))){
message(paste(project, "clinical data found"))
message(paste("Building",project, "clinical data"))}
clinic2 <- GDCprepare(query.clinic)
for (j in 1:length(clinic2)){
for (i in 1:ncol(clinic2[[j]])){
zz <- which(clinic2[[j]][,i]=="[Discrepancy]"| clinic2[[j]][,i]=="[Unknown]" |clinic2[[j]][,i]=="[Not Available]" |clinic2[[j]][,i]=="[Not Applicable]" | clinic2[[j]][,i]=="[Not Evaluated]")
clinic2[[j]][zz,i] <- NA
}
}
clinic3 <- as.data.frame(clinic2[[1]])
for (i in 2:length(clinic2)) {
dup <- c(colnames(clinic3),colnames(clinic2[[i]]))[which(duplicated(c(colnames(clinic3),colnames(clinic2[[i]]))))]
alone <- dup[! dup%in% c("bcr_patient_barcode","bcr_patient_uuid")]
if(length(alone)==0){ clinic3 <- full_join(clinic3,clinic2[[i]], by =c("bcr_patient_barcode","bcr_patient_uuid")) } else if(ncol(as.data.frame(clinic2[[i]])[,dup])==ncol(as.data.frame(clinic2[[i]]))){
clinic3 <- bind_rows(clinic3[,],clinic2[[i]][-c(1:2),])
} else if(length(alone)>0) { clinic3 <- full_join(clinic3,clinic2[[i]], by =c("bcr_patient_barcode","bcr_patient_uuid", alone))
} else { clinic3 <- full_join(clinic3[,!colnames(clinic3)%in%alone],clinic2[[i]][,!colnames(clinic2[[i]])%in%alone], by =c("bcr_patient_barcode","bcr_patient_uuid")) }
}
clinic3 <- clinic3[order(clinic3$bcr_patient_barcode),]
clinic3 <- clinic3[-c(1:2),]
clinic3_rolled <- clinic3 %>%
# create groups by name
group_by(bcr_patient_barcode) %>%
summarise(across(everything(), ~paste0((na.omit(.x)), collapse = ";")))
clinic3_rolled <- as.data.frame(clinic3_rolled)
rownames(clinic3_rolled) <- clinic3_rolled[,"bcr_patient_barcode"]
Meta <- list("DF" = data,
"clinic"= clinic3_rolled)
attributes(Meta)$Data.Type <- c("Expression.Matrix","Samples.Clinical.data")
attributes(Meta)$Raw.data <- c(ifelse(data.norm=="Raw", "Yes", "No"),"Yes")
names(Meta) <- c(paste0(data.norm,"-", project,"-matrix"), paste0("clinic_",project))
} else {
l <- length(Meta)
name <- names(Meta)
Meta[[l+1]] <- data
names(Meta) <- c(name,paste0(data.norm,"-", project,"-matrix"))
attributes(Meta)$Data.Type[[l+1]] <- c("Expression.Matrix")
attributes(Meta)$Raw.data[[l+1]] <- c(ifelse(data.norm=="Raw", "Yes", "No"))
}
return(Meta)
}
setwd("D:/")
setwd("D:/JR_analytics_Rwork/JRA_U1149_Nicolle/PublicDataNorm")
Meta <- TCGAimportEpxression(Meta = NULL,
list.files.path = list.files.path,
alt.dir = "D:/" ,
project =c("TCGA-PAAD"),
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = F,
sample.type = F, platform =  F, file.type = F,
legacy = F,workflow.type = "STAR - Counts"                                ,
data.norm = c("FKPM"))
#' @import data.table
#' @import TCGAbiolinks
#' @import dplyr
#' @import stringr
#' @import DT
#' @return a data frame with build rna expression raw or normalized
#' @export
#'
#' @examples "none"
#'
TCGAimportEpxression <- function(Meta=NULL,
list.files.path= NULL,
alt.dir = NULL,
project =NULL,
data.category = NULL,
data.type = NULL,
experimental.strategy = NULL,
sample.type = NULL,
platform = NULL,
file.type = NULL,
legacy = F,
workflow.type = NULL,
data.norm = c("Raw", "TPM", "FKPM", "FKPM_UQ")){
if(is.null(list.files.path)) { stop("A list.files.path is mandatory.")}
if(isServeOK()==FALSE){stop("Connection to server GDC failled")}
message("Querying", paste(project, "Meta"))
query <- GDCquery(
project = project ,
data.category = data.category,
data.type = data.type,
legacy = legacy,
experimental.strategy = experimental.strategy,
platform = platform,
file.type = file.type,
workflow.type =workflow.type,
sample.type = sample.type
)
pos <- 1
envir = as.environment(pos)
assign("query", query, envir = envir)
query.clinic <- GDCquery(project = project,
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = "BCR Biotab")
source <- ifelse(query$legacy,"legacy","harmonized")
files <- file.path(
query$results[[1]]$project, source,
gsub(" ","_",query$results[[1]]$data_category),
gsub(" ","_",query$results[[1]]$data_type),
gsub(" ","_",query$results[[1]]$file_id),
gsub(" ","_",query$results[[1]]$file_name)
)
if(!dir.exists(file.path("GDCdata", project, source, data.norm))){
message("No ", paste(project, "data found."))
message("Starting", paste(project, "loading. May take a few times"))
ses=sessionInfo()
if(str_detect(ses$running, "Windows")) {
setwd(alt.dir)
for (i in 1:nrow( query$results[[1]])) {
query2 = query
query2$results[[1]]=query2$results[[1]][i,]
GDCdownload(
query = query2,
method = "api",
files.per.chunk = NULL)
}
setwd(list.files.path$Project.RawData)
file.copy(paste0(alt.dir,"/GDCdata"),paste0(list.files.path$Project.RawData,"/GDCdata"))
file.remove(paste0(alt.dir,"/GDCdata"))
} else {
setwd(list.files.path$Project.RawData)
GDCdownload(
query = query,
method = "api",
files.per.chunk = 10)
}
}
if(dir.exists(file.path("GDCdata",project, source))){message(paste(project, "data found"))}
files <- file.path("GDCdata", files)
cases <- ifelse(grepl("TCGA|TARGET",query$results[[1]]$project %>% unlist()),query$results[[1]]$cases,query$results[[1]]$sample.submitter_id)
message("Building gene expression data")
data <- TCGA.build(
ask = data.norm,
legacy = legacy,
files = files,
cases = cases,
genome = ifelse(query$legacy,"hg19","hg38"),
experimental.strategy = unique(query$results[[1]]$experimental_strategy)
)
data <- data[-which(duplicated(unlist(lapply(str_split(rownames(data),"[|]" ), "[[", 1)))),]
rownames(data) <-  unlist(lapply(str_split(rownames(data),"[|]" ), "[[", 1))
if(!dir.exists(file.path("GDCdata",project,source,"Clinical"))){
message(paste(project, "clinical data  not found"))
message(paste("Downloading", project, "clinical data."))
GDCdownload(query.clinic)
}
if(is.null(Meta)){
if(dir.exists(file.path("GDCdata",project,source,"Clinical"))){
message(paste(project, "clinical data found"))
message(paste("Building",project, "clinical data"))}
clinic2 <- GDCprepare(query.clinic)
for (j in 1:length(clinic2)){
for (i in 1:ncol(clinic2[[j]])){
zz <- which(clinic2[[j]][,i]=="[Discrepancy]"| clinic2[[j]][,i]=="[Unknown]" |clinic2[[j]][,i]=="[Not Available]" |clinic2[[j]][,i]=="[Not Applicable]" | clinic2[[j]][,i]=="[Not Evaluated]")
clinic2[[j]][zz,i] <- NA
}
}
clinic3 <- as.data.frame(clinic2[[1]])
for (i in 2:length(clinic2)) {
dup <- c(colnames(clinic3),colnames(clinic2[[i]]))[which(duplicated(c(colnames(clinic3),colnames(clinic2[[i]]))))]
alone <- dup[! dup%in% c("bcr_patient_barcode","bcr_patient_uuid")]
if(length(alone)==0){ clinic3 <- full_join(clinic3,clinic2[[i]], by =c("bcr_patient_barcode","bcr_patient_uuid")) } else if(ncol(as.data.frame(clinic2[[i]])[,dup])==ncol(as.data.frame(clinic2[[i]]))){
clinic3 <- bind_rows(clinic3[,],clinic2[[i]][-c(1:2),])
} else if(length(alone)>0) { clinic3 <- full_join(clinic3,clinic2[[i]], by =c("bcr_patient_barcode","bcr_patient_uuid", alone))
} else { clinic3 <- full_join(clinic3[,!colnames(clinic3)%in%alone],clinic2[[i]][,!colnames(clinic2[[i]])%in%alone], by =c("bcr_patient_barcode","bcr_patient_uuid")) }
}
clinic3 <- clinic3[order(clinic3$bcr_patient_barcode),]
clinic3 <- clinic3[-c(1:2),]
clinic3_rolled <- clinic3 %>%
# create groups by name
group_by(bcr_patient_barcode) %>%
summarise(across(everything(), ~paste0((na.omit(.x)), collapse = ";")))
clinic3_rolled <- as.data.frame(clinic3_rolled)
rownames(clinic3_rolled) <- clinic3_rolled[,"bcr_patient_barcode"]
Meta <- list("DF" = data,
"clinic"= clinic3_rolled)
attributes(Meta)$Data.Type <- c("Expression.Matrix","Samples.Clinical.data")
attributes(Meta)$Raw.data <- c(ifelse(data.norm=="Raw", "Yes", "No"),"Yes")
names(Meta) <- c(paste0(data.norm,"-", project,"-matrix"), paste0("clinic_",project))
} else {
l <- length(Meta)
name <- names(Meta)
Meta[[l+1]] <- data
names(Meta) <- c(name,paste0(data.norm,"-", project,"-matrix"))
attributes(Meta)$Data.Type[[l+1]] <- c("Expression.Matrix")
attributes(Meta)$Raw.data[[l+1]] <- c(ifelse(data.norm=="Raw", "Yes", "No"))
}
return(Meta)
}
Meta <- TCGAimportEpxression(Meta = NULL,
list.files.path = list.files.path,
alt.dir = "D:/" ,
project =c("TCGA-PAAD"),
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = F,
sample.type = F, platform =  F, file.type = F,
legacy = F,workflow.type = "STAR - Counts"                                ,
data.norm = c("FKPM"))
paste0(list.files.path$Project.RawData,"/GDCdata")
paste0(alt.dir,"/GDCdata")
paste0("D:/","/GDCdata")
paste0("D:","/GDCdata")
file.copy(paste0("D:","/GDCdata"),paste0(list.files.path$Project.RawData,"/GDCdata"))
library(ff)
library(filesstrings)
BiocManager::install("filesstrings")
setwd("D:/JR_analytics_Rwork/JRA_U1149_Nicolle/PublicDataNorm")
install.packages(c("devtools", "usethis", "roxygen2"))
usethis::use_package("filesstrings")
dir.exists(paste0("D:","/GDCdata"))
list.files(paste0("D:","/GDCdata"))
filesstrings::file.move(paste0("D:","/GDCdata"),paste0(list.files.path$Project.RawData,"/GDCdata"))
filesstrings::file.move(paste0("D:/","GDCdata"),paste0(list.files.path$Project.RawData,"/GDCdata"))
?file.move
list.files(paste0("D:","/GDCdata"))
file.copy(paste0("D:","/GDCdata"),paste0(list.files.path$Project.RawData,"/GDCdata"))
?file.copy
file.copy(from = paste0("D:","/GDCdata"),to = paste0(list.files.path$Project.RawData,"/GDCdata"),
recursive = T )
paste0(list.files.path$Project.RawData,"/GDCdata")
list.files.path$Project.RawData
file.copy(from = paste0("D:","/GDCdata"),to = list.files.path$Project.RawData,
recursive = T )
file.copy(from = paste0("D:","/GDCdata"),to = list.files.path$Project.RawData,
recursive = T,overwrite = T )
warnings()
