CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
rm(CleaningClinic)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["Cells.Annotation"]]
SampleLog(Metadata)
PatientLog(Metadata)
PatientLog(Metadata)
test_check("PublicDataNorm")
devtools::test()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
usethis::use_testthat()
devtools::test()
?test_dir
devtools::test()
testthat::test_dir("E:/JR_analytics_Rwork/JRA_U1149_Nicolle/PublicDataNorm/tests/testthat")
testthat::test_dir("E:/JR_analytics_Rwork/JRA_U1149_Nicolle/PublicDataNorm/tests/")
PatientLog(Metadata)
SampleLog(Metadata)
CellLog(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
PatientLog(Metadata)
PatientLog(Metadata)
View(Metadata)
Metadata[["Patients.Clinic"]]
PL$SamplesID = NULL
PL$OSevent =  NULL
PL$Disease =  NULL
PL = addSeveralKeysToLexic(lexic = PL,vector = c("OSevent"="vital status_(1_dead,_0_alive):ch1",
"OSdelay"="survival time_(days):ch1",
"Stage"="ajcc stage:ch1",
"SamplesID" ="SamplesID",
"Disease" = "Disease"))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
PatientLog(Metadata)
PL$OSevent
View(PL)
Metadata[["Patients.Clinic"]]
PL$OSevent
colnames(Clinic)
Clinic$type
PatientLog(Metadata)
SampleLog(Metadata)
SL$SamplesID = NULL
SL$SpecimenOrgan =  NULL
colnames(Clinic)
SL$SamplesID = NULL
SL$SpecimenOrgan =  NULL
SL$SpecimenSampling =  NULL
SL = addSeveralKeysToLexic(lexic = SL,vector = c("PatientsID"="PatientID",
"SamplesID"="CellsID",
"SamplesOrigin"="tissue:ch1",
"SamplePathologicalState"="pathology:ch1",
"HadTreatment"="Treatment") )
colnames(Metadata$CellsAnnot)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
PatientLog(Metadata)
PL$OSevent
CellLog(Metadata)
CL$CellType = NULL
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType"="cell_type_specific" ))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
CellLog(Metadata)
PatientLog(Metadata)
SampleLog(Metadata)
View(Metadata$SamplesAnnot  )
View(Metadata$Patients.Clinic  )
View(Metadata$Cells.Annotation  )
View(Metadata$SamplesAnnot  )
PatientLog(Metadata)
SampleLog(Metadata)
CellLog(Metadata)
lapply(PL,function(x) gsub("[,]", "",x))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
PatientLog(Metadata)
SampleLog(Metadata)
CellLog(Metadata)
LexicClinic = PL
colnames(clinic) <-gsub("[.]", "_",colnames(clinic))
colnames(clinic) <-gsub(" ", "_",colnames(clinic))
colnames(clinic) <-gsub("[:]", "_",colnames(clinic))
colnames(clinic) <-gsub("[(]", "",colnames(clinic))
colnames(clinic) <-gsub("[)]", "",colnames(clinic))
colnames(clinic) <-gsub("[,]", "",colnames(clinic))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[.]", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[:]", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub(" ", "_",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[(]", "",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[)]", "",x))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[,]", "",x))
colnames(clinic)
i=48
pat <- toupper(colnames(clinic)[i])
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
pat
LexicClinic
LexicClinic <- lapply(LexicClinic, toupper)
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
ol
col
View(Metadata$Patients.Clinic  )
View(Metadata$Patients.Clinic  )
PatientLog(Metadata)
grep(pat, LexicClinic)
colnames(clinic)
i=3
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
col
pat
pat <- toupper(colnames(clinic)[i])
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
grep(pat, LexicClinic)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
PatientLog(Metadata)
SampleLog(Metadata)
CellLog(Metadata)
View(Metadata$SamplesAnnot  )
View(Metadata$Patients.Clinic  )
View(Metadata$Cells.Annotation  )
CheckMeta(Metadata)
gc()
Metadata = ExportTSV(Metadata)
gc()
Metadata = ExportTSV(Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10× Genomics Chromium Single Cell 5’" ,
Run.spec = NA,
First.Author = "Storrs E.P.",
DOI = "10.1038/s41698-023-00455-z",
Comment = NA,
User = "JR-Analytics")
gc()
project <- "Raghavan"
path <- "E:/DataBase"# Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path) # if all are TRUE ; next step can be done
Cell.annot = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"complete_MetaData_70170cells_scp.csv")))
Cell.annot = Cell.annot[-1,]
Cell.annot$NAME = gsub("_", "-", Cell.annot$NAME)
list.files(Rawpath(Metadata))
View(Cell.annot)
Cell.annot = subset(Cell.annot, donor_ID!="PANFR0580")
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromObject(
object = Cell.annot,
name = "CellsAnnot",
type = "Cells",Export = F,
setSamplesID.Column = "donor_ID",
setPatientID.Column = "donor_ID",
setCellsBarcode.Column ="NAME") %>%
AddClinicFromFile(
ClinicFile = "Data.clinic.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="PatientID",
setSamplesID.Column = "PatientID" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Biopsy_RawDGE_23042cells.csv",
Cell.file =NULL ,
Genes.file =NULL,
name = "Raw.count.Biopsy",
force.replace = F)%>%
AddExpressionMatrixSC(ExpressionMatrix = "Biopsy473_RawDGE_1370cells",
Cell.file =NULL ,
Genes.file =NULL,
name = "Raw.count.473",
force.replace = F)
View(Metadata)
Metadata[["Raw.count.473"]]
counts = as.data.frame(read.table(file.path(Rawpath(Metadata), "Biopsy_RawDGE_23042cells.csv")))
file.path(Rawpath(Metadata), "Biopsy_RawDGE_23042cells.csv")
counts = as.data.frame(read.csv(file.path(Rawpath(Metadata), "Biopsy_RawDGE_23042cells.csv")))
heads(counts[,1:5])
head(counts[,1:5])
Cell.annot$NAME
count2 = as.data.frame(read.table(file.path(Rawpath(Metadata), "Biopsy473_RawDGE_1370cells")))
count2 = as.data.frame(read.table(file.path(Rawpath(Metadata), "Biopsy473_RawDGE_1370cells.csv")))
head(count2[,1:5])
head(count2[,1:2])
count2 = as.data.frame(read.csv(file.path(Rawpath(Metadata), "Biopsy473_RawDGE_1370cells.csv")))
head(count2[,1:2])
head(count2[,1:5])
rownames(counts) = counts$X
counts$X = NULL
rownames(count2) = count2$X
head(count2[,1:5])
head(counts[,1:5])
count2$X = NULL
rownames(counts) %in%rownames(count2)
all(rownames(counts) %in%rownames(count2))
genes = intersect(rownames(counts),rownames(count2))
fullcount = cbind(counts[genes,], count2[genes,])
View(Cell.annot)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromObject(
object = Cell.annot,
name = "CellsAnnot",
type = "Cells",Export = F,
setSamplesID.Column = "donor_ID",
setPatientID.Column = "donor_ID",
setCellsBarcode.Column ="NAME") %>%
AddClinicFromFile(
ClinicFile = "Data.clinic.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="PatientID",
setSamplesID.Column = "PatientID" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = fullcount,
Cell.file =NULL ,
Genes.file =NULL,
name = "Raw.count.Biopsy",
force.replace = F)
CheckMeta(Metadata)
all(colnames(fullcount) %in% Cell.annot$NAME)
Cell.annot$NAME
colnames(fullcount)
(colnames(fullcount) %in% Cell.annot$NAME)
which(colnames(fullcount) %in% Cell.annot$NAME)
colnames(fullcount)
Cell.annot = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"complete_MetaData_70170cells_scp.csv")))
Cell.annot = Cell.annot[-1,]
Cell.annot$NAME = gsub("_", "-", Cell.annot$NAME)
Cell.annot = subset(Cell.annot, donor_ID!="PANFR0580") #PAN NET
Cell.annot$NAME
Cell.annot = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"complete_MetaData_70170cells_scp.csv")))
Cell.annot = Cell.annot[-1,]
which(colnames(fullcount) %in% Cell.annot$NAME)
all(colnames(fullcount) %in% Cell.annot$NAME)
Cell.annot = subset(Cell.annot, donor_ID!="PANFR0580") #PAN NET
genes = intersect(rownames(counts),rownames(count2)) ## pas le même nombre de gènes!
fullcount = cbind(counts[genes,], count2[genes,])
all(colnames(fullcount) %in% Cell.annot$NAME)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromObject(
object = Cell.annot,
name = "CellsAnnot",
type = "Cells",Export = F,
setSamplesID.Column = "donor_ID",
setPatientID.Column = "donor_ID",
setCellsBarcode.Column ="NAME") %>%
AddClinicFromFile(
ClinicFile = "Data.clinic.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="PatientID",
setSamplesID.Column = "PatientID" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = fullcount,
Cell.file =NULL ,
Genes.file =NULL,
name = "Raw.count.Biopsy",
force.replace = F)
CheckMeta(Metadata)
View(Metadata)
Metadata[["CellsAnnot"]]
CheckMeta(Metadata)
View(Cell.annot)
View(Metadata)
Metadata[["Clinic"]]
View(Metadata)
Metadata[["Raw.count.Biopsy"]]
CheckMeta(Metadata)
gc()
head(Metadata[["Raw.count"]][1:5])
head(Metadata[["Raw.count.Biopsy"]][1:5])
CheckMeta(Metadata)
summary(Metadata$CellsAnnot$NAME %in% colnames(Metadata$Raw.count.Biopsy))
Metadata$CellsAnnot$NAME
colnames(Metadata$Raw.count.Biopsy)
Cell.annot$NAME = gsub("_","-", Cell.annot$NAME)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromObject(
object = Cell.annot,
name = "CellsAnnot",
type = "Cells",Export = F,
setSamplesID.Column = "donor_ID",
setPatientID.Column = "donor_ID",
setCellsBarcode.Column ="NAME") %>%
AddClinicFromFile(
ClinicFile = "Data.clinic.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="PatientID",
setSamplesID.Column = "PatientID" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = fullcount,
Cell.file =NULL ,
Genes.file =NULL,
name = "Raw.count.Biopsy",
force.replace = F)
CheckMeta(Metadata)
gc()
head(Metadata[["Raw.count.Biopsy"]][1:5])
attributes(Metadata)
all(colnames(fullcount) %in% Cell.annot$NAME)
summary(Metadata$CellsAnnot$NAME %in% colnames(Metadata$Raw.count.Biopsy))
summary(colnames(fullcount) %in% Cell.annot$NAME)
summary(colnames(Metadata$Raw.count.Biopsy%in% Metadata$CellsAnnot$NAME ))
summary(colnames(Metadata$Raw.count.Biopsy) %in% Metadata$CellsAnnot$NAME )
#Step 5 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
SL = addSeveralKeysToLexic(lexic = SL,vector = c("SamplesID"= "biosample_id",
"SamplePathologicalState" = "Histology",
"SpecimenOrgan" = "Site.of.biopsy",
"Treatment.Before.Biopsy" = "Metastatic.treatments.prior.to.biopsy",
"Treatment.of.primary.disease" = "Treatment.of.primary.disease") )
CL = addSeveralKeysToLexic(lexic = CL,vector = c("Cell_type" = "cluster",
"malignant" = "Malgignant",
"SamplesID"= "biosample_id",
"SamplePathologicalState" = "disease__ontology_label",
"Cell.type" = "Coarse_Cell_Annotations",
"SpecimenOrgan" = "organ__ontology_label",
"PatientSampling" = "sample.type",
"CellsID" = "NAME") )
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Sex"="Gender",
"SamplesID" = "donor_ID",
"TreatmentInfo"="treatment:ch1",
"PatientSampling" ="Site.of.biopsy",
"OSevent" ="Patient.status",
"OSdelay" = "Survival.time.from.initial.diagnosis.days") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
PatientLog(Metadata)
SampleLog(Metadata)
CellLog(Metadata)
View(Metadata$SamplesAnnot)
View(Metadata$Patients.Clinic)
View(Metadata$Cells.Annotation)
View(Cell.annot)
CL$SpecimenOrgan
CL$SpecimenOrgan = CL$SpecimenOrgan("SpecimenOrgan" ,"organ__ontology_label")
CL$SpecimenOrgan = c("SpecimenOrgan" ,"organ__ontology_label")
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
CheckMeta(Metadata)
Metadata$Cells.Annotation$Treatment.at.primary.disease = Metadata$Clinic[Metadata$Cells.Annotation$PatientsID,"Treatment.of.primary.disease"]
Metadata$Cells.Annotation$Treatment.before.biopsy = Metadata$Clinic[Metadata$Cells.Annotation$PatientsID,"Metastatic.treatments.prior.to.biopsy"]
gc()
View(Metadata)
Metadata$Raw.count.Biopsy = Metadata$Raw.count.Biopsy[,rownames(Metadata$Cells.Annotation),]
View(Metadata)
CheckMeta(Metadata)
View(Metadata$SamplesAnnot)
View(Metadata$Cells.Annotation)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "Seq-Well array" ,
Run.spec = NA,
First.Author = "Raghavan S.",
DOI = "10.1016/j.cell.2021.11.017",
Comment = NA,
User = "JR-Analytics")
Metadata = ExportTSV(Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "Seq-Well array" ,
Run.spec = NA,
First.Author = "Raghavan S.",
DOI = "10.1016/j.cell.2021.11.017",
Comment = NA,
User = "JR-Analytics")
Metadata = ExportTSV(Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "Seq-Well array" ,
Run.spec = NA,
First.Author = "Raghavan S.",
DOI = "10.1016/j.cell.2021.11.017",
Comment = NA,
User = "JR-Analytics")
j.cell.2021.11.017",
Comment = NA,
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "Seq-Well array" ,
Run.spec = NA,
First.Author = "Raghavan S.",
DOI = "10.1016/j.cell.2021.11.017",
Comment = NA,
User = "JR-Analytics")
PatientLog(Metadata) # If dulicated
