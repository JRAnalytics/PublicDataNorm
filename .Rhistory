}# NBgeneAnnot
attributes(Metadata)$Version = paste0("V", Vnumber)
return(Metadata)
}#function
#' ExportCSV Export Metadata inside object into ".csv" files
#'
#' @param Metadata a Metadata  data files
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
ExportCSV <- function (Metadata){
if(is.null(Metadata)){stop("Need a Metadata List file")}
if(!is.list(Metadata)){stop("Need a Metadata List file")}
list.files.path = attributes(Metadata)$File.path
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
project = attributes(Metadata)$Project
count <- 0
object <- length(Metadata)
name <- names(Metadata)
LF <- list.files(list.files.path$Project.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Project.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filepath <- rownames(df)
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
version <- na.omit(str_extract(filename,"V[0-9]*"))
Vnumber <- max(na.omit(as.numeric(str_extract(version,"([0-9]+).*$"))))+1
} else {
Vnumber = 1
attributes(Metadata)$Version <- "V1"}
message(paste0("Exporting Version V", Vnumber))
message(paste("Exporting", object, "objects"))
NB.raw.clinic <- which(c(attributes(Metadata)$Data.Type=="Clinic" | attributes(Metadata)$Data.Type=="SamplesAnnot" ) & attributes(Metadata)$Export=="No" )
if(length(NB.raw.clinic)>0) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[NB.raw.clinic],"data will not be exported"))
}
if(exists("PatientLexic", mode= "any" )) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","PatientLexic"))
if (file.exists(paste0(list.files.path$Project.Processes,"/",project,".PatientLexic.txt"))) {
#Delete file if it exists
file.remove(paste0(list.files.path$Project.Processes,"/",project,".PatientLexic.txt"))
}
PatientLexic <- lapply(PatientLexic, function(x) {c(x[1],x)}) #Mandatory to duplicated listName in the listed values.
lapply(PatientLexic, write, paste0(list.files.path$Project.Processes,"/",project,".PatientLexic.txt"), append=TRUE, ncolumns=1000 ) #write a ".txt" file without listNames
}
if(exists("SamplesLexic", mode= "any" )) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","SamplesLexic"))
if (file.exists(paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"))) {
#Delete file if it exists
file.remove(paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"))
}
SamplesLexic <- lapply(SamplesLexic, function(x) {c(x[1],x)}) #Mandatory to duplicated listName in the listed values.
lapply(SamplesLexic, write, paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"), append=TRUE, ncolumns=1000 ) #write a ".txt" file without listNames
}
NB.Samples.Patients.pheno <-   which(c(attributes(Metadata)$Data.Type=="Clinic" |attributes(Metadata)$Data.Type=="SamplesAnnot" ) & attributes(Metadata)$Export=="Yes" )
if(length(NB.Samples.Patients.pheno)!=0) {
for (j in NB.Samples.Patients.pheno) {
z <-  Metadata[[j]]
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j]))
if(Vnumber==1){
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V1",".csv")
write.table(z,row.names = F ,file = filename, sep = ",")
} else {
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V", Vnumber,".csv")
write.table(z,row.names = F ,file = filename, sep = ",")
}
} #for J in NBsamples
} # if( length(NB.Samples.Patients.pheno)!=0)
NB.Count <-  which(attributes(Metadata)$Data.Type=="Count")
if(length(NB.Count)!=0) {
for (j in NB.Count) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j], "file"))
if(attributes(Metadata)$Omics.type!="Single.Cell"){ z <- try(cbind("GeneSymbol" = rownames(Metadata[[j]]), Metadata[[j]]),silent = T)}
if(attributes(Metadata)$Omics.type=="Single.Cell"){ z = Metadata[[j]]}
if(Vnumber==1){
if(attributes(Metadata)$Omics.type!="Single.Cell"){
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j], ".V1.csv")
write.table(z,row.names = F ,file = filename, sep = ",")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V1.mtx")
if(!class(Metadata[[j]])[1]=="dgTMatrix"){Metadata[[j]] = as.matrix(Metadata[[j]]) }
writeMM(Matrix(Metadata[[j]], sparse = T),file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
gc()
if(!"geneAnnot"%in%attributes(Metadata)$Data.Type){
message("No geneAnnot file found. Exporting geneAnnot from count matrix.")
filename.genes <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".GenesAnnot.V1.csv")
write.table(rownames(Metadata[[j]]),row.names = F ,col.names = F ,file = filename.genes, sep = ",")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","geneAnnot", "file"))}
if(!"CellsAnnot"%in%attributes(Metadata)$Data.Type){
message("No CellsAnnot file found. Exporting CellsAnnot from count matrix.")
filename.cells <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".CellsAnnot", "V1.csv")
write.table(data.frame("Cells"= colnames(Metadata[[j]])),row.names = F ,file = filename.cells, sep = ",")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))} else {
kk = which(attributes(Metadata)$Data.Type%in%"CellsAnnot"& attributes(Metadata)$Export=="Yes")
if(length(kk)>0){
filename.cells <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[kk], ".V1.csv")
write.table(Metadata[[kk]],row.names = F ,file = filename.cells, sep = ",")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))}
}}} else { #Vnumber ==1
if(attributes(Metadata)$Omics.type!="Single.Cell") {
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V",Vnumber, ".csv")
write.table(z,row.names = F ,file = filename, sep = ",")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)}
if(attributes(Metadata)$Omics.type=="Single.Cell") {
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V",Vnumber,".mtx")
if(!class(Metadata[[j]])[1]=="dgTMatrix"){Metadata[[j]] = as.matrix(Metadata[[j]]) }
writeMM(Matrix(Metadata[[j]], sparse = T),file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
gc()
if(!"geneAnnot"%in%attributes(Metadata)$Data.Type){
message("No geneAnnot file found. Exporting geneAnnot from count matrix.")
filename.genes <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".GenesAnnot",".V",Vnumber,".csv")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","geneAnnot", "file"))
write.table(rownames(Metadata[[j]]),row.names = F ,col.names = F ,file = filename.genes, sep = ",")
}
if(!"CellsAnnot"%in%attributes(Metadata)$Data.Type){
message("No CellsAnnot file found. Exporting CellsAnnot from count matrix.")
filename.cells <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".CellsAnnot",".V",Vnumber,".csv")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))
write.table(data.frame("Cells"= colnames(Metadata[[j]])),row.names = F ,file = filename.cells, sep = ",")} else {
filename.cells <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".CellsAnnot",".V",Vnumber,".csv")
kk = which(attributes(Metadata)$Data.Type%in%"CellsAnnot"& attributes(Metadata)$Export=="Yes")
if(length(kk)>0){
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))
write.table(Metadata[[kk]],row.names = F ,file = filename.cells, sep = ",")}
}
}
} #Vnumber !=1
}#j in NB.count
} # if(length(NB.Count)!=0)
NB.geneAnnot<-  which(attributes(Metadata)$Data.Type=="geneAnnot")
if(length(NB.geneAnnot)!=0) {
for (j in NB.geneAnnot) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j], "file"))
z <- Metadata[[j]]
if(Vnumber==1){
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V1.csv")
write.table(z,row.names = F ,file = filename, sep = ",")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else { #Vnumber==1
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V",Vnumber,".csv")
write.table(z,row.names = F ,file = filename, sep = ",")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} #Vnumber !=1
} #j in NGgeneannot
}# NBgeneAnnot
attributes(Metadata)$Version = paste0("V", Vnumber)
return(Metadata)
}#function
Meta = ExportCSV(Metadata = Meta)
AddLocalDatabase(Meta = Meta,
Normalization.Method = NA,
Technology = "Microarray",
Platform = "Agilent" ,
Run.spec = "whole-genome 4x44K DNA",
First.Author = "Moffit R.A.",
DOI = "10.1038/ng.3398.",
Comment = "17 Cell lines, Unpublished patients clincial data.",
User = "JR-Analytics")
View(Meta)
library(PublicDataNorm)
project <- "Moffit"
path <- "E:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
Meta = CreateDataset(project, path)
list.files(attributes(Meta)$File.path$Project.RawData)
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = "Moffit.SamplesAnnotation.txt.gz",
name = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "geo_accession",
Export = F)
attributes(Meta)
CheckMeta(Meta)
head(Meta$sampleannot)
SL = CreateLexic(Meta, type = "SamplesLexic")
PL = CreateLexic(Meta, type = "PatientsLexic")
PL = addSeveralKeysToLexic(lexic = PL,c("PatientsID" ="title",
"Tumoral.Subtypes" ="tumor_subtype_0na_1classical_2basal_ch2",
"Stromal.Subtypes" = "stroma_subtype_0na_1low_2normal_3activated_ch2",
"PatientSampling" ="tissue_ch2",
"SamplesInfo" ="tissue_type_ch2"))
SL = addSeveralKeysToLexic(lexic = SL,c("Tumoral.Subtypes" ="tumor_subtype_0na_1classical_2basal_ch2",
"Stromal.Subtypes" = "stroma_subtype_0na_1low_2normal_3activated_ch2",
"SamplesInfo" = "cell_line/tissue_ch2",
"SamplePathologicalState" = "tissue_type_ch2"))
View(Meta)
Meta <- AddExpressionMatrixRNAseq(Metadata = Meta,
ExpressionMatrix ="Moffit.Normalized.expression.txt.gz" ,
name = "Normalized.expression")
head(Meta$Normalized.expression[,1:5])
rownames(Meta$Normalized.expression) <- Meta$Normalized.expression$V1
Meta$Normalized.expression$V1 <- NULL
head(Meta$Normalized.expression[,1:5])
SL = CreateLexic(Meta, type = "SamplesLexic")
PL = CreateLexic(Meta, type = "PatientsLexic")
PL = addSeveralKeysToLexic(lexic = PL,c("PatientsID" ="title",
"Tumoral.Subtypes" ="tumor_subtype_0na_1classical_2basal_ch2",
"Stromal.Subtypes" = "stroma_subtype_0na_1low_2normal_3activated_ch2",
"PatientSampling" ="tissue_ch2",
"SamplesInfo" ="tissue_type_ch2"))
SL = addSeveralKeysToLexic(lexic = SL,c("Tumoral.Subtypes" ="tumor_subtype_0na_1classical_2basal_ch2",
"Stromal.Subtypes" = "stroma_subtype_0na_1low_2normal_3activated_ch2",
"SamplesInfo" = "cell_line/tissue_ch2",
"SamplePathologicalState" = "tissue_type_ch2"))
Meta = CleaningClinic(Metadata = Meta,
type = "Samples",
Lexic = SL,
ClinicToClean ="sampleannot",
exportname = "SamplesAnnot")
Meta = CleaningClinic(Metadata = Meta,
type = "Patients",
Lexic = PL,
ClinicToClean ="sampleannot",
CleanFromOtherType = T,
exportname = "PatientsClinic.full" ,
keep.all.column = T)
str(Meta$PatientsClinic.full)
Meta$PatientsClinic.full$OSdelay <- as.numeric(Meta$PatientsClinic.full$OSdelay)
Meta$PatientsClinic.full$OSevent <- as.numeric(Meta$PatientsClinic.full$OSevent)
attributes(Meta)
Meta$sampleannot$SampleType <- ifelse(is.na(Meta$sampleannot$SamplePathologicalState),yes = "Cell.lines",no = "Tissue")
Meta$sampleannot$SamplePathologicalState
Meta$sampleannot
Meta$sampleannot$SamplePathologicalState
View(Meta)
Meta[["SamplesAnnot"]]
ifelse(is.na(Meta$SamplesAnnot$SamplePathologicalState),yes = "Cell.lines",no = "Tissue")
Meta$SamplesAnnot$SampleType <- ifelse(is.na(Meta$SamplesAnnot$SamplePathologicalState),yes = "Cell.lines",no = "Tissue")
Meta$PatientsClinic.full$Tumoral.Subtypes <- ifelse(Meta$PatientsClinic.full$Tumoral.Subtypes==2, yes = "Basal",
ifelse(Meta$PatientsClinic.full$Tumoral.Subtypes==1,"Classic", NA))
Meta$SamplesAnnot$Tumoral.Subtypes <- ifelse(Meta$SamplesAnnot$Tumoral.Subtypes==2, yes = "Basal",
ifelse(Meta$SamplesAnnot$Tumoral.Subtypes==1,"Classic", NA))
Meta$SamplesAnnot$Stromal.Subtypes <- ifelse(Meta$SamplesAnnot$Stromal.Subtypes==2, yes = "Normal",
ifelse(Meta$SamplesAnnot$Stromal.Subtypes==1,"Low",
ifelse(Meta$SamplesAnnot$Stromal.Subtypes==3,"Activated", NA)))
Meta$PatientsClinic.full$Stromal.Subtypes <- ifelse(Meta$PatientsClinic.full$Stromal.Subtypes==2, yes = "Normal",
ifelse(Meta$PatientsClinic.full$Stromal.Subtypes==1,"Low",
ifelse(Meta$PatientsClinic.full$Stromal.Subtypes==3,"Activated", NA)))
Meta$SamplesAnnot$Organ.Of.Prelevement <- Meta$SamplesAnnot$TissueSampling
Meta$PatientsClinic.full$Organ.Of.Prelevement <- Meta$PatientsClinic.full$PatientSampling
Meta$PatientsClinic.full$PatientSampling <- ifelse(is.na(Meta$PatientsClinic.full$SamplesInfo),yes = "Cell.lines",no = "Tissue")
Meta$PatientsClinic.full <- subset(Meta$PatientsClinic.full,PatientSampling!="Cell.lines" )
nrow(Meta$PatientsClinic.full)
nrow(subset(Meta$PatientsClinic.full,SamplesInfo=="Primary" ))==145 # 145 in papers
nrow(subset(Meta$PatientsClinic.full,SamplesInfo=="Metastasis" ))==61 # 61 in papers
nrow(subset(Meta$PatientsClinic.full,SamplesInfo=="Normal" ))==88+46 # 88 normal distant and 46 normal pancreas  in papers
nrow(subset(Meta$PatientsClinic.full,SamplesInfo=="Primary" ))==145 # 145 in papers
summary(subset(Meta$PatientsClinic.full,SamplesInfo=="Primary" )$SamplesID%in%colnames(Meta$Normalized.expression.matrix))
# Step 4 : Check Metadata Raw build
CheckMeta(Meta)
attributes(meta)$File.path
attributes(Meta)$File.path
#' @param gtf.files  gtf file to load
#' @param force.replace set as F. T : replace an already object with the same name
#' @import stringr
#' @import AnnotationDbi
#' @import data.table
#' @return return a Metadata list of dataframe with geneAnntotation
#' @export
#'
#' @examples "none"
#'
AddgeneAnnotGtf <- function(Metadata ,gtf.files, force.replace=F){
Metadata <- Metadata
path = attributes(Metadata)$File.path$References
if(!is.null(Metadata$geneAnnotation)){
message("geneAnnotation already loaded.")
if(force.replace==F){stop("Set force.replace==T to replace sub-object.")}
message("Replacing sub-object.")}
if(!str_detect(gtf.files, ".gtf")){stop("A '.gtf' file is needed for AddgeneAnnot function.\n If an R object already exist with annotations, use AddObjetToMeta() function.") }
if(!file.exists(paste0(path,"/",gtf.files))){ stop("File does not exist in directories.")}
geneAnnot <- suppressMessages({.geneAnnotation(gtf.files = paste0(path,"/",gtf.files) ,saverds = F)})
if(is.null(geneAnnot)){stop("Error in geneAnnotation function : is.null(geneAnnot==TRUE")}
if(is.null(rownames(geneAnnot))){stop("Error in geneAnnotation function : no rownames in geneAnnot. But is not Null")}
zz <- which(attributes(Metadata)$Data.Type=="Count")[1]
if(length(zz)!=1){ stop("attributes(Metadata)$Data.Type=='Count' & attributes(Metadata)$Export=='Yes',line 27, more than 1 object are detected.")}
###rajouté ecrasement
gene <- rownames(Metadata[[zz]])
geneAnnot = as.matrix(geneAnnot)
if(!summary(gene%in%geneAnnot)["TRUE"]>0){
stop("No genes ('rownames(Metadata[[1]])') found in object.")} else {
sel = which(geneAnnot %in% gene)
col = which(apply(geneAnnot, 2, function(x) which(x %in% geneAnnot[sel[1]]))>0)[1]}
if(all(str_detect(gene, "ENSG000"))){
message("Data matrice row names are ENSEMBL gene names.")
if(length(gene)!=length(unique(gene))) { Metadata[[zz]] <- Metadata[[zz]][-which(duplicated(gene)),] }
if(length(gene)==length(unique(gene))){ message("No rownames of raw matrix are duplicated")}
gene <- unlist(lapply(str_split(rownames(Metadata[[zz]]),"[.]"),"[[",1))
rownames(Metadata[[zz]]) <- gene
geneAnnot = as.data.frame(geneAnnot)
geneAnnot <- geneAnnot[geneAnnot[,col]%in%gene,]
if(nrow(geneAnnot)==0){ stop("if(nrow(geneAnnot)==0), line 43, N rows of geneAnnotation is 0")}
geneAnnot <- geneAnnot[order(geneAnnot$GeneSymbol,decreasing = F),]
if(is.null(Metadata$geneAnnotation)){ attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"No") }
Metadata$geneAnnotation <- geneAnnot
} else {
gene <- unlist(lapply(str_split(rownames(Metadata[[zz]]),"[|]"),"[[",1))
print(message("Data matrice row names are already in gene names."))
geneAnnot = as.data.frame(geneAnnot)
geneAnnot <- geneAnnot[geneAnnot[,col]%in%gene,]
geneAnnot <- geneAnnot[order(geneAnnot$GeneSymbol,decreasing = F),]
if(is.null(Metadata$geneAnnotation)){ attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") }
Metadata$geneAnnotation <- geneAnnot
}
return(Metadata)
}
Meta <- AddgeneAnnot(Meta = Meta ,
gtf.files = "Homo_sapiens.GRCh37.75.gtf.gz")
Meta <- AddgeneAnnotGtf(Meta = Meta ,
gtf.files = "Homo_sapiens.GRCh37.75.gtf.gz")
View(Meta)
Meta[["geneAnnotation"]]
View(Meta)
Meta[["Normalized.expression"]]
#' @param force.replace set as F. T : replace an already object with the same name
#' @param Filter.Genes default F, if T, keep only retrieved genes in Count matrix
#' @import stringr
#' @import AnnotationDbi
#' @import data.table
#' @return return a Metadata list of dataframe with geneAnntotation
#' @export
#'
#' @examples "none"
#'
AddgeneAnnotFromObject <- function(Metadata=NULL ,object=NULL, geneAnnotIDcolumn= NULL, Filter.Genes= F, force.replace=F){
if(is.null(Metadata)){stop("A Metadata object is needed.")}
if(!is.null(Metadata$geneAnnotation)){
message("geneAnnotation already loaded.")
if(force.replace==F){stop("Set force.replace==T to subset object.")}
message("Subsetting object.")}
if(is.null(object)){stop("Error in geneAnnotation function : no object found")}
if(!all(class(object)%in%c("data.frame","matrix","array"))){stop("Object is not of a data.frame or a matrix class object.")}
if(is.null(geneAnnotIDcolumn)){stop("geneAnnotIDcolumn must be refered to a colname from object to add.")}
zz <- which(attributes(Metadata)$Data.Type=="Count")[1]
if(length(zz)==0){stop("No Count found in Metadata object")}
gene <-  rownames(Metadata[[zz]])
if(length(gene)==length(unique(gene))){ message("No rownames of Count matrix are duplicated")}
gene <- gene[which(gene%in%object[,geneAnnotIDcolumn])]
colT <- geneAnnotIDcolumn
if(all(str_detect(gene, "ENSG")==T)) { message("Data matrice row names are as ENSEMBL.")
}
if(all(str_detect(gene, "ILMN_")==T)) { message("Data matrice row names are as Illumina Bead Array Probes")
}
if(is.numeric(na.omit(as.numeric(gene))) & length(na.omit(as.numeric(gene)))!=0)  { message("Data matrice row names are as ENTREZ gene id")
}
if(all(str_detect(gene, "_at")==T)) { message("Data matrice row names are as Illumina Microarray Probes")
}
if("ACTB"%in%gene){ message("Data matrice row names are in GeneSymbols.")
}
message("Found genes :")
print(summary(gene%in%as.matrix(object)))
message("Selecting retrieved genes from Count matrix")
if(Filter.Genes==T){
object <- object[object[,colT]%in%gene,]
if(length(object[,colT])!=length(unique(object[,colT]))){object <- object[!duplicated(object[,colT]),]} }
if(is.null(Metadata$geneAnnotation)){ attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") } else {
}
Metadata$geneAnnotation = object
return(Metadata)
}
gtf =  Meta$geneAnnotation
View(gtf)
colnames(gtf)[11]
Meta = AddgeneAnnotFromObject(Meta, gtf, geneAnnotIDcolumn ="GeneSymbol" ,Filter.Genes = T,force.replace = T)
View(Meta)
#' @param force.replace set as F. T : replace an already object with the same name
#' @param Filter.Genes default F, if T, keep only retrieved genes in Count matrix
#' @import stringr
#' @import AnnotationDbi
#' @import data.table
#' @return return a Metadata list of dataframe with geneAnntotation
#' @export
#'
#' @examples "none"
#'
AddgeneAnnotFromObject <- function(Metadata=NULL ,object=NULL, geneAnnotIDcolumn= NULL, Filter.Genes= F, force.replace=F){
if(is.null(Metadata)){stop("A Metadata object is needed.")}
if(!is.null(Metadata$geneAnnotation)){
message("geneAnnotation already loaded.")
if(force.replace==F){stop("Set force.replace==T to subset object.")}
message("Subsetting object.")}
if(is.null(object)){stop("Error in geneAnnotation function : no object found")}
if(!all(class(object)%in%c("data.frame","matrix","array"))){stop("Object is not of a data.frame or a matrix class object.")}
if(is.null(geneAnnotIDcolumn)){stop("geneAnnotIDcolumn must be refered to a colname from object to add.")}
zz <- which(attributes(Metadata)$Data.Type=="Count")[1]
if(length(zz)==0){stop("No Count found in Metadata object")}
gene <-  rownames(Metadata[[zz]])
if(length(gene)==length(unique(gene))){ message("No rownames of Count matrix are duplicated")}
gene <-
colT <- geneAnnotIDcolumn
if(all(str_detect(gene, "ENSG")==T)) { message("Data matrice row names are as ENSEMBL.")
}
if(all(str_detect(gene, "ILMN_")==T)) { message("Data matrice row names are as Illumina Bead Array Probes")
}
if(is.numeric(na.omit(as.numeric(gene))) & length(na.omit(as.numeric(gene)))!=0)  { message("Data matrice row names are as ENTREZ gene id")
}
if(all(str_detect(gene, "_at")==T)) { message("Data matrice row names are as Illumina Microarray Probes")
}
if("ACTB"%in%gene){ message("Data matrice row names are in GeneSymbols.")
}
message("Found genes :")
print(summary(gene%in%object[,colT]))
message("Selecting retrieved genes from Count matrix")
if(Filter.Genes==T){
object <- object[object[,colT]%in%gene,]
if(length(object[,colT])!=length(unique(object[,colT]))){object <- object[!duplicated(object[,colT]),]} }
if(is.null(Metadata$geneAnnotation)){ attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") } else {
}
Metadata$geneAnnotation = object
return(Metadata)
}
Meta = AddgeneAnnotFromObject(Meta, gtf, geneAnnotIDcolumn ="GeneSymbol" ,Filter.Genes = T,force.replace = T)
object = gtf
colT = 11
gene = rownames(Meta$Normalized.expression)
print(summary(gene%in%object[,colT]))
object[object[,colT]%in%gene,]
#' @param force.replace set as F. T : replace an already object with the same name
#' @param Filter.Genes default F, if T, keep only retrieved genes in Count matrix
#' @import stringr
#' @import AnnotationDbi
#' @import data.table
#' @return return a Metadata list of dataframe with geneAnntotation
#' @export
#'
#' @examples "none"
#'
AddgeneAnnotFromObject <- function(Metadata=NULL ,object=NULL, geneAnnotIDcolumn= NULL, Filter.Genes= F, force.replace=F){
if(is.null(Metadata)){stop("A Metadata object is needed.")}
if(!is.null(Metadata$geneAnnotation)){
message("geneAnnotation already loaded.")
if(force.replace==F){stop("Set force.replace==T to subset object.")}
message("Subsetting object.")}
if(is.null(object)){stop("Error in geneAnnotation function : no object found")}
if(!all(class(object)%in%c("data.frame","matrix","array"))){stop("Object is not of a data.frame or a matrix class object.")}
if(is.null(geneAnnotIDcolumn)){stop("geneAnnotIDcolumn must be refered to a colname from object to add.")}
zz <- which(attributes(Metadata)$Data.Type=="Count")[1]
if(length(zz)==0){stop("No Count found in Metadata object")}
gene <-  rownames(Metadata[[zz]])
if(length(gene)==length(unique(gene))){ message("No rownames of Count matrix are duplicated")}
colT <- geneAnnotIDcolumn
if(all(str_detect(gene, "ENSG")==T)) { message("Data matrice row names are as ENSEMBL.")
}
if(all(str_detect(gene, "ILMN_")==T)) { message("Data matrice row names are as Illumina Bead Array Probes")
}
if(is.numeric(na.omit(as.numeric(gene))) & length(na.omit(as.numeric(gene)))!=0)  { message("Data matrice row names are as ENTREZ gene id")
}
if(all(str_detect(gene, "_at")==T)) { message("Data matrice row names are as Illumina Microarray Probes")
}
if("ACTB"%in%gene){ message("Data matrice row names are in GeneSymbols.")
}
message("Found genes :")
print(summary(gene%in%object[,colT]))
message("Selecting retrieved genes from Count matrix")
if(Filter.Genes==T){
object <- object[object[,colT]%in%gene,]
if(length(object[,colT])!=length(unique(object[,colT]))){object <- object[!duplicated(object[,colT]),]} }
if(is.null(Metadata$geneAnnotation)){ attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") } else {
}
Metadata$geneAnnotation = object
return(Metadata)
}
Meta = AddgeneAnnotFromObject(Meta, gtf, geneAnnotIDcolumn ="GeneSymbol" ,Filter.Genes = T,force.replace = T)
library(PublicDataNorm)
project = attributes(Metadata)$Project
library(PublicDataNorm)
library(PublicDataNorm)
?writeMM
library(PublicDataNorm)
