type = "Cells",
ClinicToClean = names(Metadata)[CellAnnotRaw],
exportname = "Cells.Annotation.Full",
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =keep.all.column ))
cellID = Metadata$Cells.Annotation$CellsBarcode
if(length(pp)>0){
clinic = Metadata[[pp]]
for (z in clinic$patientsID){
Metadata$Cells.Annotation.Full$patientsID=ifelse(str_detect(pattern = paste0(z), cellID),z,Metadata$Cells.Annotation.Full$patientsID)
}
}
}
} # CellAnnotRaw present
ClinicRaw = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="No")
SampleAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" &attributes(Metadata)$Cleaned=="No")
# Patient annot absent
if(length(ClinicRaw)<1 & !is.null(PatientsLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = PatientsExportname,
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- suppressWarnings(CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = paste0(PatientsExportname,".Full"),
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =T ))}
}# Patient annot absent
# Patient annot Present
if(length(ClinicRaw)>0 & !is.null(PatientsLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = PatientsExportname,
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- suppressWarnings(CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = paste0(PatientsExportname,".Full"),
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =T ))
}
}# Patient annot Present
# Sample annot Present
if(length(SampleAnnotRaw)>0 & !is.null(SamplesLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = SamplesExportname,
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- suppressWarnings(CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = paste0(SamplesExportname,".Full"),
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =T ))
}
}    # Sample annot Present
# Sample annot Absent
if(length(SampleAnnotRaw)<1 & !is.null(SamplesLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = SamplesExportname,
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- suppressWarnings(CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = paste0(SamplesExportname,".Full"),
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =T ))
}
}    # Sample annot Absent
}
return(Metadata)
}
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Raw.Patientannot" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = "Raw.sampleannot",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = F, #set T, will filter with samples found in expression matrices.
keep.all.column = T, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["Patients.Clinic.fullCol"]]
Metadata <- suppressWarnings(CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = paste0(SamplesExportname,".Full"),
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =T ))
}
#' @param FilterSP default F, if T, keep only retrieved samples in SamplesAnnotation file
#' @param force.replace set as F. T : replace an already object with the same name
#' @param keep.all.column default F, if T, copy all column from clinic.
#' @param FilterGenes Filter for genes found in geneannotation file and rownames of matrices.
#' @importFrom utils menu
#' @import dplyr
#' @return a meataobject
#' @export
#'
#' @examples "non"
CleaningData = function(Metadata = NULL,
PatientsLexic = NULL,
PatientsAnnotToClean = NULL,
PatientsExportname = NULL,
SamplesLexic = NULL,
SamplesAnnotToClean = NULL,
CellsLexic = NULL,
SamplesExportname = NULL,
FilterSP =  F,
force.replace = F,
keep.all.column = F,
FilterGenes = F){
if(is.null(Metadata)){stop("No Metadata found.")}
if(is.null(PatientsLexic)&is.null(SamplesLexic)){stop("A PatientsLexic or SamplesLexic is mandatory for data cleaning")}
if(!is.null(SamplesLexic) & attributes(Metadata)$Omics.type!="Single.Cell"){
if(is.null(SamplesAnnotToClean)){stop("SamplesAnnotToClean has to be specify.")}
SamAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned == "No")
ClinicRaw = which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned == "No")
if(length(SamAnnotRaw)!=0){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = SamplesAnnotToClean,
exportname = SamplesExportname,
FilterSamples =  FilterSP,
force.replace = force.replace )
if(keep.all.column==T){
Metadata <-suppressMessages( CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = SamplesAnnotToClean,
exportname = paste0(SamplesExportname,".fullCol"),
FilterSamples =  FilterSP,
force.replace = force.replace,
keep.all.column =keep.all.column ))}
}
}
if(!all(is.null(PatientsExportname),is.null(PatientsLexic),is.null(PatientsAnnotToClean))){
if(is.null(PatientsAnnotToClean) & attributes(Metadata)$Omics.type!="Single.Cell"   ){
RP = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="No")
message("Creating a Patient clinical table from Samples annotation")
if(length(RP)>0){stop("Raw Patients clinical data found in Metaobject, Specify PatientsAnnotToClean")}
if(is.null(PatientsExportname)){stop("Specify PatientsExportname.")}
if(is.null(PatientsLexic)){stop("PatientsLexic is mandatory.")}
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = SamplesAnnotToClean,
exportname = PatientsExportname,
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace,
CleanFromOtherType = T)
if(keep.all.column==T){
Metadata <- suppressMessages(CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = SamplesAnnotToClean,
exportname = paste0(PatientsExportname,".fullCol"),
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace,
CleanFromOtherType = T,
keep.all.column = T))
}
} else{
if(!is.null(PatientsAnnotToClean) & attributes(Metadata)$Omics.type!="Single.Cell"   ){
if(is.null(PatientsExportname)){stop("Specify PatientsExportname.")}
if(is.null(PatientsLexic)){stop("PatientsLexic is mandatory.")}
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = PatientsAnnotToClean,
exportname = PatientsExportname,
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace,
CleanFromOtherType = T)
if(keep.all.column==T){
Metadata <- suppressMessages(CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = PatientsAnnotToClean,
exportname = paste0(PatientsExportname,".fullCol"),
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace,
CleanFromOtherType = T,
keep.all.column = T))
}
}
}
}
if(FilterGenes == T){
g =  which(attributes(Metadata)$Data.Type=="geneAnnot")[1]
m <- which(attributes(Metadata)$Data.Type=="Count")
object = Metadata[[g]]
if(!is.na(g)){geneAnnot = as.matrix(Metadata[[g]])}
for (i in m){
gene = rownames(Metadata[[i]])
sel = which(geneAnnot %in% gene)
colT = which(apply(geneAnnot, 2, function(x) which(x %in% geneAnnot[sel[1]]))>0)[1]
object <- object[object[,colT]%in%gene,]
if(length(object[,colT])!=length(unique(object[,colT]))){object <- object[!duplicated(object[,colT]),]}
Metadata[[i]] = Metadata[[i]][object[,colT],]
attributes(Metadata)$Cleaned[i] = "Yes"
}
Metadata[[g]] = object
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
if(is.null(CellsLexic)){stop("No CellsLexic was specified.")}
if("CellsAnnot"%in%attributes(Metadata)$Data.Type & !is.null(CellsLexic)){
CellAnnotRaw = which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned == "No")
pp = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="Yes")
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = CellsLexic,
type = "Cells",
ClinicToClean = names(Metadata)[CellAnnotRaw],
exportname = "Cells.Annotation",
FilterPatients =F,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
cellID = Metadata$Cells.Annotation$CellsBarcode
if(length(pp)>0){
clinic = Metadata[[pp]]
for (z in clinic$patientsID){
Metadata$Cells.Annotation$patientsID=ifelse(str_detect(pattern = paste0(z), cellID),z,Metadata$Cells.Annotation$patientsID)
}
}
if(keep.all.column==T){
Metadata <- suppressMessages(CleaningClinic(Metadata = Metadata,
Lexic = CellsLexic,
type = "Cells",
ClinicToClean = names(Metadata)[CellAnnotRaw],
exportname = "Cells.Annotation.Full",
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =keep.all.column ))
cellID = Metadata$Cells.Annotation$CellsBarcode
if(length(pp)>0){
clinic = Metadata[[pp]]
for (z in clinic$patientsID){
Metadata$Cells.Annotation.Full$patientsID=ifelse(str_detect(pattern = paste0(z), cellID),z,Metadata$Cells.Annotation.Full$patientsID)
}
}
}
} # CellAnnotRaw present
ClinicRaw = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="No")
SampleAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" &attributes(Metadata)$Cleaned=="No")
# Patient annot absent
if(length(ClinicRaw)<1 & !is.null(PatientsLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = PatientsExportname,
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- suppressMessages(CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = paste0(PatientsExportname,".Full"),
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =T ))}
}# Patient annot absent
# Patient annot Present
if(length(ClinicRaw)>0 & !is.null(PatientsLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = PatientsExportname,
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- suppressMessages(CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = paste0(PatientsExportname,".Full"),
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =T ))
}
}# Patient annot Present
# Sample annot Present
if(length(SampleAnnotRaw)>0 & !is.null(SamplesLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = SamplesExportname,
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- suppressMessages(CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = paste0(SamplesExportname,".Full"),
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =T ))
}
}    # Sample annot Present
# Sample annot Absent
if(length(SampleAnnotRaw)<1 & !is.null(SamplesLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = SamplesExportname,
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- suppressMessages(CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = paste0(SamplesExportname,".Full"),
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =T ))
}
}    # Sample annot Absent
}
return(Metadata)
}
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Raw.Patientannot" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = "Raw.sampleannot",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = F, #set T, will filter with samples found in expression matrices.
keep.all.column = T, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
View(Metadata)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "PANC.RNAseq"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path) %>%
AddClinicFromFile(ClinicFile = "PANC.Clinic.all.csv",
name = "Raw.Patientannot",
type = "Patients",
setSamplesID.Column = "id_cit",
setPatientID.Column = "N.anapath", #set PatientsID colnames with  setID.Column values
Export = F)  %>%
AddClinicFromFile(ClinicFile = "PANC.samplesAnnotation.csv",
name = "Raw.sampleannot",   # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "id_cit",
setPatientID.Column = "id_patient", #set SamplesID colnames with  setID.Column values
Export = F)
#Checking attributes of MetaObject
attributes(Metadata)
#Step 2 : Checking Metaobject structures and Missing Samples in every subobjects
CheckMeta(Metadata)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = "PANC.rawcount.csv",
name = "raw.count") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix ="PANC.NormCount.csv",
name = "norm.count") %>%
AddgeneAnnotFromObject(geneAnnotIDcolumn =1 ,
Filter.Genes = F,
object = {as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"PANC.probesAnnot.csv")))})
colnames(Metadata$geneAnnotation) = c("EnsembleID"  ,     "chr",       "start"   ,    "end"    ,   "strand"  ,     "geneID" ,  "geneSymbol")
Metadata$geneAnnotation$GeneID=NULL
# Checking MetaObject again!!!
CheckMeta(Metadata)
### Some cleaning by hand.
Metadata$raw.count$V1 <- NULL  # First colonne, geneSymbols drop off.
Metadata$norm.count$V1 <- NULL # First colonne, geneSymbols drop off.
Metadata$Raw.sampleannot[Metadata$Raw.sampleannot=="#NA"] = NA
Metadata$Raw.sampleannot[Metadata$Raw.sampleannot=="NA"] = NA
Metadata$Raw.sampleannot[Metadata$Raw.sampleannot=="xx"] = NA
Metadata$Raw.Patientannot[Metadata$Raw.Patientannot=="#NA"] = NA
Metadata$Raw.Patientannot[Metadata$Raw.Patientannot=="NA"] = NA
Metadata$Raw.Patientannot[Metadata$Raw.Patientannot=="xx"] = NA
Metadata$Raw.Patientannot = Metadata$Raw.Patientannot[!is.na(Metadata$Raw.Patientannot$patientsID),]
Metadata$Raw.sampleannot= as.data.frame(Metadata$Raw.sampleannot)
rownames(Metadata$Raw.sampleannot) = Metadata$Raw.sampleannot$samplesID
Metadata$Raw.Patientannot= as.data.frame(Metadata$Raw.Patientannot)
rownames(Metadata$Raw.Patientannot) = Metadata$Raw.Patientannot$patientsID
# Step 4 Changing Numbers in character string as numeric
str(Metadata$Raw.sampleannot)
Metadata$Raw.sampleannot = Charac.to.Num(Metadata$Raw.sampleannot)
str(Metadata$Raw.Patientannot)
Metadata$Raw.Patientannot = Charac.to.Num(Metadata$Raw.Patientannot)
#Step 5 Creating Lexic for cleaining
SL = CreateLexic(Metadata = Metadata, type = "SamplesLexic")
PL = CreateLexic(Metadata = Metadata, type = "PatientsLexic")
SL = addSeveralKeysToLexic(lexic = SL, vector = c("patientsID"="id_patient",
"patientSampling"="surgery_type",
"samplePathologicalState"="tumor_type",
"hadTreatment"="treatment_adjuvant"))
PL = addSeveralKeysToLexic(lexic = PL, vector = c("mainRNAID"="id_cit",
"age"="Age.a.la.chir",
"OSdelay"="SG",
"OSevent"="DC",
"pT"="T",
"pN"="N",
"pM"="M",
"pTNM"="stade.TNM",
"differenciation"="Differenc"))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Raw.Patientannot" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = "Raw.sampleannot",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = F, #set T, will filter with samples found in expression matrices.
keep.all.column = T, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
attributes(Metadata)
CheckMeta(Metadata)
View(Metadata)
Metadata[["SamplesAnnot"]]
Metadata[["Raw.Patientannot"]]
SampleLog()
SampleLog(Metadata)
