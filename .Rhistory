head(Metadata$raw.count[,1:5])
Metadata$raw.count$GeneSymbol <- NULL  # First colonne, geneSymbols drop off.
###create LexicCLinic and SamplesOrPAtient objects to add or replace colnames of clinical data.
Metadata <- AddClinicFromFile(Metadata = Metadata,
name = "Raw.clinic",
ClinicFile = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"),
Export = F,
type = "Patients",
mergeBy = "PatientID",
ExpressionMatrixIdColumn = "CUMC_SampleID",join = "full_join",)
attributes(Metadata)
Sl=   CreateLexic(Dataset =Metadata ,type = "SamplesLexic")
Pl=   CreateLexic(Dataset =Metadata ,type = "PatientsLexic")
Sl=   AddKeyLexic(lexic = Sl, key = "SamplesID",value ="CUMC_SampleID" )
Pl=   AddKeyLexic(lexic = Pl, key = "SamplesID",value ="CUMC_SampleID" )
Sl=   AddKeyLexic(lexic = Sl, key = "SampleType",value ="Compartment" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Samples",
ClinicToClean = "Raw.clinic",
CleanFromOtherType = T,
Lexic = Sl,
exportname = "SamplesAnnotation" )
Metadata <- CleaningClinic(Metadata = Metadata,
type = "Patients",
ClinicToClean = "Raw.clinic",
Lexic = Pl,
exportname = "Clinical.data" )
View(Metadata)
Metadata[["Clinical.data"]]
Metadata <- AddgeneAnnotGtf(Metadata = Metadata,
gtf.files = "gencode.v33.annotation.gtf.gz")
#Step 7 : Export data as ".csv"
Metadata = ExportCSV(Metadata = Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
Comment = NA,
User = "JR-Analytics")
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "Moffit"
path <- "E:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
Meta = CreateDataset(project, path)
attributes(Meta)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "PANC.RNAseq"
path <- "E:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = "PANC.rawcount.csv",
name = "Panc_rawcount")
names(Metadata)
attributes(Metadata) # attributes(Metadata)$Data.type has the data type information for multipe functions
Metadata <- CreateDataset(project,path)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = "PANC.rawcount.csv",
name = "raw.count")
head(Metadata$raw.count [,1:5])
Metadata$raw.count$V1 <- NULL  # First colonne, geneSymbols drop off.
Metadata <-AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix ="PANC.NormCount.csv",
name = "norm.counbt")
Metadata <- CreateDataset(project,path)
# if all are TRUE ; next step can be done
# Step 2 : Save Script in project.R file in the parent/02Processes/project folder
###### By hand unfortunately for the first time
# Step 3.1 : Build Metadata object from 01RawData folder.
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = "PANC.rawcount.csv",
name = "raw.count")
names(Metadata)
attributes(Metadata) # attributes(Metadata)$Data.type has the data type information for multipe functions
head(Metadata$raw.count [,1:5])
Metadata$raw.count$V1 <- NULL  # First colonne, geneSymbols drop off.
Metadata <-AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix ="PANC.NormCount.csv",
name = "norm.count")
head(Metadata$norm.count[,1:5])
Metadata$norm.count$V1 <- NULL
all(colnames(Metadata$norm.count)%in%colnames(Metadata$raw.count ))
attributes(Metadata)
CheckMeta(Metadata)
Metadata = AddClinicFromFile(Metadata = Metadata,
ClinicFile =c( "PANC.samplesAnnotation.csv", "PANC.Clinic.all.csv") ,
name = "Sampleannot",
type = "Samples",
mergeBy = "id_cit", #mandatory if name.local.file >1 string
join = "full_join" #mandatory if name.local.file >1 string
)
Metadata = AddClinicFromFile(Metadata = Metadata,
ClinicFile =c( "PANC.samplesAnnotation.csv", "PANC.Clinic.all.csv") ,
name = "Sampleannot",
type = "Samples",
ExpressionMatrixIdColumn ="id_cit",
mergeBy = "id_cit", #mandatory if name.local.file >1 string
join = "full_join" #mandatory if name.local.file >1 string
)
View(Metadata)
Metadata[["Sampleannot"]]
Metadata$Sampleannot[Metadata$Sampleannot=="#NA"] = NA
Metadata$Sampleannot[Metadata$Sampleannot=="NA"] = NA
Metadata$Sampleannot[Metadata$Sampleannot=="xx"] = NA
Metadata$Sampleannot[!is.na(Metadata$Sampleannot$id_cit),]
Metadata$Sampleannot = Metadata$Sampleannot[!is.na(Metadata$Sampleannot$id_cit),]
Metadata$Sampleannot= as.data.frame(Metadata$Sampleannot)
rownames(Metadata$Sampleannot) = Metadata$Sampleannot$id_cit
Metadata$Sampleannot = Metadata$Sampleannot[Metadata$Sampleannot$id_cit%in%colnames(Metadata$norm.count),]
View(Metadata)
Metadata = AddClinicFromFile(Metadata = Metadata,
ClinicFile =c( "PANC.samplesAnnotation.csv", "PANC.Clinic.all.csv") ,
name = "Sampleannot",force.replace = T,
type = "Samples",
ExpressionMatrixIdColumn ="id_cit",
mergeBy = "id_cit", #mandatory if name.local.file >1 string
join = "full_join" #mandatory if name.local.file >1 string
)
Metadata$Sampleannot[Metadata$Sampleannot=="#NA"] = NA
Metadata$Sampleannot[Metadata$Sampleannot=="NA"] = NA
Metadata$Sampleannot[Metadata$Sampleannot=="xx"] = NA
Metadata$Sampleannot = Metadata$Sampleannot[!is.na(Metadata$Sampleannot$id_cit),]
Metadata$Sampleannot= as.data.frame(Metadata$Sampleannot)
rownames(Metadata$Sampleannot) = Metadata$Sampleannot$id_cit
View(Metadata)
CheckMeta(Metadata)
str(Metadata$Sampleannot)
Metadata$Sampleannot = Charac.to.Num(Metadata$Sampleannot)
str(Metadata$Sampleannot)
?CreateLexic
SL = CreateLexic(Dataset = Metadata, type = "SamplesLexic")
PL = CreateLexic(Dataset = Metadata, type = "PatientsLexic")
colnames(Metadata$Pheno)[colnames(Metadata$Pheno)=="Samples"]="Samples_cit"
colnames(Metadata$Sampleannot)[colnames(Metadata$Sampleannot)=="Samples"]
colnames(Metadata$Sampleannot)[colnames(Metadata$Sampleannot)=="Samples"]="Samples_cit"
SL$SamplesID
SL = addSeveralKeysToLexic(lexic = SL, vector = c("SamplesID" ="id_cit",
"PatientsID"="id_patient",
"PatientSampling"="surgery_type",
"SamplePathologicalState"="tumor_type",
"HadTreatment"="treatment_adjuvant"))
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SL,
type = "Samples",
ClinicToClean = "Sampleannot",
exportname ="SamplesAnnot.cleaned",
FilterSamples =  T)
View(Metadata)
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SL,
type = "Samples",
ClinicToClean = "Sampleannot",
exportname ="SamplesAnnot.cleaned.full",
FilterSamples =  T,
keep.all.column = T
)
CheckCleaning(Metadata)
CheckMeta(Metadata)
attributes(Metadata)
colnames(Metadata$Clinic)
PL$Sex
PL
PL = addSeveralKeysToLexic(lexic = PL, vector = c("SamplesID" ="id_cit",
"PatientsID"="id_patient",
"MainRNAID"="id_cit",
"Age"="Age.a.la.chir",
"OSdelay"="dfs.time",
"OSevent"="os.event",
"Disease"="tumor_type",
"pT"="grade_t",
"pN"="grade_n",
"pM"="grade_m",
"pTNM"="tnm",
"Differenciation"="differenciation"))
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PL,
type = "Patients",
ClinicToClean = "Sampleannot",
CleanFromOtherType = T,
exportname ="PatientsClinic.cleaned.full",
FilterPatients =   T
)
View(Metadata)
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PL,
type = "Patients",
ClinicToClean = "Sampleannot",
CleanFromOtherType = T,
exportname ="PatientsClinic.cleaned",
FilterPatients =   T
)
trace_back()
traceback()
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PL,
type = "Patients",
ClinicToClean = "Sampleannot",
CleanFromOtherType = T,
exportname ="PatientsClinic.cleaned.full",
FilterPatients =   T
)
traceback()
!all(str_detect(names(Metadata),"PatientsClinic.cleaned.full")==F)
str_detect(names(Metadata),"PatientsClinic.cleaned.full")
str_detect(names(Metadata),"PatientsClinic.cleaned")
str_detect(names(Metadata),"PatientsClinic")
"PatientsClinic"%in%names(Metadata)
library(PublicDataNorm)
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PL,
type = "Patients",
ClinicToClean = "Sampleannot",
CleanFromOtherType = T,
exportname ="PatientsClinic.cleaned.full",
FilterPatients =   T
)
Metadata <- CleaningClinic(Metadata = Metadata,force.replace = T,
Lexic = PL,
type = "Patients",
ClinicToClean = "Sampleannot",
CleanFromOtherType = T,
exportname ="PatientsClinic.cleaned.full",
FilterPatients =   T
)
Metadata <- CleaningClinic(Metadata = Metadata,force.replace = F,
Lexic = PL,
type = "Patients",
ClinicToClean = "Sampleannot",
CleanFromOtherType = T,
exportname ="PatientsClinic.cleaned",
FilterPatients =   T
)
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PL,
type = "Patients",
ClinicToClean = "Sampleannot",
CleanFromOtherType = T,
exportname ="PatientsClinic.cleaned.full",
FilterPatients =   T,keep.all.column = T)
Metadata <- CleaningClinic(Metadata = Metadata,force.replace = T,
Lexic = PL,
type = "Patients",
ClinicToClean = "Sampleannot",
CleanFromOtherType = T,
exportname ="PatientsClinic.cleaned.full",
FilterPatients =   T,keep.all.column = T)
CheckCleaning(Metadata)
attributes(Metadata)
CheckMeta(Metadata)
Metadata <- AddgeneAnnotFromObject(Metadata = Metadata,geneAnnotIDcolumn =1 ,
Filter.Genes = T,
object = {as.data.frame(data.table::fread(file.path(list.files.path$Project.RawData,"PANC.probesAnnot.csv")))})
Metadata <- AddgeneAnnotFromObject(Metadata = Metadata,geneAnnotIDcolumn =1 ,
Filter.Genes = T,
object = {as.data.frame(data.table::fread(file.path(path,"01RawData",project,"PANC.probesAnnot.csv")))})
View(Metadata)
Metadata[["geneAnnotation"]]
colnames(Metadata$geneAnnotation) = c("EnsembleID"  ,     "chr",       "start"   ,    "end"    ,   "strand"  ,     "GeneID" ,  "GeneName")
attributes(Metadata)
CheckMeta(Metadata) # can display number of common genesSymbols frome Raw or Normalized matrix in geneAnnotation file
#Step 7 : Export data as ".csv"
Metadata = ExportCSV(Metadata = Metadata)
attributes(Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = NA,
Run.spec = NA,
First.Author = "Puleo F.",
DOI = "10.1053/j.gastro.2018.08.033",
Comment = "Pour methodo et plateforme RNAseq, demander à Remy je pense",
User = "JR-Analytics")
attributes(Metadata)$File.path
#' Rawpath Export Metadata inside object into ".csv" files
#'
#' @param Metadata a Metadata  data files
#' @return a path to 01RawData project file
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
Rawpath <- function (Metadata){
return(attributes(Metadata)$File.path$Project.RawData)
}
Rawpath(Metadata)
process.eventspath(Metadata)
#' Processpath Export Metadata inside object into ".csv" files
#'
#' @param Metadata a Metadata  data files
#' @return a path to 02process project file
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
Processpath <- function (Metadata){
return(attributes(Metadata)$File.path$Project.Processes)
}
#' Refpath Export Metadata inside object into ".csv" files
#'
#' @param Metadata a Metadata  data files
#' @return a path to 03Referecence project file
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
Refpath <- function (Metadata){
return(file.path(attributes(Metadata)$File.path$References,attributes(Metadata)$Project))
}
#' Verifiedpath Export Metadata inside object into ".csv" files
#'
#' @param Metadata a Metadata  data files
#' @return a path to 04VerifiedDataSet project file
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
Verifiedpath <- function (Metadata){
return(attributes(Metadata)$File.path$Project.VerifiedDataset)
}
Processpath(Metadata)
Refpath(Metadata)
list.files(Refpath(Metadata))
list.files(Processpath(Metadata))
#' Refpath Export Metadata inside object into ".csv" files
#'
#' @param Metadata a Metadata  data files
#' @return a path to 03Referecence project file
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
Refpath <- function (Metadata){
return(attributes(Metadata)$File.path$References)
}
list.files(Refpath(Metadata))
list.files(Verifiedpath(Metadata))
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "PANC.RNAseq"
path <- "E:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = "PANC.rawcount.csv",
name = "raw.count")
obj = Metadata$raw.count
Metadata <- CreateDataset(project,path)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = obj,
name = "raw.count")
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = obj,
name = "norm")
#' @param ExpressionMatrix an object or a character string
#' @param force.replace set as F. T : replace an already object with the same name
#' @importFrom utils menu
#' @importFrom Matrix readMM
#' @import data.table
#' @import rlang
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddExpressionMatrixRNAseq <- function(Metadata=NULL,
name = NULL,
ExpressionMatrix = NULL,
force.replace=F ) {
Omics.type = "RNAseq"
path = attributes(Metadata)$File.path$Project.RawData
if(is.null(Metadata)){stop("A Metadata object must be created with CreateDataset() function. See ?CreateDataset.")}
if(is.null(ExpressionMatrix)){stop("ExpressionMatrix must be a character string or an environement object.")}
if(is.null(name)){ stop("A Metadata object must be created with CreateDataset() function. See ?CreateDataset.") }
if(is.null(attributes(Metadata)$Omics.type)){attributes(Metadata)$Omics.type=Omics.type}
if(!attributes(Metadata)$Omics.type==Omics.type){
warning(paste("Omics.type is", Omics.type,"different than attributes(Metadata)$Omics.type",
attributes(Metadata)$Omics.type, "\nWill be replace"))
attributes(Metadata)$Omics.type = Omics.type
}
if(!is.list(Metadata)){stop("Metadata should be a list.")}
## if character
if(inherits(ExpressionMatrix, "character")){
message("Local import.")
l <-length(names(Metadata))
lf <- list.files(path)
if(length(lf)>1){print(c(message("There is more than one files in Dir :"),lf))}
if(all(str_detect(lf, ".rds|.txt|.csv|.tsv|.mtx", negate = FALSE)==F)){stop("No '*.rds' or '*.txt' or '*.csv' or '*.mtx' files in set directory. \n change path or add file")}
if(!ExpressionMatrix%in%lf){stop(paste(ExpressionMatrix, "is not found in",path ))}
filepath <- paste(path,ExpressionMatrix,sep="/")
message(paste("Loading", ExpressionMatrix, "file"))
if(str_detect(ExpressionMatrix, ".rds", negate = FALSE)){
dt <- readRDS(filepath)}
else {
if(str_detect(ExpressionMatrix, ".txt", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
}  else {
if(str_detect(ExpressionMatrix, ".csv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
}else {
if(str_detect(ExpressionMatrix, ".tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
} else {
}# tsv
}#csv
}#txt
}#rds
} else {
if(inherits_any(ExpressionMatrix, c("data.frame", "matrix", "dgCMatrix" ,"dgTMatrix"))){
dt = ExpressionMatrix}else { stop("Object set in ExpressionMatrix is not of class 'data.frame', 'matrix', 'dgCMatrix' ,'dgTMatrix'")}}
if(length(Metadata)>=1) {
l = length(Metadata)
if(!all(str_detect(names(Metadata),name))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Count")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes")
}
return(Metadata)} # Metadat >1
else {
Metadata$mat <-  dt
names(Metadata)[1] <- name
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c("Count")
attributes(Metadata)$Export <- "Yes" }
return(Metadata)
} # Metadata = 0
}
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = obj,
name = "norm")
library(rlang)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = obj,
name = "norm")
View(Metadata)
project <- "PANC.RNAseq"
path <- "E:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
Metadata <- CreateDataset(project,path)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = "PANC.rawcount.csv",
name = "raw.count")
obj = Metadata$raw.count
Metadata <- CreateDataset(project,path)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = obj,
name = "raw.count")
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = obj,
name = "norm")
traceback()
library(PublicDataNorm)
View(Metadata)
Metadata <- AddExpressionMatrixRNAseq(Metadata = Metadata,
ExpressionMatrix = obj,
name = "norm")
View(Metadata)
library(JRAseq)
Metadata <- CreateDataset(project,path)%>%
AddExpressionMatrixRNAseq(ExpressionMatrix = obj,
name = "raw.count")%>%
AddExpressionMatrixRNAseq(ExpressionMatrix = UQnorm(obj),
name = "norm")
?UQnorm
Metadata <- CreateDataset(project,path)%>%
AddExpressionMatrixRNAseq(ExpressionMatrix = obj,
name = "raw.count")%>%
AddExpressionMatrixRNAseq(ExpressionMatrix = UQnorm(as.matrix(obj)),
name = "norm")
Metadata <- CreateDataset(project,path)%>%
AddExpressionMatrixRNAseq(ExpressionMatrix = obj,
name = "raw.count")%>%
AddExpressionMatrixRNAseq(ExpressionMatrix = obj),
Metadata <- CreateDataset(project,path)%>%
AddExpressionMatrixRNAseq(ExpressionMatrix = obj,
name = "raw.count")%>%
AddExpressionMatrixRNAseq(ExpressionMatrix = obj,
name = "norm")
View(Metadata)
library(PublicDataNorm)
Metadata <- CreateDataset(project,path)%>%
AddExpressionMatrixRNAseq(ExpressionMatrix = obj,
name = "raw.count")%>%
AddExpressionMatrixRNAseq(ExpressionMatrix = obj,
name = "norm")
names(Metadata)
