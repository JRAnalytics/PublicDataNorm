Metadata$SamplesAnnot$Stromal.Subtypes <- ifelse(Metadata$SamplesAnnot$Stromal.Subtypes==2, yes = "Normal",
ifelse(Metadata$SamplesAnnot$Stromal.Subtypes==1,"Low",
ifelse(Metadata$SamplesAnnot$Stromal.Subtypes==3,"Activated", NA)))
Metadata$Patients.Clinic$Stromal.Subtypes <- ifelse(Metadata$Patients.Clinic$Stromal.Subtypes==2, yes = "Normal",
ifelse(Metadata$Patients.Clinic$Stromal.Subtypes==1,"Low",
ifelse(Metadata$Patients.Clinic$Stromal.Subtypes==3,"Activated", NA)))
Metadata$SamplesAnnot$Organ.Of.Prelevement <- Metadata$SamplesAnnot$TissueSampling
Metadata$Patients.Clinic$Organ.Of.Prelevement <- Metadata$Patients.Clinic$PatientSampling
Metadata$Patients.Clinic$PatientSampling <- ifelse(is.na(Metadata$Patients.Clinic$SamplesInfo),yes = "Cell.lines",no = "Tissue")
Metadata$Patients.Clinic <- subset(Metadata$Patients.Clinic,PatientSampling!="Cell.lines" )
nrow(Metadata$Patients.Clinic)
nrow(subset(Metadata$Patients.Clinic,SamplesInfo=="Primary" ))==145 # 145 in papers
nrow(subset(Metadata$Patients.Clinic,SamplesInfo=="Metastasis" ))==61 # 61 in papers
nrow(subset(Metadata$Patients.Clinic,SamplesInfo=="Normal" ))==88+46 # 88 normal distant and 46 normal pancreas  in papers
nrow(subset(Metadata$Patients.Clinic,SamplesInfo=="Primary" ))==145 # 145 in papers
project <- "Marisa"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = NULL,
setPatientID.Column = NULL,
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F)
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "title",
setPatientID.Column = "geo_accession",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F)
path <- "E:/Database" # Change parent path parent matching your own Dir configuration
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
list.files(path)
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "title",
setPatientID.Column = "geo_accession",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F)
View(Metadata)
head(Meta$Normalized.expression.matrix[,1:5])
head(Metadata$Normalized.expression.matrix[,1:5])
head(Metadata$Normalized.expression[,1:5])
rownames(Metadata$Normalized.expression) <- Metadata$Normalized.expression$V1
Metadata$Normalized.expression$V1 <- NULL
head(Metadata$Normalized.expression[,1:5])
CheckMeta(Metadata)
CheckMeta(Metadata)
View(Metadata)
Metadata[["raw.sampleAnnot"]]
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "title",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F)
CheckMeta(Metadata)
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "title",
setPatientID.Column = "geo_accession",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F)
CheckMeta(Metadata)
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "title",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F)
head(Metadata$Normalized.expression[,1:5])
rownames(Metadata$Normalized.expression) <- Metadata$Normalized.expression$V1
Metadata$Normalized.expression$V1 <- NULL
head(Metadata$Normalized.expression[,1:5])
attributes(Metadata)
CheckMeta(Metadata)
Metadata$raw.sampleAnnot[Metadata$raw.sampleAnnot=="N/A"]=NA
rownames(Metadata$raw.sampleAnnot) = Metadata$raw.sampleAnnot$title
Metadata$raw.sampleAnnot$Patient = as.character(paste0("P",1:nrow(Metadata$raw.sampleAnnot)))
for (i in 1:nrow(Metadata$raw.sampleAnnot)){
Metadata$raw.sampleAnnot[i,]$Patient = ifelse(is.na(Metadata$raw.sampleAnnot[i,]$dependancy_sample_ch1),
Metadata$raw.sampleAnnot[i,]$Patient,
Metadata$raw.sampleAnnot[Metadata$raw.sampleAnnot$dependancy_sample_ch1[i],]$Patient)
}
colnames(Metadata$raw.sampleAnnot)[colnames(Metadata$raw.sampleAnnot)=="os.delay_(months)_ch1"] = "OSdelay"
SL = CreateLexic(Metadata, type = "SamplesLexic")
PL = CreateLexic(Metadata, type = "PatientsLexic")
PL <-AddKeyLexic(PL,Param = c("PatientsID","Patient"))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean =NULL , # No imported clinical data, will create one using patient lexic from samples annotation
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,force.replace = T,
SamplesAnnotToClean = "raw.sampleAnnot",
SamplesExportname ="SamplesAnnot" ,
FilterSP = T, #set T, will filter with genes found in gene annotation object and expression matrices.
keep.all.column = F, #will add automatically a second patient or samples Annotation.
FilterGenes = T #will subset expression matrices and gene annotation with common genes
)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean =NULL , # No imported clinical data, will create one using patient lexic from samples annotation
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,force.replace = T,
SamplesAnnotToClean = "raw.sampleAnnot",
SamplesExportname ="SamplesAnnot" ,
FilterSP = F, #set T, will filter with genes found in gene annotation object and expression matrices.
keep.all.column = F, #will add automatically a second patient or samples Annotation.
FilterGenes = T #will subset expression matrices and gene annotation with common genes
)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean =NULL , # No imported clinical data, will create one using patient lexic from samples annotation
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,force.replace = T,
SamplesAnnotToClean = "raw.sampleAnnot",
SamplesExportname ="SamplesAnnot" ,
FilterSP = F, #set T, will filter with genes found in gene annotation object and expression matrices.
keep.all.column = F, #will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "title",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(Metadata = Metadata ,geneAnnotIDcolumn = "ID" , object = {data.table::fread(file.path(
list.files.path$References ,"GPL570-55999.txt"))},name = "geneAnnot")
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "title",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(Metadata = Metadata ,geneAnnotIDcolumn = "ID" , object = {data.table::fread(file.path(
list.files.path$References ,"GPL570-55999.txt"))})
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "title",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(Metadata = Metadata ,geneAnnotIDcolumn = "ID" , object = {data.table::fread(file.path(
Refpath(Metadata) ,"GPL570-55999.txt"))})
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "title",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(Metadata = Metadata ,geneAnnotIDcolumn = "ID" , object = {data.table::fread(file.path(
Refpath(Metadata) ,"GPL570-55999.txt"))})
data.table::fread(file.path(
Refpath(Metadata) ,"GPL570-55999.txt"))
View(Metadata)
Metadata[["Normalized.expression"]]
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "title",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(Metadata = Metadata ,geneAnnotIDcolumn = "ID" , object = {as.data.frame(data.table::fread(file.path(
Refpath(Metadata) ,"GPL570-55999.txt")))})
geneAnnot = as.data.frame(data.table::fread(file.path( Refpath(Metadata) ,"GPL570-55999.txt")))
View(geneAnnot)
rownames(geneAnnot) = geneAnnot$ID
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "title",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(Metadata = Metadata ,geneAnnotIDcolumn = "ID" , object = geneAnnot)
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "title",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(geneAnnotIDcolumn = "ID" , object = geneAnnot)
View(Metadata)
head(Metadata$Normalized.expression[,1:5])
rownames(Metadata$Normalized.expression) <- Metadata$Normalized.expression$V1
Metadata$Normalized.expression$V1 <- NULL
head(Metadata$Normalized.expression[,1:5])
CheckMeta(Metadata)
Metadata$raw.sampleAnnot[Metadata$raw.sampleAnnot=="N/A"]=NA
rownames(Metadata$raw.sampleAnnot) = Metadata$raw.sampleAnnot$title
Metadata$raw.sampleAnnot$Patient = as.character(paste0("P",1:nrow(Metadata$raw.sampleAnnot)))
for (i in 1:nrow(Metadata$raw.sampleAnnot)){
Metadata$raw.sampleAnnot[i,]$Patient = ifelse(is.na(Metadata$raw.sampleAnnot[i,]$dependancy_sample_ch1),
Metadata$raw.sampleAnnot[i,]$Patient,
Metadata$raw.sampleAnnot[Metadata$raw.sampleAnnot$dependancy_sample_ch1[i],]$Patient)
}
colnames(Metadata$raw.sampleAnnot)[colnames(Metadata$raw.sampleAnnot)=="os.delay_(months)_ch1"] = "OSdelay"
SL = CreateLexic(Metadata, type = "SL")
PL <-AddKeyLexic(PL,Param = c("Sex","Sex_ch1"))
PL <-AddKeyLexic(PL,Param = c("SamplesID","geo_accession"))
PL <-AddKeyLexic(PL,Param = c("Age","age.at.diagnosis_(year)_ch1"))
PL <-AddKeyLexic(PL,Param = c("OSdelay","os.delay_(months)_ch1"))
PL <-AddKeyLexic(PL,Param = c("OSevent","os.event_ch1"))
PL <-AddKeyLexic(PL,Param = c("RFSdelay","rfs.delay_ch1"))
PL <-AddKeyLexic(PL,Param = c("RFSevent","rfs.event_ch1"))
PL <-AddKeyLexic(PL,Param = c("pT","tnm.m_ch1"))
PL <-AddKeyLexic(PL,Param = c("pN","tnm.n_ch1"))
PL <-AddKeyLexic(PL,Param = c("pM","tnm.m_ch1"))
PL <-AddKeyLexic(PL,Param = c("Stage","tnm.stage_ch1"))
PL = AddKeyLexic(PL,Param = c("Molecular.Subtype","cit.molecularsubtype_ch1"))
PL = AddKeyLexic(PL,Param = c("HadTreatment","chemotherapy.adjuvant_ch1"))
PL = AddKeyLexic(PL,Param = c("TreatmentType","chemotherapy.adjuvant.type_ch1"))
PL = AddKeyLexic(PL,Param = c("BRAFstatut","braf.mutation_ch1"))
PL = AddKeyLexic(PL,Param = c("BRAFstatut","braf.mutation_ch1"))
PL = AddKeyLexic(PL,Param = c("KRASstatut","kras.mutation_ch1"))
PL = AddKeyLexic(PL,Param = c("MMRstatut","mmr.status_ch1"))
PL = AddKeyLexic(PL,Param = c("TP53statut","tp53.mutation_ch1"))
PL = AddKeyLexic(PL,Param = c("Dataset","dataset_ch1"))
SL <-AddKeyLexic(SL,Param = c("PatientsID","Patient"))
SL <-AddKeyLexic(SL,Param = c("SamplesID","geo_accession"))
SL = AddKeyLexic(SL,Param = c("Dataset","dataset_ch1"))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean =NULL , # No imported clinical data, will create one using patient lexic from samples annotation
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,force.replace = T,
SamplesAnnotToClean = "raw.sampleAnnot",
SamplesExportname ="SamplesAnnot" ,
FilterSP = F, #set T, will filter with genes found in gene annotation object and expression matrices.
keep.all.column = F, #will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
# Step 4 : Check Metadata Raw build
CheckMeta(Metadata)
View(Metadata)
Metadata[["Patients.Clinic"]]
View(Metadata)
View(Metadata$SamplesAnnot)
duplicated(Metadata$SamplesAnnot$PatientsID)
View(Metadata$Patients.Clinic)
clcl = Metadata$raw.sampleAnnot
length(which(duplicated(clcl$PatientsID)))==0
clcl$PatientsID
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "clcl",
setPatientID.Column = "geo_accession",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(geneAnnotIDcolumn = "ID" , object = geneAnnot)
View(Metadata)
Metadata[["raw.sampleAnnot"]]
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "geo_accession",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(geneAnnotIDcolumn = "ID" , object = geneAnnot)
head(Metadata$Normalized.expression[,1:5])
rownames(Metadata$Normalized.expression) <- Metadata$Normalized.expression$V1
Metadata$Normalized.expression$V1 <- NULL
head(Metadata$Normalized.expression[,1:5])
attributes(Metadata)
CheckMeta(Metadata)
Metadata$raw.sampleAnnot[Metadata$raw.sampleAnnot=="N/A"]=NA
rownames(Metadata$raw.sampleAnnot) = Metadata$raw.sampleAnnot$title
Metadata$raw.sampleAnnot$Patient = as.character(paste0("P",1:nrow(Metadata$raw.sampleAnnot)))
for (i in 1:nrow(Metadata$raw.sampleAnnot)){
Metadata$raw.sampleAnnot[i,]$Patient = ifelse(is.na(Metadata$raw.sampleAnnot[i,]$dependancy_sample_ch1),
Metadata$raw.sampleAnnot[i,]$Patient,
Metadata$raw.sampleAnnot[Metadata$raw.sampleAnnot$dependancy_sample_ch1[i],]$Patient)
}
colnames(Metadata$raw.sampleAnnot)[colnames(Metadata$raw.sampleAnnot)=="os.delay_(months)_ch1"] = "OSdelay"
SL = CreateLexic(Metadata, type = "SL")
PL <-AddKeyLexic(PL,Param = c("PatientsID","Patient"))
PL <-AddKeyLexic(PL,Param = c("Sex","Sex_ch1"))
PL <-AddKeyLexic(PL,Param = c("SamplesID","geo_accession"))
PL <-AddKeyLexic(PL,Param = c("Age","age.at.diagnosis_(year)_ch1"))
PL <-AddKeyLexic(PL,Param = c("OSdelay","os.delay_(months)_ch1"))
PL <-AddKeyLexic(PL,Param = c("OSevent","os.event_ch1"))
PL <-AddKeyLexic(PL,Param = c("RFSdelay","rfs.delay_ch1"))
PL <-AddKeyLexic(PL,Param = c("RFSevent","rfs.event_ch1"))
PL <-AddKeyLexic(PL,Param = c("pT","tnm.m_ch1"))
PL <-AddKeyLexic(PL,Param = c("pN","tnm.n_ch1"))
PL <-AddKeyLexic(PL,Param = c("pM","tnm.m_ch1"))
PL <-AddKeyLexic(PL,Param = c("Stage","tnm.stage_ch1"))
PL = AddKeyLexic(PL,Param = c("Molecular.Subtype","cit.molecularsubtype_ch1"))
PL = AddKeyLexic(PL,Param = c("HadTreatment","chemotherapy.adjuvant_ch1"))
PL = AddKeyLexic(PL,Param = c("TreatmentType","chemotherapy.adjuvant.type_ch1"))
PL = AddKeyLexic(PL,Param = c("BRAFstatut","braf.mutation_ch1"))
PL = AddKeyLexic(PL,Param = c("BRAFstatut","braf.mutation_ch1"))
PL = AddKeyLexic(PL,Param = c("KRASstatut","kras.mutation_ch1"))
PL = AddKeyLexic(PL,Param = c("MMRstatut","mmr.status_ch1"))
PL = AddKeyLexic(PL,Param = c("TP53statut","tp53.mutation_ch1"))
PL = AddKeyLexic(PL,Param = c("Dataset","dataset_ch1"))
SL <-AddKeyLexic(SL,Param = c("PatientsID","Patient"))
SL <-AddKeyLexic(SL,Param = c("SamplesID","geo_accession"))
SL = AddKeyLexic(SL,Param = c("Dataset","dataset_ch1"))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean =NULL , # No imported clinical data, will create one using patient lexic from samples annotation
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,force.replace = T,
SamplesAnnotToClean = "raw.sampleAnnot",
SamplesExportname ="SamplesAnnot" ,
FilterSP = F, #set T, will filter with genes found in gene annotation object and expression matrices.
keep.all.column = F, #will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
# Step 4 : Check Metadata Raw build
CheckMeta(Metadata)
View(Metadata)
Metadata[["Patients.Clinic"]]
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "title",
setPatientID.Column = "geo_accession",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(geneAnnotIDcolumn = "ID" , object = geneAnnot)
CheckMeta(Metadata)
Metadata$raw.sampleAnnot[Metadata$raw.sampleAnnot=="N/A"]=NA
rownames(Metadata$raw.sampleAnnot) = Metadata$raw.sampleAnnot$title
Metadata$raw.sampleAnnot$Patient = as.character(paste0("P",1:nrow(Metadata$raw.sampleAnnot)))
for (i in 1:nrow(Metadata$raw.sampleAnnot)){
Metadata$raw.sampleAnnot[i,]$Patient = ifelse(is.na(Metadata$raw.sampleAnnot[i,]$dependancy_sample_ch1),
Metadata$raw.sampleAnnot[i,]$Patient,
Metadata$raw.sampleAnnot[Metadata$raw.sampleAnnot$dependancy_sample_ch1[i],]$Patient)
}
colnames(Metadata$raw.sampleAnnot)[colnames(Metadata$raw.sampleAnnot)=="os.delay_(months)_ch1"] = "OSdelay"
SL = CreateLexic(Metadata, type = "SL")
PL = CreateLexic(Metadata, type = "PatientsLexic")
names(PL)
colnames(Metadata$raw.sampleAnnot)
#add a parameter in LexicCLinic for CleaningClinic function
PL <-AddKeyLexic(PL,Param = c("PatientsID","Patient"))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean =NULL , # No imported clinical data, will create one using patient lexic from samples annotation
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,force.replace = T,
SamplesAnnotToClean = "raw.sampleAnnot",
SamplesExportname ="SamplesAnnot" ,
FilterSP = F, #set T, will filter with genes found in gene annotation object and expression matrices.
keep.all.column = F, #will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata = CreateDataset(project,path) %>%
AddClinicFromFile(
ClinicFile = "Marisa.SamplesAnnotation.txt.gz",
name = "raw.sampleAnnot", # Will add projec name at the begining of each export name at ExportTSV  or ExportCSV
type = "Samples",
setSamplesID.Column = "geo_accession",
setPatientID.Column = "title",
#set SamplesID colnames with  setID.Column values
Export = F) %>%
AddExpressionMatrixMArray(ExpressionMatrix = "Marisa.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F) %>%
AddgeneAnnotFromObject(geneAnnotIDcolumn = "ID" , object = geneAnnot)
head(Metadata$Normalized.expression[,1:5])
rownames(Metadata$Normalized.expression) <- Metadata$Normalized.expression$V1
Metadata$Normalized.expression$V1 <- NULL
head(Metadata$Normalized.expression[,1:5])
CheckMeta(Metadata)
CheckMeta(Metadata)
Metadata$raw.sampleAnnot[Metadata$raw.sampleAnnot=="N/A"]=NA
rownames(Metadata$raw.sampleAnnot) = Metadata$raw.sampleAnnot$title
Metadata$raw.sampleAnnot$Patient = as.character(paste0("P",1:nrow(Metadata$raw.sampleAnnot)))
for (i in 1:nrow(Metadata$raw.sampleAnnot)){
Metadata$raw.sampleAnnot[i,]$Patient = ifelse(is.na(Metadata$raw.sampleAnnot[i,]$dependancy_sample_ch1),
Metadata$raw.sampleAnnot[i,]$Patient,
Metadata$raw.sampleAnnot[Metadata$raw.sampleAnnot$dependancy_sample_ch1[i],]$Patient)
}
colnames(Metadata$raw.sampleAnnot)[colnames(Metadata$raw.sampleAnnot)=="os.delay_(months)_ch1"] = "OSdelay"
SL = CreateLexic(Metadata, type = "SL")
PL = CreateLexic(Metadata, type = "PatientsLexic")
names(PL)
colnames(Metadata$raw.sampleAnnot)
#add a parameter in LexicCLinic for CleaningClinic function
PL <-AddKeyLexic(PL,Param = c("PatientsID","Patient"))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean =NULL , # No imported clinical data, will create one using patient lexic from samples annotation
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,force.replace = T,
SamplesAnnotToClean = "raw.sampleAnnot",
SamplesExportname ="SamplesAnnot" ,
FilterSP = F, #set T, will filter with genes found in gene annotation object and expression matrices.
keep.all.column = F, #will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata[["Patients.Clinic"]]
View(Metadata$Patients.Clinic)
View(Metadata$raw.sampleAnnot)
PL <-AddKeyLexic(PL,Param = c("PatientsID","Patient"))
rownames(Metadata$raw.sampleAnnot) = Metadata$raw.sampleAnnot$title
Metadata$raw.sampleAnnot$dependancy_sample_ch1
Metadata$raw.sampleAnnot$PatientsID = Metadata$raw.sampleAnnot$Patient
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean =NULL , # No imported clinical data, will create one using patient lexic from samples annotation
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,force.replace = T,
SamplesAnnotToClean = "raw.sampleAnnot",
SamplesExportname ="SamplesAnnot" ,
FilterSP = F, #set T, will filter with genes found in gene annotation object and expression matrices.
keep.all.column = F, #will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["Patients.Clinic"]]
View(Metadata$Patients.Clinic)
library(PublicDataNorm)
