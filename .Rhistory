SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesID","id_cit") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientsID","id_patient") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientSampling","surgery_type") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplePathologicalState","tumor_type") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("HadTreatment","treatment_adjuvant") )
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = T, all.col = T)
View(Meta$PANC.Microarray.Samples.Clinic)
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("SamplesID","id_cit") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("PatientsID","id_patient") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("MainRNAID","id_cit") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("Age","Age.a.la.chir") )
PatientLexic$Sex = PatientLexic$Sex[PatientLexic$Sex!="Sexe"]
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("Sexe","sex") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("OSdelay","dfs.time") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("OSevent","os.event") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("Disease","tumor_type") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("pT","grade_t") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("pN","grade_n") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("pM","grade_m") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("pTNM","tnm") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("Differenciation","differenciation") )
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", list.files.path = list.files.path, project = project, ForceCleaning = T, all.col = T)
View(Meta$PANC.Microarray.Patients.Clinic)
CheckMeta(Meta)
Meta <- AddObjetToMeta(Meta,object ={data.table::fread(file.path(list.files.path$Project.RawData,"PANC.probesAnnot.csv"))}
,name = "Probes.Annot", geneFilter = F, SamplesFilter = F,
Data.type = "geneAnnotation.file",
Raw = "No")
View(Meta)
Meta[["Probes.Annot"]]
Meta[["Raw.count.matrix"]]
Meta[["Normalized.count.matrix"]]
project <- "PANC.RNAseq"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path)
project <- "PANC.RNAseq"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path)
# if all are TRUE ; next step can be done
# Step 2 : Save Script in project.R file in the parent/02Processes/project folder
###### By hand unfortunately for the first time
# Step 3.1 : Build meta object from 01RawData folder.
Meta <- AddExpressionMatrix(Metadata = NULL,
Omics.type = "RNAseq",
Raw = T, # True pour Raw data. F pour normalisée
local = T,
path = list.files.path$Project.RawData,
name.local.file ="PANC.rawcount.csv",
name = "Raw.count",
force.replace = F)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
head(Meta$Raw.count.matrix[,1:5])
Meta$Raw.count.matrix[,1] <- NULL  # First colonne, geneSymbols drop off.
Meta <- AddExpressionMatrix(Metadata = Meta,
Omics.type = "RNAseq",
Raw = F, # True pour Raw data. F pour normalisée
local = T,
path = list.files.path$Project.RawData,
name.local.file ="PANC.NormCount.csv",
name = "Normalized.count",
force.replace = T)
head(Meta$Normalized.count.matrix[,1:5])
Meta$Normalized.count.matrix[,1] <- NULL
all(colnames(Meta$Normalized.count.matrix)%in%colnames(Meta$Raw.count.matrix))
attributes(Meta)
CheckMeta(Meta)
###create LexicCLinic and SamplesOrPAtient objects to add or replace colnames of clinical data.
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Clinic",
force.replace = T,type = "Patients",
Raw =T,
merge = F,mergeBy = "id_cit",join = "full_join",
name.local.file = c( "PANC.samplesAnnotation.csv", "PANC.Clinic.all.csv"))
Meta$Clinic[Meta$Clinic=="#NA"] = NA
Meta$Clinic[Meta$Clinic=="NA"] = NA
Meta$Clinic[Meta$Clinic=="xx"] = NA
Meta$Clinic = Meta$Clinic[!is.na(Meta$Clinic$id_cit),]
Meta$Clinic= as.data.frame(Meta$Clinic)
rownames(Meta$Clinic) = Meta$Clinic$id_cit
Meta$Clinic = Meta$Clinic[Meta$Clinic$id_cit%in%colnames(Meta$Normalized.count.matrix),]
Meta$Clinic = Charac.to.Num(Meta$Clinic)
attributes(Meta)
CheckMeta(Meta)
str(Meta$Clinic)
LexicData(list.files.path)
colnames(Meta$Clinic)[colnames(Meta$Clinic)=="Samples"]="Samples_cit"
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesID","id_cit") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientsID","id_patient") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientSampling","surgery_type") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplePathologicalState","tumor_type") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("HadTreatment","treatment_adjuvant") )
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project,
ForceCleaning = T, all.col = T)#la all.col TRUE rajoute toutes les colonne du clinic
View(Meta$PANC.Microarray.Samples.Clinic)
colnames(Meta$Clinic)
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("SamplesID","id_cit") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("PatientsID","id_patient") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("MainRNAID","id_cit") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("Age","Age.a.la.chir") )
PatientLexic$Sex = PatientLexic$Sex[PatientLexic$Sex!="Sexe"]
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("Sexe","sex") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("OSdelay","dfs.time") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("OSevent","os.event") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("Disease","tumor_type") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("pT","grade_t") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("pN","grade_n") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("pM","grade_m") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("pTNM","tnm") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("Differenciation","differenciation") )
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", list.files.path = list.files.path, project = project, ForceCleaning = T, all.col = T)
View(Meta$PANC.Microarray.Patients.Clinic)
# Step 4 : Check Metadata Raw build
CheckMeta(Meta)
# Rownames of Raw.Meta$Clinic has to be the same as colnames of Raw.matrix ("MaurerRaw.matrix colnames : PASS"  /" RawMaurer.Meta$Clinic colnames : PASS")
#Step 5 : add gene Annotation
# from paper : "Ensembl GRCh37 gene annotations" build 37.2 -> hg19
Meta <- AddObjetToMeta(Meta,object ={data.table::fread(file.path(list.files.path$Project.RawData,"PANC.probesAnnot.csv"))}
,name = "Probes.Annot", geneFilter = F, SamplesFilter = F,
Data.type = "geneAnnotation.file",
Raw = "No")
attributes(Meta)
CheckMeta(Meta) # can display number of common genesSymbols frome Raw or Normalized matrix in geneAnnotation file
View(Meta)
Meta[["PANC.RNAseq.Patients.Clinic"]]
Meta[["PANC.RNAseq.Samples.Clinic"]]
colnames(Meta$Probes.Annot)
head(colnames(Meta$Probes.Annot))
head(Meta$Probes.Annot)
colnames(Meta$Probes.Annot) = c("EnsembleID"  ,     "chr",       "start"   ,    "end"    ,   "strand"  ,     "GeneID" ,  "GeneName")
#Step 7 : Export data as ".csv"
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
attributes(Meta)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "" ,
Run.spec = "",
First.Author = "Puleo F.",
DOI = "10.1053/j.gastro.2018.08.033",
project = project,
Comment = "Pour methodo et plateforme RNAseq, demander à Remy je pense",
User = "JR-Analytics")
CheckLocalDatabase(Meta = Meta,
list.files.path = list.files.path,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "" ,
Run.spec = "",
First.Author = "Puleo F.",
DOI = "10.1053/j.gastro.2018.08.033",
project = project,
Comment = "Pour methodo et plateforme RNAseq, demander à Remy je pense",
User = "JR-Analytics")
length(which(str_detect(toupper(Meta$PANC.RNAseq.Samples.Clinic[,"HadTreatment"]),"YES|TRUE|1")))
Meta$PANC.RNAseq.Samples.Clinic[,"HadTreatment"]
#' @param First.Author Defaul = NA
#' @param DOI doi of article if exist. Defaul = NA
#' @param project project name
#' @param Comment specify a comment for this export
#' @param User User who export the cleaned Meta object
#' @return a .text tab delimited database summary
#' @import data.table
#' @export
#'
#' @examples "non"
CheckLocalDatabase <- function(Meta,
list.files.path,
Normalization.Method = NA,
Technology = NA,
Platform = NA,
Run.spec=NA ,
First.Author = NA,
DOI = NA,
project = NA,
Comment = NA,
User= NA){
Databasename = "DataBaseSummary.txt"
Local.Data.base.Path <- list.files.path$Parent
lf <- list.files(Local.Data.base.Path)
if(is.null(attributes(Meta)$Version)){ Version = "V1"} else {   Version <- attributes(Meta)$Version }
NBS <- which(attributes(Meta)$Data.Type=="Samples.Clinical.data" & attributes(Meta)$Raw.data=="No")
cc <- as.character()
for (i in NBS){
nn <- names(cc)
cc <- c(cc,nrow(Meta[[i]]))
names(cc) <- c(nn,i)
}
NBS <- as.numeric(names(cc)[which(cc%in%min(cc))[1]])
NBP <- which(attributes(Meta)$Data.Type=="Patient.Clinical.data" & attributes(Meta)$Raw.data=="No")
cc <- as.character()
for (i in NBP){
nn <- names(cc)
cc <- c(cc,nrow(Meta[[i]]))
names(cc) <- c(nn,i)
}
NBP <- as.numeric(names(cc)[which(cc%in%min(cc))[1]])
if(length(NBS)==0){ Nsamples=0 } else{
Nsamples <- nrow(Meta[[NBS]])}
if(length(NBP)==0){ Npatient = Nsamples}else{
Npatient <- nrow(Meta[[NBP]])}
if(length(which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="Yes" ))==0){ RawGenes = 0} else {
NB.raw.mat<- which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="Yes" )
RawGenes <- nrow(Meta[[NB.raw.mat[1]]])}
if(length(which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="No" ))==0){NormGenes=0}else{
NB.norm.mat <- which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="No")
NormGenes <- nrow(Meta[[NB.norm.mat[1]]])}
if(all(is.na(Meta[[NBS]]$SamplePathologicalState))){tumor <- nrow(Meta[[NBS]]) } else {
tumor <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"TUM|PRIMARY")))
if(tumor==0 & !all(is.na(Meta[[NBS]]$SamplePathologicalState))) {
normal <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"NORM|HEAL")))
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
na <- length(which(is.na(Meta[[NBS]]$SamplePathologicalState)))
tumor = nrow(Meta[[NBS]])-normal-met-na
}
}
if(all(is.na(Meta[[NBS]]$SamplePathologicalState))){normal <- 0 } else {
normal<- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"NORM|HEAL")))
if(normal==0 & !all(is.na(Meta[[NBS]]$SamplePathologicalState))) {
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
na <- length(which(is.na(Meta[[NBS]]$SamplePathologicalState)))
normal = nrow(Meta[[NBS]])-tumor-met-na
}
}
if(length(NBS)>0){
if(!is.null(Meta[[NBS]][,"HadTreatment"])) {
TTT <- length(which(str_detect(toupper(Meta[[NBS]][,"HadTreatment"]),"YES|OUI|TRUE|1")))
} else { TTT <- 0   }
} else { TTT <- 0 }
if( TTT==0  ){
TTTinfo <- "No"
} else {
TTTinfo <- "Yes"
}
if(length(NBP)>0){
if(all(is.na(Meta[[NBP]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
if(all(is.na(Meta[[NBP]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" } }
else {
OSinfo <- "No"
PFSinfo <- "No" }
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
dt <- data.frame("Project" = project,
"Version" = Version,
"Date.of.Data.Norm" = format(Sys.Date(),format = "%d/%m/%Y" ),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.TumoralSamples" = tumor,
"N.NormalSamples" = normal,
"N.Metastasis" = met,
"Overall.Survival" = OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = Normalization.Method,
"Technology" = Technology,
"Platform" = Platform,
"Run.spec"=Run.spec ,
"First.Author" = First.Author,
"Article.DOI" = DOI,
"Comment" = Comment,
"User"= User)
message("Adding to data bases : ")
fp <- paste(c(Local.Data.base.Path,Databasename), collapse = "/")
if(file.exists(fp)){
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
if(length(x$Project[x$Project==project])!=0){
if(!all((x$Project[x$Project==project]==project & x$Version[x$Project==project]==attributes(Meta)$Version)==F)){
message(paste(project,"already existing in database. Reactualising database"))
proj <- which(x$Project==project)
row <- which(x$Version[proj]==attributes(Meta)$Version)
x[proj[row],] <- dt
} else { x <- rbind(x,dt)
print(dt)
}}
if(length(x$Project[x$Project==project])==0){ x <- rbind(x,dt)
print(dt)
}
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
if(length(version)==1){
if(is.na(version)){version = "V1"}}
if(!all(is.na(version))){
if(!all(x$Version[x$Project==project]%in%version)){
proj <- which(x$Project==project)
if(length(unique(x[proj,]$Project))!=1){stop("Error in actualising DataBaseSummary.txt")}
outV <- which(!x[proj,]$Version%in%version)
message(paste("Project",project   ,"version",x[proj[outV],]$Version," is missing in 04VerifiedDataset. Removing from DataBaseSummary.txt\n"))
x <- x[-proj[outV],]
}}
x <- x[order(x$Project,x$Version,decreasing = F),]
write.table(x,fp,row.names = F, sep = "\t",dec = "." )
} else {
print(dt)
write.table(dt,fp,row.names = F, sep = "\t",dec = "." )
}
}
CheckLocalDatabase(Meta = Meta,
list.files.path = list.files.path,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "" ,
Run.spec = "",
First.Author = "Puleo F.",
DOI = "10.1053/j.gastro.2018.08.033",
project = project,
Comment = "Pour methodo et plateforme RNAseq, demander à Remy je pense",
User = "JR-Analytics")
project <- "PANC.Microarray"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path)
Puleo <- readRDS("D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/01RawData/PANC.Microarray/Puleo.rds")
View(Puleo)
Puleo[["exp"]]
Puleo[["samannot"]]
write.csv(Puleo$exp, paste0(list.files.path$Project.RawData,"/Puleo.Microarray.NormCount.csv"))
write.csv(Puleo$samannot, paste0(list.files.path$Project.RawData,"/Puleo.Microarray.samplesAnnotation.csv"))
write.csv(Puleo$probeannot, paste0(list.files.path$Project.RawData,"/Puleo.Microarray.probesAnnot.csv"))
Puleo$pubCentroids
Puleo$pubICA
Puleo$genecol
Puleo$survdf
Meta <- AddExpressionMatrix(Metadata = NULL,
Omics.type = "Microarray",
Raw = T, # True pour Raw data. F pour normalisée
local = T,
path = list.files.path$Project.RawData,
name.local.file ="Puleo.Microarray.NormCount.csv",
name = "Raw.count",
force.replace = F)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
head(Meta$Raw.count.matrix[,1:5])
Meta$Raw.count.matrix[,1] <- NULL  # First colonne, geneSymbols drop off.
Meta <- AddExpressionMatrix(Metadata = NULL,
Omics.type = "Microarray",
Raw = F, # True pour Raw data. F pour normalisée
local = T,
path = list.files.path$Project.RawData,
name.local.file ="PANC.NormCount.csv",
name = "Normalized.count",
force.replace = T)
Meta <- AddExpressionMatrix(Metadata = NULL,
Omics.type = "Microarray",
Raw = F, # True pour Raw data. F pour normalisée
local = T,
path = list.files.path$Project.RawData,
name.local.file ="Puleo.Microarray.NormCount.csv",
name = "Normalized.count",
force.replace = T)
head(Meta$Normalized.count.matrix[,1:5])
Meta$Normalized.count.matrix[,1] <- NULL
all(colnames(Meta$Normalized.count.matrix)%in%colnames(Meta$Raw.count.matrix))
attributes(Meta)
CheckMeta(Meta)
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Clinic",
force.replace = T,type = "Patients",
Raw =T,
merge = F,mergeBy = "id_cit",join = "full_join",
name.local.file = c( "Puleo.Microarray.samplesAnnotation.csv"))
Meta$Clinic
Meta$Clinic[Meta$Clinic=="#NA"] = NA
Meta$Clinic[Meta$Clinic=="NA"] = NA
Meta$Clinic[Meta$Clinic=="xx"] = NA
Meta$Clinic
is.na(Meta$Clinic$id_cit)
Meta$Clinic= as.data.frame(Meta$Clinic)
Meta$Clinic$id_cit
View(Meta$Clinic)
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Clinic",
force.replace = T,type = "Patients",
Raw =T,
merge = F,mergeBy = "id_cit",join = "full_join",
name.local.file = c( "Puleo.Microarray.samplesAnnotation.csv"))
Meta$Clinic[Meta$Clinic=="#NA"] = NA
Meta$Clinic[Meta$Clinic=="NA"] = NA
Meta$Clinic= as.data.frame(Meta$Clinic)
View(Meta$Clinic)
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Clinic",
force.replace = T,type = "Patients",
Raw =T,
merge = F,mergeBy = "id_cit",join = "full_join",
name.local.file = c( "Puleo.Microarray.samplesAnnotation.csv", "PANC.Clinic.all.csv"))
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Clinic",
force.replace = T,type = "Patients",
Raw =T,
merge = F,mergeBy = "id_cit",join = "full_join",
name.local.file = c( "Puleo.Microarray.samplesAnnotation.csv", "PANC.Clinic.all.csv"))
Meta$Clinic[Meta$Clinic=="#NA"] = NA
Meta$Clinic[Meta$Clinic=="NA"] = NA
Meta$Clinic=="xxx"
Meta$Clinic[Meta$Clinic=="xxx"]
Meta$Clinic[Meta$Clinic=="xx"]
Meta$Clinic
View(Meta$Clinic)
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Clinic",
force.replace = T,type = "Patients",
Raw =T,
merge = F,mergeBy = "id_cit",join = "left_join",
name.local.file = c( "Puleo.Microarray.samplesAnnotation.csv", "PANC.Clinic.all.csv"))
Meta$Clinic
View(Meta$Clinic)
Meta$Clinic= as.data.frame(Meta$Clinic)
rownames(Meta$Clinic) = Meta$Clinic$id_cit
Meta$Clinic[Meta$Clinic=="#NA"] = NA
Meta$Clinic[Meta$Clinic=="NA"] = NA
Meta$Clinic[Meta$Clinic=="xx"] = NA
Meta$Clinic= as.data.frame(Meta$Clinic)
rownames(Meta$Clinic) = Meta$Clinic$id_cit
Meta$Clinic = Meta$Clinic[Meta$Clinic$id_cit%in%colnames(Meta$Normalized.count.matrix),]
CheckMeta(Meta)
str(Meta$Clinic)
Meta$Clinic[Meta$Clinic=="NA"] = NA
str(Meta$Clinic)
Meta$Clinic[Meta$Clinic=="NA"]
summary(is.na(Meta$Clinic))
Meta$Clinic = Charac.to.Num(Meta$Clinic)
str(Meta$Clinic)
attributes(Meta)
CheckMeta(Meta)
LexicData(list.files.path)
colnames(Meta$Clinic)[colnames(Meta$Clinic)=="Samples"]
colnames(Meta$Clinic)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project,
ForceCleaning = T, all.col = T)#la all.col TRUE rajoute toutes les colonne du clinic
View(Meta$PANC.Microarray.Samples.Clinic)
names(SamplesLexic)
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SpecimenConservation","Biomaterial.Original.state") )
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Clinic",
force.replace = T,type = "Patients",
Raw =T,
merge = F,mergeBy = "id_cit",join = "left_join",
name.local.file = c( "Puleo.Microarray.samplesAnnotation.csv"))
ncol(Meta$Clinic)
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Clinic",
force.replace = T,type = "Patients",
Raw =T,
merge = F,mergeBy = "id_cit",join = "left_join",
name.local.file = c( "Puleo.Microarray.samplesAnnotation.csv", "PANC.Clinic.all.csv"))
Meta$Clinic[Meta$Clinic=="#NA"] = NA
Meta$Clinic[Meta$Clinic=="NA"] = NA
Meta$Clinic[Meta$Clinic=="xx"] = NA
Meta$Clinic= as.data.frame(Meta$Clinic)
rownames(Meta$Clinic) = Meta$Clinic$id_cit
Meta$Clinic = Meta$Clinic[Meta$Clinic$id_cit%in%colnames(Meta$Normalized.count.matrix),]
str(Meta$Clinic)
Meta$Clinic = Charac.to.Num(Meta$Clinic)
str(Meta$Clinic)
attributes(Meta)
CheckMeta(Meta)
LexicData(list.files.path)
names(SamplesLexic)
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesID","id_cit") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientsID","ID.Consortium") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientSampling","surgery_type") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplePathologicalState","Histology.Type") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("HadTreatment","Chemotherapy.First.Performed") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SpecimenConservation","Biomaterial.Original.state") )
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project,
ForceCleaning = T, all.col = T)#la all.col TRUE rajoute toutes les colonne du clinic
View(Meta$PANC.Microarray.Samples.Clinic)
names(PatientLexic)
colnames(Meta$Clinic)
View(Meta$Clinic)
Meta$Clinic$TNM.M==Meta$Clinic$TNM.M.1
all(
Meta$Clinic$TNM.M==Meta$Clinic$TNM.M.1)
all(
Meta$Clinic$M.x==Meta$Clinic$M.y)
Meta$Clinic$M.x
Meta$Clinic$M.y
Meta$Clinic$TNM.M
Meta$Clinic$T.x
Meta$Clinic$T.y
Meta$Clinic$TNM.T
Meta$Clinic$TNM.T.1
Meta$Clinic$TNM.Stage.1
Meta$Clinic$TNM.Stage
Meta$Clinic$stade.TNM.x
CheckMeta(Meta)
View(Meta$PANC.Microarray.Samples.Clinic)
Meta$Clinic$T.x
Meta$Clinic$T.y
Meta$Clinic$TNM.T
View(Puleo)
Puleo[["samannot"]]
Meta$Clinic$TNM.Stage.1
Meta$Clinic$TNM.Stage
Meta$Clinic$stade.TNM.x
