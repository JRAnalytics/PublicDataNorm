PL = addSeveralKeysToLexic(lexic = PL,vector = c("age"="age",
"sex" = "sex",
"PFSdelay"="PFS_DFS",
"disease" ="cancer_type",
"OSevent" ="OS",
"patientSampling" = "site",
"treatmentInfo" = "site",
"patientSampling" = "treated_naive",
"pT" = "AJCC_T",
"pN" = "AJCC_N",
"pM" = "AJCC_M",
"stage" = "AJCC_stage",
"size" = "size",
"grade" = "grade") )
View(Metadata)
View(PL)
PL$samplesID = NULL
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
CellsLexic = CL,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Clinic", #no samples annot present, just set to the same PatientAnnot name
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["SamplesAnnot"]]
Metadata[["Patients.Clinic"]]
CheckMeta(Metadata)
#' CheckMeta : Checking samples accors Metadata files
#'
#' @param Metadata a Metadata list
#'
#' @return none
#' @export
#'
#' @examples "none"
CheckMeta <- function(Metadata) {
if(is.null(Metadata)){stop("Need a Metadata List file")}
if(!is.list(Metadata)){stop("Need a Metadata List file")}
if(is.null(attributes(Metadata)$Omics.type)){attributes(Metadata)$Omics.type="NotDefine"}
if("CellsAnnot"%in%attributes(Metadata)$Data.Type){attributes(Metadata)$Omics.type="Single.Cell"}
l <-length(names(Metadata))
MetaDataN <- names(Metadata)
m <- which(attributes(Metadata)$Data.Type=="Count")
g =  which(attributes(Metadata)$Data.Type=="geneAnnot")[1]
if(!is.na(g)){geneAnnot = as.matrix(Metadata[[g]])}
if(attributes(Metadata)$Omics.type!="Single.Cell"){
if("Clinic" %in%attributes(Metadata)$Data.Type){
c <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="Yes")
if(length(c2)>0){c=c2}
PpID <- unique(Metadata[[c[1]]][,"patientsID"])
}else {stop("A Patients' Clinical data must be loaded.")}
if(length(c)>0){
if("samplesID" %in% colnames(Metadata[[c[1]]])){
if(!all(is.na(Metadata[[c[1]]][,"samplesID"]))){
PsID = Metadata[[c[1]]][,"samplesID"]
PsID = unique(unlist(strsplit(PsID, ";")))}}} else{PsID=NULL}
if("SamplesAnnot" %in%attributes(Metadata)$Data.Type ){
s <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
s2 <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(s2)>0){s=s2}
SsID <- unique(Metadata[[s[1]]][,"samplesID"])
SpID <- unique(Metadata[[s[1]]][,"patientsID"])
}else{ s = NULL}
if(length(s)!=0){
if(attributes(Metadata)$Data.Type[s[1]]=="SamplesAnnot"){sID <- Metadata[[s[1]]][,"samplesID"] }}
if(length(c)!=0){
if(attributes(Metadata)$Data.Type[c[1]]=="Clinic"){pID <- Metadata[[c[1]]][,"patientsID"] }}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
c= NULL
if("Clinic" %in%attributes(Metadata)$Data.Type){
c <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="Yes")
if(length(c2)>0){c=c2
if("samplesID" %in% colnames(Metadata[[c[1]]])){
if(!all(is.na(Metadata[[c[1]]][,"samplesID"]))){
PsID = Metadata[[c[1]]][,"samplesID"]
PsID = unique(unlist(strsplit(PsID, ";")))}} else{PsID=NULL}}
if(length(c)==0){stop("A Patients' Clinical data must be loaded")}
PpID <- unique(Metadata[[c[1]]][,"patientsID"])
}
if("SamplesAnnot" %in%attributes(Metadata)$Data.Type ){
s <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
s2 <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(s2)>0){s=s2}
SsID <- unique(Metadata[[s[1]]][,"samplesID"])
SpID <- unique(Metadata[[s[1]]][,"patientsID"])
}else{s=NULL}
if("CellsAnnot" %in%attributes(Metadata)$Data.Type){
cellannot <- which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned=="No")
cellannot2 <- which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(cellannot2)>0){cellannot=cellannot2}
cellID <- Metadata[[cellannot[1]]][,"CellsBarcode"]
}
}
if(attributes(Metadata)$Omics.type!="Single.Cell"){
message("-------------------------")
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
if(length(ccc)>0){  message(paste("Checking samplesID in Cleaned Metadata sub-objects from", names(Metadata)[s2[1]]))}else {
message(paste("Checking samplesID in Metadata sub-objects from", names(Metadata)[s[1]])) }
message("-------------------------")
for (i in m){
if(length(s)>0 & length(c)<1 | length(c)>0 & length(s)>0 ){
if(all(SsID %in% colnames(Metadata[[i]]))==T) {   message(paste(MetaDataN[i]), " colnames : PASS") } else {
message(paste(MetaDataN[i]), " colnames : FAIL")
if(summary(SsID %in% colnames(Metadata[[i]]))["TRUE"]==ncol(Metadata[[i]]) ){message(paste("All samples from", MetaDataN[i],"are found in Samples or clinical annotation file."))}
message(paste("Samples not found in ", MetaDataN[i]," : "), paste0(na.omit(SsID[!SsID%in%colnames(Metadata[[i]])]),collapse = "; "))}
}
if(length(c)>0 & length(s)<1 & !is.null(PsID) ){
if(all(PsID %in% colnames(Metadata[[i]]))==T) {   message(paste(MetaDataN[i]), " colnames : PASS") } else {
message(paste(MetaDataN[i]), " colnames : FAIL")
if(summary(PsID %in% colnames(Metadata[[i]]))["TRUE"]==ncol(Metadata[[i]]) ){message(paste("All samples from", MetaDataN[i],"are found in Samples or clinical annotation file."))}
message(paste("Samples not found in ", MetaDataN[i]," : "), paste0(na.omit(PsID[!PsID%in%colnames(Metadata[[i]])]),collapse = "; "))}
}
}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
message("-------------------------")
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
if(length(ccc)>0 ){  message(paste("Checking  Cells barcodes and Samples/Patients correspondances in cleaned Metadata sub-objects from", names(Metadata)[c2[1]]))}else {
message(paste("Checking Cells barcodes and Samples/Patients correspondances in Metadata sub-objects from", names(Metadata)[c[1]]))}
message("-------------------------")
for (i in m){
if(all(cellID %in% colnames(Metadata[[i]]))==T) {   message(paste("All Cells barcodes in",MetaDataN[i], "colnames : PASS")) } else {
message(paste(MetaDataN[i]), " colnames : FAIL")
if(length(!cellID%in%colnames(Metadata[[i]]))>10){
mismatch = na.omit(cellID[!cellID%in%colnames(Metadata[[i]])])[1:10]
ext = paste("\n showing ten of",length(cellID[!cellID%in%colnames(Metadata[[i]])]), "not found") }else {
mismatch=na.omit(cellID[!cellID%in%colnames(Metadata[[i]])])
ext = ""}
message(paste("Cells barcodes not found in ", MetaDataN[i]," : "), paste0(mismatch,collapse = "; "),ext)}
}
}
if(!is.na(g)){
message("-------------------------")
message("Checking Matrices probes")
message("-------------------------")
for (i in m){
gene = rownames(Metadata[[i]])
sel = which(geneAnnot %in% gene)
col = which(apply(geneAnnot, 2, function(x) which(x %in% geneAnnot[sel[1]]))>0)[1]
if(all(str_detect(gene, "ENSG")==T)) { message(paste(names(Metadata[i]), " gene probes as ENSEMBL"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(is.numeric(as.numeric(gene))))  { message(paste(names(Metadata[i]), " gene probes as ENTREZ gene id"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(str_detect(gene, "ILMN_")==T)) { message(paste(names(Metadata[i]), " gene probes as Illumina Bead Array Probes"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else{
if(all(str_detect(gene, "_at")==T)) { message(paste(names(Metadata[i]), " gene probes as Illumina Microarray Probes"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(length(which(gene%in%geneAnnot$GeneSymbol))>1)   {
message(paste(names(Metadata[i]), " gene probes as genes Symbols"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(gene%in%geneAnnot)) { message(paste(names(Metadata[i]), " gene probes manualy entered from published data."))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
}
}}}}}}}
message("-------------------------")
if(length(c)>0){ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")}
mm =  which(attributes(Metadata)$Data.Type=="Count")
if(length(ccc)>0){  message(paste("Checking Common Patients from", names(Metadata)[c[1]] ,"in other Cleaned Samples or Patients annotations data."))
}else {
message(paste("Checking Common Patients from", names(Metadata)[c[1]] ,"in other Samples or Patients annotations data."))}
message("-------------------------")
if(attributes(Metadata)$Omics.type!="Single.Cell"){
for (i in c(c[-1],s)){
target = unique(Metadata[[i[1]]][,"patientsID"])
if(length(which(PpID %in% as.matrix(Metadata[[i[1]]])))==length(PpID)){message(paste(MetaDataN[i]), " : PASS") }
if(length(which(PpID %in% as.matrix(Metadata[[i[1]]])))<length(PpID)){
message(paste(MetaDataN[i]), " : FAIL")
message(paste("patientsID not found in ", MetaDataN[i]," : "), paste0(na.omit(PpID[!PpID%in%target]),collapse = "; "))
}
}}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
for (i in c(c,s)){
message(paste0("patientsID from '", names(Metadata)[i],"', in CellsAnnotation object"))
tot=0
for (z in unique(Metadata[[i]][,"patientsID"])) {
if("patientsID" %in% colnames(Metadata[[cellannot[1]]]) ){ t = summary(str_detect(pattern = paste0(z,"\\b"),  Metadata[[cellannot[1]]][,"patientsID"]))["TRUE"][1]}else{
z = gsub("[[:punct:]]","-",z)
if(str_detect(pattern = paste0('[a-zA-Z]'),z)){ pattern = paste0(z,"-")}else {pattern=  paste0('[a-zA-Z]',z,"-")}
t = summary(str_detect(pattern = paste0(pattern,"\\b"), cellID))["TRUE"][1]
}
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
if(tot == 0){
message(paste("No patientsID found in",names(Metadata)[cellannot[1]], ". Looking in barcodes:"))
if(all(str_detect(pattern ="_", cellID))==F & all(str_detect(pattern = "-", cellID==T))){ cellID = gsub("-","_",cellID)}
for (z in unique(Metadata[[i]][,"patientsID"])) {
z = gsub("[[:punct:]]","-",z)
if(str_detect(pattern = paste0('[a-zA-Z]'),z)){ pattern = paste0(z,"-")}else {pattern=  paste0('[a-zA-Z]',z,"-")}
t = summary(str_detect(pattern = paste0(pattern,"\\b"),cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
}
message("Total = " , tot,"/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")}
if(length(ccc)>0){ p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")}else{
p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
}
if(length(p)>0){
for (i in p){
message(paste0("samplesID from '", names(Metadata)[i],"', in CellsAnnotation object :"))
tot=0
for (z in Metadata[[i]][,"samplesID"]) {
if("samplesID" %in% colnames( Metadata[[cellannot[1]]]) ){ t = summary(str_detect(pattern = paste0("\\b",
gsub("[[:punct:]]","_",z)
,"\\b"),
gsub("[[:punct:]]","_",
Metadata[[cellannot[1]]][,"samplesID"])))["TRUE"][1]}else{
#ici
z = gsub("[[:punct:]]","-",z)
if(str_detect(pattern = paste0('[a-zA-Z]'),z)){ pattern = paste0(z,"-")}else { pattern =  paste0('[a-zA-Z]',z,"-")}
t = summary(str_detect(pattern = paste0(pattern,"\\b"), cellID))["TRUE"][1]}
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
if(tot == 0){
message(paste("No samplesID found in",names(Metadata)[cellannot[1]], ". Looking in barcodes:"))
if(all(str_detect(pattern ="_", cellID))==F & all(str_detect(pattern = "-", cellID==T))){ cellID = gsub("-","_",cellID)}
for (z in unique(Metadata[[i]][,"samplesID"])) {
z = gsub("[[:punct:]]","-",z)
if(str_detect(pattern = paste0('[a-zA-Z]'),z)){ pattern = paste0(z,"-")}else {pattern=  paste0('[a-zA-Z]',z,"-")}
t = summary(str_detect(pattern = paste0(pattern,"\\b"),cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
}
message("Total = " , tot, "/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")
}
}
}
}
CheckMeta(Metadata)
#Step 5 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
View(PL)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
CellsLexic = CL,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Clinic", #no samples annot present, just set to the same PatientAnnot name
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
CheckMeta(Metadata)
View(Metadata)
Metadata[["Patients.Clinic"]]
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setSamplesID.Column = "sample",
setPatientID.Column ="patient" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
CheckMeta(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
CellsLexic = CL,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Clinic", #no samples annot present, just set to the same PatientAnnot name
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
CheckMeta(Metadata)
View(Metadata)
Metadata[["Patients.Clinic"]]
CheckMeta(Metadata)
l <-length(names(Metadata))
MetaDataN <- names(Metadata)
m <- which(attributes(Metadata)$Data.Type=="Count")
g =  which(attributes(Metadata)$Data.Type=="geneAnnot")[1]
c= NULL
if("Clinic" %in%attributes(Metadata)$Data.Type){
c <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="Yes")
if(length(c2)>0){c=c2
if("samplesID" %in% colnames(Metadata[[c[1]]])){
if(!all(is.na(Metadata[[c[1]]][,"samplesID"]))){
PsID = Metadata[[c[1]]][,"samplesID"]
PsID = unique(unlist(strsplit(PsID, ";")))}} else{PsID=NULL}}
if(length(c)==0){stop("A Patients' Clinical data must be loaded")}
PpID <- unique(Metadata[[c[1]]][,"patientsID"])
}
PsID
project <- "Test"
path <- "E:/DataBase"# Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)
samannot %>% df2proposedCSVstruct(paste0(Processpath(DATASET),"/AFUGEMSamannotStructRaw.xlsx"))
clin %>% df2proposedCSVstruct(paste0(Processpath(DATASET),"/AFUGEMPatannotStructRaw.xlsx"))
?unlockBinding
packageVersion("PublicDataNorm")
check_github_sha <- function(username, repo, host = "api.github.com") {
if (Sys.getenv("GITHUB_PAT") == "") {
stop('Make sure that you have set a "Personal Acess Token" (PAT) named GITHUB_PAT in .Renviron')
}
remote_obj <- remote <- list(
host = host,
package = NULL,
repo = repo,
subdir = NULL,
username = username,
ref = "HEAD",
sha = NULL,
auth_token = Sys.getenv("GITHUB_PAT")
)
remote_obj <- structure(remote_obj, format = format, class = c("github_remote", "remote"))
remote_sha <- remotes::remote_sha(remote_obj)
local_sha <- utils::packageDescription(repo, lib.loc = .libPaths())
if(!"GithubSHA1" %in% names(local_sha)){
cat(paste0("\033[0;", 33, "m", paste0(repo, "is not installed from github. Probably using build in Rstudio or similar"), "\033[0m", "\n"))
} else {
if (remote_sha != local_sha["GithubSHA1"]) {
cat(paste0("\033[0;", 31, "m", paste0("NOTE: there is a new version of ", repo, " available"), "\033[0m", "\n"))
} else {
cat(paste0("\033[0;", 32, "m", paste0("you have the latest version of ", repo), "\033[0m", "\n"))
}
}
}
check_github_sha(username = "JRAnalytics", repo = "PublicDataNorm")
check_github <- function(pkg) {
check_github_gitlab(pkg, "github")
}
check_github_gitlab <- function(pkg, repo="github") {
installed_version <- tryCatch(packageVersion(gsub(".*/", "", pkg)), error=function(e) NA)
if(repo == "github") {
url <- paste0("https://raw.githubusercontent.com/", pkg, "/master/DESCRIPTION")
} else if (repo == "gitlab") {
url <- paste0("https://gitlab.com/", pkg, "/raw/master/DESCRIPTION")
} else {
stop("only work with github and gitlab")
}
x <- readLines(url)
remote_version <- gsub("Version:\\s*", "", x[grep('Version:', x)])
res <- list(package = pkg,
installed_version = installed_version,
latest_version = remote_version,
up_to_date = NA)
if (is.na(installed_version)) {
message(paste("##", pkg, "is not installed..."))
} else {
if (remote_version > installed_version) {
msg <- paste("##", pkg, "is out of date...")
message(msg)
res$up_to_date <- FALSE
} else if (remote_version == installed_version) {
message("package is up-to-date devel version")
res$up_to_date <- TRUE
}
}
return(res)
}
check_github("JRAnalytics/PublicDataNorm")
# Startup message obtained as
# > figlet -f slant MCLUST
msg <- c(paste0(
" PublicDataNorm version ",
packageVersion("PublicDataNorm")))
msg
ver = .check_github("JRAnalytics/PublicDataNorm")
.check_github("JRAnalytics/PublicDataNorm")
.check_github("JRAnalytics/PublicDataNorm")
check_github("JRAnalytics/PublicDataNorm")
# Startup message obtained as
# > figlet -f slant MCLUST
msg <- c(paste0(
"PublicDataNorm version ",
packageVersion("PublicDataNorm")))
ver = check_github("JRAnalytics/PublicDataNorm")
# Startup message obtained as
# > figlet -f slant MCLUST
msg <- c(paste0(
"PublicDataNorm version ",
packageVersion("PublicDataNorm")))
ver = check_github("JRAnalytics/PublicDataNorm")
#' check_github
#'
#' @param pkg  package
#'
#' @return message
#' @export
#'
#' @examples "non"
check_github <- function(pkg) {
check_github_gitlab(pkg, "github")
}
#' check_github_gitlab
#'
#' @param pkg package
#' @param repo
#'
#' @return message
#' @export
#'
#' @examples "non"
check_github_gitlab <- function(pkg, repo="github") {
installed_version <- tryCatch(packageVersion(gsub(".*/", "", pkg)), error=function(e) NA)
if(repo == "github") {
url <- paste0("https://raw.githubusercontent.com/", pkg, "/master/DESCRIPTION")
} else if (repo == "gitlab") {
url <- paste0("https://gitlab.com/", pkg, "/raw/master/DESCRIPTION")
} else {
stop("only work with github and gitlab")
}
x <- readLines(url)
remote_version <- gsub("Version:\\s*", "", x[grep('Version:', x)])
res <- list(package = pkg,
installed_version = installed_version,
latest_version = remote_version,
up_to_date = NA)
if (is.na(installed_version)) {
message(paste("##", pkg, "is not installed..."))
} else {
if (remote_version > installed_version) {
msg <- paste("##", pkg, "is out of date...")
message(msg)
res$up_to_date <- FALSE
} else if (remote_version == installed_version) {
message("package is up-to-date devel version")
res$up_to_date <- TRUE
}
}
return(res)
}
check_github("JRAnalytics/PublicDataNorm")
ver = check_github("JRAnalytics/PublicDataNorm")
ver = suppressMessages(check_github("JRAnalytics/PublicDataNorm"))
if(ver$up_to_date==T){ msg = paste(msg, "Package up to date")}else{
msg = paste(msg, "\nJRAnalytics/PublicDataNorm repos version", ver$latest_version,
"\n please uptdate package using :\n",
"devtools::install_github('JRAnalytics/PublicDataNorm', upgrade = 'always')")
}
msg
# Startup message obtained as
# > figlet -f slant MCLUST
msg <- c(paste0(
"PublicDataNorm version: ",
packageVersion("PublicDataNorm"),"."))
ver = suppressMessages(check_github("JRAnalytics/PublicDataNorm"))
if(ver$up_to_date==T){ msg = paste(msg, "Package up to date")}else{
msg = paste(msg, "\nJRAnalytics/PublicDataNorm repos version", ver$latest_version,
"\n please uptdate package using :\n",
"devtools::install_github('JRAnalytics/PublicDataNorm', upgrade = 'always')")
}
msg
detach(PublicDataNorm)
detach("PublicDataNorm")
detach("package:PublicDataNorm", unload = TRUE)
library(PublicDataNorm)
warnings()
?packageStartupMessage
?invisible
detach("package:PublicDataNorm", unload = TRUE)
library(PublicDataNorm)
usethis::use_version()
detach("package:PublicDataNorm", unload = TRUE)
library(PublicDataNorm)
