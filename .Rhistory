message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j]))
filename <- paste0(list.files.path$Propject.VerifiedDataset,"/",project,".",names(MetaData)[j],".csv")
z <- cbind( MetaData[[j]])
write.csv(z,row.names = F ,file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else{
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j]))
message("Samples' pheno exported file exist. Loading to compare if different to Metaobject Version")
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
df <- df[str_detect(df$Filenames, names(MetaData)[j]),]
filepath <- rownames(df)[which.max(df$mtime)]
loaded.file <- as.data.frame(data.table::fread(filepath, na.strings = "NA"))
loaded.file <- as.data.frame(loaded.file)
loaded.file <- apply(loaded.file, MARGIN = 2,function(x) as.character(x))
loaded.file <- as.data.frame(loaded.file)
rownames(loaded.file) <- loaded.file[,1]
source.file <- apply(MetaData[[j]], MARGIN = 2,function(x) as.character(x))
source.file <- as.data.frame(source.file)
rownames(source.file) <- source.file[,1]
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
if(!dplyr::all_equal(loaded.file,source.file)==T) { #loaded.file ans MetaData[[i]] are not the same data.frame
message(paste(names(MetaData)[j], "data are not the same original data. A new version will be created"))
filename2 <- unlist(lapply(str_split(filename,".csv"),"[[",1))
extension <- unlist(lapply(str_split(filename,".csv"),"[[",2))
version <- str_extract(filename2,"V[0-9]*")
Vnumber <- as.numeric(str_extract(version,"([0-9]+).*$"))+1
if(is.na(Vnumber)) {
Vnumber = 1
message(paste(filename, " already exist. Adding Version to the latest exportedfile"))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename2,".V",Vnumber,".csv",extension)
file.rename(from = filepath, to = filepath2)
}
#adding version file history
if(Vnumber==1){ Vnumber = 2}
message(paste0("Exporting ", count, " / ", object,"object: ",names(MetaData)[j], "V", Vnumber))
filename3 <- unlist(lapply(str_split(filename2,".V"),"[[",1))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename3,".V",Vnumber,".csv")
z <- cbind( MetaData[[j]])
write.csv(z,row.names = F ,file = filepath2)
message(paste("Compressing"))
R.utils::gzip(filepath2, destname=sprintf("%s.gz", filepath2), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else {
message(names(MetaData)[j]," is the same data frame as ",filename)
message("Will not be saved")}
}
} #for i in NBsamples
} # if( length(NB.Samples.Patients.pheno)!=0)
NB.Expression.Matrix <-  which(attributes(MetaData)$Data.Type=="Expression.Matrix")
if(length(NB.Expression.Matrix)!=0) {
for (j in NB.Expression.Matrix) {
LF <- list.files(list.files.path$Propject.VerifiedDataset)
lengthSTR <- length(LF[str_detect(LF,names(MetaData)[j])])
if(lengthSTR==0){
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j]))
filename <- paste0(list.files.path$Propject.VerifiedDataset,"/",project,".",names(MetaData)[j],".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[j]]), MetaData[[j]])
write.csv(z,row.names = F ,file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else{
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j]))
if( attributes(MetaData)$Raw.data[j]=="Yes"){ Raw = "Raw" } else { Raw = "Normalized"}
message(paste(Raw, attributes(MetaData)$Data.Type[j],"exported file exist. Loading to compare if different to Metaobject Version"))
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
df <- df[str_detect(df$Filenames, names(MetaData)[j]),]
filepath <- rownames(df)[which.max(df$mtime)]
loaded.file <- as.data.frame(data.table::fread(filepath, na.strings = "NA"))
loaded.file <- as.data.frame(loaded.file)
rownames(loaded.file) <- loaded.file[,1]
loaded.file <- loaded.file[,-1]
source.file <- as.data.frame(MetaData[[j]])
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
if(!dplyr::all_equal(loaded.file,source.file)==T) { #loaded.file ans MetaData[[i]] are not the same data.frame
message(paste(names(MetaData)[j], "data are not the same original data. A new version will be created"))
filename2 <- unlist(lapply(str_split(filename,".csv"),"[[",1))
extension <- unlist(lapply(str_split(filename,".csv"),"[[",2))
version <- str_extract(filename2,"V[0-9]*")
Vnumber <- as.numeric(str_extract(version,"([0-9]+).*$"))+1
if(is.na(Vnumber)) {
Vnumber = 1
message(paste(filename, " already exist. Adding Version to the latest exportedfile"))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename2,".V",Vnumber,".csv",extension)
file.rename(from = filepath, to = filepath2)
}
#adding version file history
if(Vnumber==1){ Vnumber = 2}
message(paste0("Exporting ", count, " / ", object,"object: ",names(MetaData)[j], "V", Vnumber))
filename3 <- unlist(lapply(str_split(filename2,".V"),"[[",1))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename3,".V",Vnumber,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[j]]), MetaData[[j]])
write.csv(z,row.names = F ,file = filepath2)
message(paste("Compressing"))
R.utils::gzip(filepath2, destname=sprintf("%s.gz", filepath2), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else {
message(names(MetaData)[j]," is the same data frame as ",filename)
message("Will not be saved")}
}
}
} # if(length(NB.Expression.Matrix)!=0)
NB.geneAnnot<-  which(attributes(MetaData)$Data.Type=="geneAnnotation.file")
if(length(NB.Expression.Matrix)!=0) {
for (j in NB.geneAnnot) {
LF <- list.files(list.files.path$Propject.VerifiedDataset)
lengthSTR <- length(LF[str_detect(LF,names(MetaData)[j])])
if(lengthSTR==0){
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j], "file"))
filename <- paste0(list.files.path$Propject.VerifiedDataset,"/",project,".",names(MetaData)[j],".csv")
z <- cbind(MetaData[[j]])
write.csv(z,row.names = F ,file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else{
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j], "file"))
message(paste(attributes(MetaData)$Data.Type[j],"exported file exist. Loading to compare if different to Metaobject Version"))
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
df <- df[str_detect(df$Filenames, names(MetaData)[j]),]
filepath <- rownames(df)[which.max(df$mtime)]
loaded.file <- as.data.frame(data.table::fread(filepath, na.strings = "NA"))
loaded.file <- as.data.frame(loaded.file)
loaded.file <- apply(loaded.file, MARGIN  = 2, FUN = function(x) as.character(x))
loaded.file <- as.data.frame(loaded.file)
rownames(loaded.file) <- loaded.file[,"EnsemblID"]
source.file <- as.data.frame(MetaData[[j]])
source.file <- apply(source.file, MARGIN = 2, FUN = function(x) as.character(x))
source.file <- as.data.frame(source.file)
rownames(source.file) <- source.file[,"EnsemblID"]
source.file$attributes <- NULL
loaded.file$attributes <- NULL
source.file$Entrez.id <- NULL
loaded.file$Entrez.id <- NULL
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
if(!dplyr::all_equal(loaded.file,source.file, ignore_col_order = T, ignore_row_order = T)==T) { #loaded.file ans MetaData[[i]] are not the same data.frame
message(paste(names(MetaData)[j], "data are not the same original data. A new version will be created"))
filename2 <- unlist(lapply(str_split(filename,".csv"),"[[",1))
extension <- unlist(lapply(str_split(filename,".csv"),"[[",2))
version <- str_extract(filename2,"V[0-9]*")
Vnumber <- as.numeric(str_extract(version,"([0-9]+).*$"))+1
if(is.na(Vnumber)) {
Vnumber = 1
message(paste(filename, " already exist. Adding Version to the latest exportedfile"))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename2,".V",Vnumber,".csv",extension)
file.rename(from = filepath, to = filepath2)
}
#adding version file history
if(Vnumber==1){ Vnumber = 2}
message(paste0("Exporting ", count, " / ", object,"object: ",names(MetaData)[j], "V", Vnumber))
filename3 <- unlist(lapply(str_split(filename2,".V"),"[[",1))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename3,".V",Vnumber,".csv")
z <- cbind( MetaData[[j]])
write.csv(z,row.names = F ,file = filepath2)
message(paste("Compressing"))
R.utils::gzip(filepath2, destname=sprintf("%s.gz", filepath2), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else {
message(names(MetaData)[j]," is the same data frame as ",filename)
message("Will not be saved")}
}
}} # if length(NB.geneAnnot)
}#function
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
project <- "Maurer"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path)
# if all are TRUE ; next step can be done
# Step 2 : Save Script in project.R file in the parent/project/Script folder. ex : parent/Maurer/Script/ScriptMaurer.R
###### By hand unfortunately for the first time
paste0(list.files.path$Script,"/Maurer/MaurerMake.R")==rstudioapi::getActiveDocumentContext()$path # Has to be TRUE
# Step 3.1 : Build meta object from 01RawData folder.
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,Raw = T,
local = T,path = list.files.path$Project.RawData,
name.local.file ="MaurerRaw.matrix.csv.gz",
name = "rawcount",force.replace = F
)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
head(Meta$rawcount.matrix[,1:5])
Meta$rawcount.matrix<- Meta$rawcount.matrix[,-1]  # First colonne, geneSymbols drop off.
###create LexicCLinic and SamplesOrPAtient objects to add or replace colnames of clinical data.
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "MaurerRaw.clinic",
force.replace = T,
merge = F,
name.local.file = "MaurerRaw.clinic.csv.gz")
attributes(Meta)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = list.files.path$Processes)
g
g
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/02Processes")
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/02Processes")
rownames(Meta$Patient.clinic)[123] <- "Bulk"
Meta$Patient.clinic[123,1] <- "Bulk"
attributes(Meta)
head(Meta$Sample.pheno)
nrow(Meta$Sample.pheno)
ncol(Meta$rawcount.matrix)
Meta <- AddExpressionMatrix(Metadata = Meta, local = T,query = NULL, name.local.file = "MaurerPublishedNormalizationTPM",
path = list.files.path$RawDataDump)
CheckMeta(Meta)
Meta <- AddgeneAnnot(Meta = Meta , gtf.file.dir =list.files.path$References ,
gtf.files = "gencode.v33.annotation.gtf.gz",
force.replace = F)
attributes(Meta)
CheckMeta(Meta) # can display number of common genesSymbols frome Raw or Normalized matrix in geneAnnotation file
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData a MetaData  data files
#' @param list.files.path dirpath
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path, project){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
count <- 0
object <- length(MetaData)+2
name <- names(MetaData)
message(paste("Exporting", object, "objects"))
if(!all(str_detect(toupper(names(MetaData)), "RAW.CLINIC")==F)) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","Raw.clinical data will not be exported"))
}
if(exists("LexicClinic", mode= "any" )) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","LexicClinic"))
if (file.exists(paste0(list.files.path$Project.Processes,"/",project,".Lexic.txt"))) {
#Delete file if it exists
file.remove(paste0(list.files.path$Project.Processes,"/",project,".Lexic.txt"))
}
LexicClinic <- lapply(LexicClinic, function(x) {c(x[1],x)}) #Mandatory to duplicated listName in the listed values.
lapply(LexicClinic, write, paste0(list.files.path$Project.Processes,"/",project,".Lexic.txt"), append=TRUE, ncolumns=1000 ) #write a ".txt" file without listNames
}
if(exists("SamplesOrPatients", mode= "any" )) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","SamplesOrPatients"))
write.table(SamplesOrPatients, file= paste0(list.files.path$Project.Processes,"/",project,"SamplesOrPatients.txt"),quote = F, sep = "\t", row.names = F)}
NB.Samples.Patients.pheno <-  which(attributes(MetaData)$Data.Type=="Clinical.data" & attributes(MetaData)$Raw.data=="No" )
if(length(NB.Samples.Patients.pheno)!=0) {
for (j in NB.Samples.Patients.pheno) {
LF <- list.files(list.files.path$Propject.VerifiedDataset)
lengthSTR <- length(LF[str_detect(LF,names(MetaData)[j])])
if(lengthSTR==0){
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j]))
filename <- paste0(list.files.path$Propject.VerifiedDataset,"/",project,".",names(MetaData)[j],".csv")
z <- cbind( MetaData[[j]])
write.csv(z,row.names = F ,file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else{
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j]))
message("Samples' pheno exported file exist. Loading to compare if different to Metaobject Version")
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
df <- df[str_detect(df$Filenames, names(MetaData)[j]),]
filepath <- rownames(df)[which.max(df$mtime)]
loaded.file <- as.data.frame(data.table::fread(filepath, na.strings = "NA"))
loaded.file <- as.data.frame(loaded.file)
loaded.file <- apply(loaded.file, MARGIN = 2,function(x) as.character(x))
loaded.file <- as.data.frame(loaded.file)
rownames(loaded.file) <- loaded.file[,1]
source.file <- apply(MetaData[[j]], MARGIN = 2,function(x) as.character(x))
source.file <- as.data.frame(source.file)
rownames(source.file) <- source.file[,1]
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
if(!dplyr::all_equal(loaded.file,source.file)==T) { #loaded.file ans MetaData[[i]] are not the same data.frame
message(paste(names(MetaData)[j], "data are not the same original data. A new version will be created"))
filename2 <- unlist(lapply(str_split(filename,".csv"),"[[",1))
extension <- unlist(lapply(str_split(filename,".csv"),"[[",2))
version <- str_extract(filename2,"V[0-9]*")
Vnumber <- as.numeric(str_extract(version,"([0-9]+).*$"))+1
if(is.na(Vnumber)) {
Vnumber = 1
message(paste(filename, " already exist. Adding Version to the latest exportedfile"))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename2,".V",Vnumber,".csv",extension)
file.rename(from = filepath, to = filepath2)
}
#adding version file history
if(Vnumber==1){ Vnumber = 2}
message(paste0("Exporting ", count, " / ", object,"object: ",names(MetaData)[j], "V", Vnumber))
filename3 <- unlist(lapply(str_split(filename2,".V"),"[[",1))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename3,".V",Vnumber,".csv")
z <- cbind( MetaData[[j]])
write.csv(z,row.names = F ,file = filepath2)
message(paste("Compressing"))
R.utils::gzip(filepath2, destname=sprintf("%s.gz", filepath2), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else {
message(names(MetaData)[j]," is the same data frame as ",filename)
message("Will not be saved")}
}
} #for i in NBsamples
} # if( length(NB.Samples.Patients.pheno)!=0)
NB.Expression.Matrix <-  which(attributes(MetaData)$Data.Type=="Expression.Matrix")
if(length(NB.Expression.Matrix)!=0) {
for (j in NB.Expression.Matrix) {
LF <- list.files(list.files.path$Propject.VerifiedDataset)
lengthSTR <- length(LF[str_detect(LF,names(MetaData)[j])])
if(lengthSTR==0){
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j]))
filename <- paste0(list.files.path$Propject.VerifiedDataset,"/",project,".",names(MetaData)[j],".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[j]]), MetaData[[j]])
write.csv(z,row.names = F ,file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else{
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j]))
if( attributes(MetaData)$Raw.data[j]=="Yes"){ Raw = "Raw" } else { Raw = "Normalized"}
message(paste(Raw, attributes(MetaData)$Data.Type[j],"exported file exist. Loading to compare if different to Metaobject Version"))
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
df <- df[str_detect(df$Filenames, names(MetaData)[j]),]
filepath <- rownames(df)[which.max(df$mtime)]
loaded.file <- as.data.frame(data.table::fread(filepath, na.strings = "NA"))
loaded.file <- as.data.frame(loaded.file)
rownames(loaded.file) <- loaded.file[,1]
loaded.file <- loaded.file[,-1]
source.file <- as.data.frame(MetaData[[j]])
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
if(!dplyr::all_equal(loaded.file,source.file)==T) { #loaded.file ans MetaData[[i]] are not the same data.frame
message(paste(names(MetaData)[j], "data are not the same original data. A new version will be created"))
filename2 <- unlist(lapply(str_split(filename,".csv"),"[[",1))
extension <- unlist(lapply(str_split(filename,".csv"),"[[",2))
version <- str_extract(filename2,"V[0-9]*")
Vnumber <- as.numeric(str_extract(version,"([0-9]+).*$"))+1
if(is.na(Vnumber)) {
Vnumber = 1
message(paste(filename, " already exist. Adding Version to the latest exportedfile"))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename2,".V",Vnumber,".csv",extension)
file.rename(from = filepath, to = filepath2)
}
#adding version file history
if(Vnumber==1){ Vnumber = 2}
message(paste0("Exporting ", count, " / ", object,"object: ",names(MetaData)[j], "V", Vnumber))
filename3 <- unlist(lapply(str_split(filename2,".V"),"[[",1))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename3,".V",Vnumber,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[j]]), MetaData[[j]])
write.csv(z,row.names = F ,file = filepath2)
message(paste("Compressing"))
R.utils::gzip(filepath2, destname=sprintf("%s.gz", filepath2), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else {
message(names(MetaData)[j]," is the same data frame as ",filename)
message("Will not be saved")}
}
}
} # if(length(NB.Expression.Matrix)!=0)
NB.geneAnnot<-  which(attributes(MetaData)$Data.Type=="geneAnnotation.file")
if(length(NB.Expression.Matrix)!=0) {
for (j in NB.geneAnnot) {
LF <- list.files(list.files.path$Propject.VerifiedDataset)
lengthSTR <- length(LF[str_detect(LF,names(MetaData)[j])])
if(lengthSTR==0){
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j], "file"))
filename <- paste0(list.files.path$Propject.VerifiedDataset,"/",project,".",names(MetaData)[j],".csv")
z <- cbind(MetaData[[j]])
write.csv(z,row.names = F ,file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else{
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j], "file"))
message(paste(attributes(MetaData)$Data.Type[j],"exported file exist. Loading to compare if different to Metaobject Version"))
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
df <- df[str_detect(df$Filenames, names(MetaData)[j]),]
filepath <- rownames(df)[which.max(df$mtime)]
loaded.file <- as.data.frame(data.table::fread(filepath, na.strings = "NA"))
loaded.file <- as.data.frame(loaded.file)
loaded.file <- apply(loaded.file, MARGIN  = 2, FUN = function(x) as.character(x))
loaded.file <- as.data.frame(loaded.file)
rownames(loaded.file) <- loaded.file[,"EnsemblID"]
source.file <- as.data.frame(MetaData[[j]])
source.file <- apply(source.file, MARGIN = 2, FUN = function(x) as.character(x))
source.file <- as.data.frame(source.file)
rownames(source.file) <- source.file[,"EnsemblID"]
source.file$attributes <- NULL
loaded.file$attributes <- NULL
source.file$Entrez.id <- NULL
loaded.file$Entrez.id <- NULL
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
if(!dplyr::all_equal(loaded.file,source.file, ignore_col_order = T, ignore_row_order = T)==T) { #loaded.file ans MetaData[[i]] are not the same data.frame
message(paste(names(MetaData)[j], "data are not the same original data. A new version will be created"))
filename2 <- unlist(lapply(str_split(filename,".csv"),"[[",1))
extension <- unlist(lapply(str_split(filename,".csv"),"[[",2))
version <- str_extract(filename2,"V[0-9]*")
Vnumber <- as.numeric(str_extract(version,"([0-9]+).*$"))+1
if(is.na(Vnumber)) {
Vnumber = 1
message(paste(filename, " already exist. Adding Version to the latest exportedfile"))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename2,".V",Vnumber,".csv",extension)
file.rename(from = filepath, to = filepath2)
}
#adding version file history
if(Vnumber==1){ Vnumber = 2}
message(paste0("Exporting ", count, " / ", object,"object: ",names(MetaData)[j], "V", Vnumber))
filename3 <- unlist(lapply(str_split(filename2,".V"),"[[",1))
filepath2 <- paste0(list.files.path$Propject.VerifiedDataset,"/",filename3,".V",Vnumber,".csv")
z <- cbind( MetaData[[j]])
write.csv(z,row.names = F ,file = filepath2)
message(paste("Compressing"))
R.utils::gzip(filepath2, destname=sprintf("%s.gz", filepath2), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else {
message(names(MetaData)[j]," is the same data frame as ",filename)
message("Will not be saved")}
}
}} # if length(NB.geneAnnot)
}#function
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "Gao.PDX"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path)
Meta <- list()
list.files(list.files.path$Project.RawData)
Meta <- AddExpressionMatrix(Metadata = Meta,
local = T,path = list.files.path$Project.RawData,
name.local.file ="Gao.PDX.PublishedNormalized.matrix.txt",
name = "Gao.PublishedNormalized")
head(Meta[[1]][,1:5])
Meta[[1]] <- Meta[[1]][,-1]  # First colonne, geneSymbols drop off.
head(Meta[[1]][,1:5])
list.files(list.files.path$Project.RawData)
Meta <- AddClinic(Metadata = Meta, path = list.files.path$Project.RawData, name = "Gao.raw.clinic",
merge = F, name.local.file = NULL,mergeBy = NULL)
View(Meta)
Meta[["Gao.raw.clinic"]]
row.names(Meta$Gao.raw.clinic) <- Meta$Gao.raw.clinic$SamplesID
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = list.files.path$Processes)
?AddClinic
View(Meta)
Meta[["Sample.pheno"]]
attributes(Meta)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", Lexical_colnames_path = list.files.path)
attributes(Meta)
Meta$Sample.pheno$SamplePathologicalState <- "Tumor"
Meta$Sample.pheno$Disease <- "PDAC"
CheckMeta(Meta)
Meta$geneAnnotation <- data.table::fread(paste0(list.files.path$References,"/HG-U133_Plus_2.Affymetrix.Porbes.Annot.txt"),header = T)
Meta$geneAnnotation
View(Meta$geneAnnotation)
attributes(Meta)
attributes(Meta)$Data.Type <- c(attributes(Meta)$Data.Type, "geneAnnotation.file")
attributes(Meta)$Raw.data <- c(attributes(Meta)$Raw.data, "No")
rownames(Meta$geneAnnotation) <- Meta$geneAnnotation$ID
head(Meta$geneAnnotation)
CheckMeta(Meta) # can display number of common genesSymbols frome Raw or Normalized matrix in geneAnnotation file
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
View(Meta)
View(SamplesOrPatients)
View(Meta)
Meta[["geneAnnotation"]]
library(PublicDataNorm)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
library(PublicDataNorm)
project <- "Maurer"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path)
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,Raw = T,
local = T,path = list.files.path$Project.RawData,
name.local.file ="MaurerRaw.matrix.csv.gz",
name = "rawcount",force.replace = F
)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
head(Meta$rawcount.matrix[,1:5])
Meta$rawcount.matrix<- Meta$rawcount.matrix[,-1]  # First colonne, geneSymbols drop off.
Meta <- AddgeneAnnot(Meta = Meta , gtf.file.dir =list.files.path$References ,
gtf.files = "gencode.v33.annotation.gtf.gz",
force.replace = F)
attributes(Meta)
library(PublicDataNorm)
library(stringr)
