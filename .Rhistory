if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
PL<- lapply(x, `[`, -1)
attr(PL, "Lexic") = "Yes"
attr(PL, "Name") = "PatientsLexic"
return(PL)} else {    PL <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(PL) <- sapply(PL, `[[`, 1)
PL<- lapply(PL, `[`, -1)
attr(PL, "Lexic") = "Yes"
attr(PL, "Name") = "PatientsLexic"
return(PL)  }}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
} else {
SL <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
SL <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
} else {
SL <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)}
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
}}
if(exists("SL")){"YEs!"}
# DupItems = duplicated(toupper(names(Lexic)))
# if(!all(DupItems==F)){
#
#   DupItems = names(Lexic)[which(DupItems)]
#
#   message(paste("Duplicated Items '",DupItems,"' in lexic"))}
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
PL<- lapply(x, `[`, -1)
attr(PL, "Lexic") = "Yes"
attr(PL, "Name") = "PatientsLexic"
return(PL)} else {    PL <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(PL) <- sapply(PL, `[[`, 1)
PL<- lapply(PL, `[`, -1)
attr(PL, "Lexic") = "Yes"
attr(PL, "Name") = "PatientsLexic"
return(PL)  }}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
} else {
SL <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
SL <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
} else {
SL <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)}
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
}}
DupItems = duplicated(toupper(names(SL)))
if(!all(DupItems==F)){
DupItems = names(SL)[which(DupItems)]
stop(paste("Duplicated Items '",DupItems,"' in lexic"))}
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
PL = CreateLexic(Metadata,type = "PatientsLexic")
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "PatientsLexic"
return(SL)} else {    SL <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "PatientsLexic"
return(SL)  }}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
} else {
SL <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
SL <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
} else {
SL <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)}
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
}}
DupItems = duplicated(toupper(names(SL)))
if(!all(DupItems==F)){
DupItems = names(SL)[which(DupItems)]
stop(paste("Duplicated Items '",DupItems,"' in lexic"))}
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "PatientsLexic"
return(SL)} else {    SL <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "PatientsLexic"
return(SL)  }}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
} else {
SL <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
SL <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
} else {
SL <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)}
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
}}
DupItems = duplicated(toupper(names(SL)))
message("OK")
if(!all(DupItems==F)){
DupItems = names(SL)[which(DupItems)]
stop(paste("Duplicated Items '",DupItems,"' in lexic"))}
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
rm(CL, SL, PL)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
names(SL)
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "PatientsLexic"
return(Lexic)} else {    Lexic <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "PatientsLexic"
return(Lexic)  }}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "SamplesLexic"
return(Lexic)
} else {
Lexic <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "SamplesLexic"
return(Lexic)
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "CellsLexic"
return(Lexic)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
Lexic <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
} else {
Lexic <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)}
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "CellsLexic"
return(Lexic)
}}
DupItems = duplicated(toupper(names(Lexic)))
message("OK")
if(!all(DupItems==F)){
DupItems = names(Lexic)[which(DupItems)]
stop(paste("Duplicated Items '",DupItems,"' in lexic"))}
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "PatientsLexic"
} else {    Lexic <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "PatientsLexic"
}}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "SamplesLexic"
} else {
Lexic <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "SamplesLexic"
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "CellsLexic"
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
Lexic <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
} else {
Lexic <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)}
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "CellsLexic"
}}
DupItems = duplicated(toupper(names(Lexic)))
message("OK")
if(!all(DupItems==F)){
DupItems = names(Lexic)[which(DupItems)]
stop(paste("Duplicated Items '",DupItems,"' in lexic"))}
return(Lexic)
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
rm(CL, SL, PL)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
SamplesLog()
SamplesLog(Metadata*)
SamplesLog(Metadata)
SampleLog(Metadata)
PatientLog(Metadata)
View(PatientLog(Metadata))
version
usethis::use_version()
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(GEOquery)
library(Matrix)
project <- "Lee"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Clinic=getGEO('GSE132465',GSEMatrix=TRUE)[["GSE132465_series_matrix.txt.gz"]]@phenoData@data
Metadata <- CreateDataset(project,"E:/DataBase") %>%
AddClinicFromObject(object = Clinic,
name = "rawsam",
type = "Patients",#alway set to this
setSamplesID.Column="title",
setPatientID.Column="patient_id:ch1",
force.replace = T)%>%
AddExpressionMatrixSC(ExpressionMatrix ="GSE132465_GEO_processed_CRC_10X_natural_log_TPM_matrix.txt.gz" ,
Cell.file = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"GSE132465_GEO_processed_CRC_10X_cell_annotation.txt.gz"))),
Genes.file =NULL ,
setID.cellAnnotColumn = "Index" ,
name = "TPM")
gc()
head(Metadata$TPM)[,1:5]
Metadata$TPM$Index=NULL
CheckMeta(Metadata)
Metadata <- CreateDataset(project,"E:/DataBase") %>%
AddClinicFromObject(object = Clinic,
name = "rawsam",
type = "Patients",#alway set to this
setSamplesID.Column="title",
setPatientID.Column="patient_id:ch1",
force.replace = T)%>%
AddClinicFromObject(object = Clinic,
name = "rawsam2",
type = "Samples",#alway set to this
setSamplesID.Column="title",
setPatientID.Column="patient_id:ch1",
force.replace = T)%>%
AddExpressionMatrixSC(ExpressionMatrix ="GSE132465_GEO_processed_CRC_10X_natural_log_TPM_matrix.txt.gz" ,
Cell.file = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"GSE132465_GEO_processed_CRC_10X_cell_annotation.txt.gz"))),
Genes.file =NULL ,
setID.cellAnnotColumn = "Index" ,
name = "TPM")
gc()
head(Metadata$TPM)[,1:5]
Metadata$TPM$Index=NULL
CheckMeta(Metadata)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
CheckLexicDups(PL)
CheckLexicDups(SL)
CheckLexicDups(CL)
colnames(Clinic)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="rawsam",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = "rawsam",
SamplesExportname ="SamplesAnnot",
CellsLexic = CL,
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
CheckMeta(Metadata)
usethis::use_version()
library(PublicDataNorm)
detach(PublicDataNorm)
detach("PublicDataNorm")
detach("package:PublicDataNorm", unload = TRUE)
library(PublicDataNorm)
detach("package:PublicDataNorm", unload = TRUE)
usethis::use_version()
devtools::install_github("JRAnalytics/PublicDataNorm",
upgrade = "always")
