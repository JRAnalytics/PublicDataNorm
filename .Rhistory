Cells$CellsBarcode = gsub("[[:punct:]]","-", Cells$CellsBarcode)
}
if(inherits(setID.cellAnnotColumn,"numeric")){Cells$CellsBarcode = Cells[,setID.cellAnnotColumn]
Cells$CellsBarcode = gsub("[[:punct:]]","-", Cells$CellsBarcode)
}
}
if(is.null(rownames(dt))){
message(paste(ExpressionMatrix,"has no rownames A Genes.csv file may be associated in raw data directory."))}
if(!is.null(Genes.file)){
if(rlang::inherits_any(Genes.file, c("data.frame", "matrix"))){Genes =Genes.file }else {
if(inherits(Genes.file, "character")){
message(paste("Loading",Genes.file ))
Genes <- as.data.frame(data.table::fread(file.path(path,Genes.file), header = F))}
else {stop("Genes.file is not a character string or an environment object as data.frame or matrix.")}}
if(length(Genes[,1])==nrow(dt)){
rownames(dt) =  Genes[,1]
} else { stop(paste(Genes.file, "has not the same length as rows of expression matrix"))}
}
if(length(Metadata)>=1) {
l = length(Metadata)
if(!all(str_detect(names(Metadata),name))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Count")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned, "No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)} # Metadat >1
else {
Metadata$mat <-  dt
names(Metadata)[1] <- name
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c("Count")
attributes(Metadata)$Export <- "Yes"
attributes(Metadata)$Cleaned = c("No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)
} # Metadata = 0
}
Metadata = AddExpressionMatrixSC(Metadata = Metadata,
ExpressionMatrix = "count-matrix.txt",
Cell.file = NULL,
Genes.file = NULL,
name = "count")
!"CellsAnnot" %in% attributes(Metadata)
View(Metadata)
attributes(Metadata)
"CellsAnnot" %in% attributes(Metadata)
!"CellsAnnot" %in% attributes(Metadata)$Data.Type
"CellsAnnot" %in% attributes(Metadata)$Data.Type
#' @param force.replace set as F. T : replace an already object with the same name
#' @param setID.cellAnnotColumn  a character string or numeric : column in CellAnnot to fetch colnames from Count matrix.
#' @importFrom utils menu
#' @importFrom Matrix readMM
#' @import data.table
#' @import rlang
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddExpressionMatrixSC <- function(Metadata=NULL,
Cell.file=NULL,
Genes.file=NULL,
setID.cellAnnotColumn = NULL,
name,
ExpressionMatrix = NULL,
force.replace=F ) {
Omics.type = "Single.Cell"
path = Rawpath(Metadata)
if(is.null(Metadata)){stop("A Metadata object must be created with CreateDataset() function. See ?CreateDataset.")}
if(is.null(ExpressionMatrix)){stop("ExpressionMatrix must be a character string or an environement object.")}
if(!is.list(Metadata)){stop("Metadata should be a list.")}
if(is.null(attributes(Metadata)$Omics.type)){attributes(Metadata)$Omics.type=Omics.type}
if(!attributes(Metadata)$Omics.type==Omics.type){warning(paste("Omics.type is", Omics.type,"different than attributes(Metadata)$Omics.type",
attributes(Metadata)$Omics.type, "\nWill be replace"))
attributes(Metadata)$Omics.type = Omics.type
}
l <-length(names(Metadata))
if(inherits(ExpressionMatrix, "character")){
lf <- list.files(path)
if(length(lf)>1){print(c(message("There is more than one files in Dir :"),lf))}
if(all(str_detect(lf, ".rds|.txt|.csv|.tsv|.mtx", negate = FALSE)==F)){stop("No '*.rds' or '*.txt' or '*.csv' or '*.mtx' files in set directory. \n change path or add file")}
filepath <- paste(path,ExpressionMatrix,sep="/")
message(paste("Loading", ExpressionMatrix, "file"))
if(str_detect(ExpressionMatrix, ".rds", negate = FALSE)){
dt <- readRDS(filepath)}
else {
if(str_detect(ExpressionMatrix, ".txt", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
}  else {
if(str_detect(ExpressionMatrix, ".csv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
}else {
if(str_detect(ExpressionMatrix, ".tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
} else {
if(str_detect(ExpressionMatrix, ".mtx", negate = FALSE)){
dt <- readMM(filepath)
gc()
#dt = as.matrix(dt)
#gc()
} # mtx
}# tsv
}#csv
}#txt
}#rds
}#ExpressionMatrix caract
else {
if(rlang::inherits_any(ExpressionMatrix, c("data.frame", "matrix", "dgCMatrix" ,"dgTMatrix"))){
dt = ExpressionMatrix
}else { stop("Object set in ExpressionMatrix is not of class 'data.frame', 'matrix', 'dgCMatrix' ,'dgTMatrix'")}}
if("V1" %in% colnames(dt) ){dt$V1 = NULL}
if(!"CellsAnnot" %in% attributes(Metadata)$Data.Type){
if(!is.null(Cell.file)){
if(rlang::inherits_any(Cell.file, c("data.frame", "matrix"))){Cells = Cell.file} else {
if(inherits(Cell.file, "character")){
message(paste("Loading",Cell.file ))
Cells <- as.data.frame(data.table::fread(file.path(path,Cell.file)))
if("cell_name"%in%colnames(Cells)){
rownames(Cells)  = Cells$cell_name} else {
message("Cell.file has no colnames specified 'cell_name', the first collumn will be used.\n Please check file before adding cell file.")
Cells <- as.data.frame(data.table::fread(file.path(path,Cell.file),header = F))
rownames(Cells) = Cells[,1]}}else {stop("Cell.file is not a character string or an environment object as data.frame or matrix.")}}
if(!length(rownames(Cells))==length(colnames(dt))) {
message(paste("Cell.file has not the same number of cells than column of expression matrix."))
}
if(is.null(colnames(dt))){
message(paste(ExpressionMatrix,"has no colnames. A Cell.csv file may be associated in raw data directory."))
if(length(rownames(Cells))==dim(dt)[2]){
message("Fetching from file.")
colnames(dt) = Cells$CellsBarcode}
}
} else {  colnames(dt) = gsub("_","-", colnames(dt))}
if(is.null(setID.cellAnnotColumn)){stop("setID.cellAnnotColumn mus be specify")}
if(inherits(setID.cellAnnotColumn,"character")){
if(!setID.cellAnnotColumn %in%colnames(Cells) ){stop(paste(setID.cellAnnotColumn, "is not found in colnames of Cell.File"))}
Cells$CellsBarcode = Cells[,setID.cellAnnotColumn]
Cells$CellsBarcode = gsub("[[:punct:]]","-", Cells$CellsBarcode)
}
if(inherits(setID.cellAnnotColumn,"numeric")){Cells$CellsBarcode = Cells[,setID.cellAnnotColumn]
Cells$CellsBarcode = gsub("[[:punct:]]","-", Cells$CellsBarcode)
}
}
if(is.null(rownames(dt))){
message(paste(ExpressionMatrix,"has no rownames A Genes.csv file may be associated in raw data directory."))}
if(!is.null(Genes.file)){
if(rlang::inherits_any(Genes.file, c("data.frame", "matrix"))){Genes =Genes.file }else {
if(inherits(Genes.file, "character")){
message(paste("Loading",Genes.file ))
Genes <- as.data.frame(data.table::fread(file.path(path,Genes.file), header = F))}
else {stop("Genes.file is not a character string or an environment object as data.frame or matrix.")}}
if(length(Genes[,1])==nrow(dt)){
rownames(dt) =  Genes[,1]
} else { stop(paste(Genes.file, "has not the same length as rows of expression matrix"))}
}
if(length(Metadata)>=1) {
l = length(Metadata)
if(!all(str_detect(names(Metadata),name))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Count")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned, "No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)} # Metadat >1
else {
Metadata$mat <-  dt
names(Metadata)[1] <- name
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c("Count")
attributes(Metadata)$Export <- "Yes"
attributes(Metadata)$Cleaned = c("No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)
} # Metadata = 0
}
Metadata = AddExpressionMatrixSC(Metadata = Metadata,
ExpressionMatrix = "count-matrix.txt",
Cell.file = NULL,
Genes.file = NULL,
name = "count")
View(Metadata)
CheckMeta(Metadata)
colnames(Metadata$count[,1:5])
head(Metadata[["count"]][1:5])
#Step 3 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
PL = addSeveralKeysToLexic(lexic = PL,vector = c("age"="Age(y/o)",
"sex"="Gender",
"disease" ="pathologic diagnoses",
"pTNM" = "TNM Classification",
"stage" ="Staging",
"Tissue.type" = "Tissue") )
CL = addSeveralKeysToLexic(lexic = CL,vector = c("cellSubtype"="cluster",
"samplesID" = "samplesID" ,
"samplePathologicalState"="Malgignant" ))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
CellsLexic = CL,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["Cells.Annotation"]]
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
CellsLexic = CL,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
head(Metadata$Cells.Annotation)
head(Metadata$CellsAnnot)
CheckMeta(Metadata)
colnames(Metadata$count[,1:5])
!"CellsAnnot" %in% attributes(Metadata)$Data.Type
#' @param force.replace set as F. T : replace an already object with the same name
#' @param setID.cellAnnotColumn  a character string or numeric : column in CellAnnot to fetch colnames from Count matrix.
#' @importFrom utils menu
#' @importFrom Matrix readMM
#' @import data.table
#' @import rlang
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddExpressionMatrixSC <- function(Metadata=NULL,
Cell.file=NULL,
Genes.file=NULL,
setID.cellAnnotColumn = NULL,
name,
ExpressionMatrix = NULL,
force.replace=F ) {
Omics.type = "Single.Cell"
path = Rawpath(Metadata)
if(is.null(Metadata)){stop("A Metadata object must be created with CreateDataset() function. See ?CreateDataset.")}
if(is.null(ExpressionMatrix)){stop("ExpressionMatrix must be a character string or an environement object.")}
if(!is.list(Metadata)){stop("Metadata should be a list.")}
if(is.null(attributes(Metadata)$Omics.type)){attributes(Metadata)$Omics.type=Omics.type}
if(!attributes(Metadata)$Omics.type==Omics.type){warning(paste("Omics.type is", Omics.type,"different than attributes(Metadata)$Omics.type",
attributes(Metadata)$Omics.type, "\nWill be replace"))
attributes(Metadata)$Omics.type = Omics.type
}
l <-length(names(Metadata))
if(inherits(ExpressionMatrix, "character")){
lf <- list.files(path)
if(length(lf)>1){print(c(message("There is more than one files in Dir :"),lf))}
if(all(str_detect(lf, ".rds|.txt|.csv|.tsv|.mtx", negate = FALSE)==F)){stop("No '*.rds' or '*.txt' or '*.csv' or '*.mtx' files in set directory. \n change path or add file")}
filepath <- paste(path,ExpressionMatrix,sep="/")
message(paste("Loading", ExpressionMatrix, "file"))
if(str_detect(ExpressionMatrix, ".rds", negate = FALSE)){
dt <- readRDS(filepath)}
else {
if(str_detect(ExpressionMatrix, ".txt", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
}  else {
if(str_detect(ExpressionMatrix, ".csv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
}else {
if(str_detect(ExpressionMatrix, ".tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
} else {
if(str_detect(ExpressionMatrix, ".mtx", negate = FALSE)){
dt <- readMM(filepath)
gc()
#dt = as.matrix(dt)
#gc()
} # mtx
}# tsv
}#csv
}#txt
}#rds
}#ExpressionMatrix caract
else {
if(rlang::inherits_any(ExpressionMatrix, c("data.frame", "matrix", "dgCMatrix" ,"dgTMatrix"))){
dt = ExpressionMatrix
}else { stop("Object set in ExpressionMatrix is not of class 'data.frame', 'matrix', 'dgCMatrix' ,'dgTMatrix'")}}
if("V1" %in% colnames(dt) ){dt$V1 = NULL}
if(!"CellsAnnot" %in% attributes(Metadata)$Data.Type){
if(!is.null(Cell.file)){
if(rlang::inherits_any(Cell.file, c("data.frame", "matrix"))){Cells = Cell.file} else {
if(inherits(Cell.file, "character")){
message(paste("Loading",Cell.file ))
Cells <- as.data.frame(data.table::fread(file.path(path,Cell.file)))
if("cell_name"%in%colnames(Cells)){
rownames(Cells)  = Cells$cell_name} else {
message("Cell.file has no colnames specified 'cell_name', the first collumn will be used.\n Please check file before adding cell file.")
Cells <- as.data.frame(data.table::fread(file.path(path,Cell.file),header = F))
rownames(Cells) = Cells[,1]}}else {stop("Cell.file is not a character string or an environment object as data.frame or matrix.")}}
if(!length(rownames(Cells))==length(colnames(dt))) {
message(paste("Cell.file has not the same number of cells than column of expression matrix."))
}
if(is.null(colnames(dt))){
message(paste(ExpressionMatrix,"has no colnames. A Cell.csv file may be associated in raw data directory."))
if(length(rownames(Cells))==dim(dt)[2]){
message("Fetching from file.")
colnames(dt) = Cells$CellsBarcode}
}
} else {  colnames(dt) = gsub("_","-", colnames(dt))}
if(is.null(setID.cellAnnotColumn)){stop("setID.cellAnnotColumn mus be specify")}
if(inherits(setID.cellAnnotColumn,"character")){
if(!setID.cellAnnotColumn %in%colnames(Cells) ){stop(paste(setID.cellAnnotColumn, "is not found in colnames of Cell.File"))}
Cells$CellsBarcode = Cells[,setID.cellAnnotColumn]
Cells$CellsBarcode = gsub("[[:punct:]]","-", Cells$CellsBarcode)
}
if(inherits(setID.cellAnnotColumn,"numeric")){Cells$CellsBarcode = Cells[,setID.cellAnnotColumn]
Cells$CellsBarcode = gsub("[[:punct:]]","-", Cells$CellsBarcode)
}
} else{colnames(dt) = gsub("_","-", colnames(dt))}
if(is.null(rownames(dt))){
message(paste(ExpressionMatrix,"has no rownames A Genes.csv file may be associated in raw data directory."))}
if(!is.null(Genes.file)){
if(rlang::inherits_any(Genes.file, c("data.frame", "matrix"))){Genes =Genes.file }else {
if(inherits(Genes.file, "character")){
message(paste("Loading",Genes.file ))
Genes <- as.data.frame(data.table::fread(file.path(path,Genes.file), header = F))}
else {stop("Genes.file is not a character string or an environment object as data.frame or matrix.")}}
if(length(Genes[,1])==nrow(dt)){
rownames(dt) =  Genes[,1]
} else { stop(paste(Genes.file, "has not the same length as rows of expression matrix"))}
}
if(length(Metadata)>=1) {
l = length(Metadata)
if(!all(str_detect(names(Metadata),name))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Count")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned, "No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)} # Metadat >1
else {
Metadata$mat <-  dt
names(Metadata)[1] <- name
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c("Count")
attributes(Metadata)$Export <- "Yes"
attributes(Metadata)$Cleaned = c("No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)
} # Metadata = 0
}
# Step 1
Metadata <-Metadata %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "all_celltype.txt",
name = "CellsAnnot",
type = "Cells",
setCellsBarcode.Column ="cell_name") %>%
AddClinicFromFile(
ClinicFile = "Clinic.Peng.Published.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="Number",
setSamplesID.Column="Number" )
Metadata$Clinic$samplesID = unlist(lapply(str_split(rownames(Metadata$Clinic),"-"), "[[",2))
Metadata$Clinic$patientsID = as.character(tidyr::extract_numeric(Metadata$Clinic$samplesID))
Metadata$Clinic$Tissue = ifelse(str_detect( rownames(Metadata$Clinic), "N"), "Normal", "Tumoral")
rownames(Metadata$Clinic) = Metadata$Clinic$samplesID
Metadata$CellsAnnot$Malgignant = ifelse(str_detect(Metadata$CellsAnnot$cell_name, "N"), "Normal", "Tumoral")
Metadata$CellsAnnot$CellsBarcode = gsub("_","-", Metadata$CellsAnnot$CellsBarcode)
Metadata$CellsAnnot$samplesID = unlist(lapply(str_split(Metadata$CellsAnnot$CellsBarcode,"-"), "[[",1))
# Step 1
Metadata <-CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "all_celltype.txt",
name = "CellsAnnot",
type = "Cells",
setCellsBarcode.Column ="cell_name") %>%
AddClinicFromFile(
ClinicFile = "Clinic.Peng.Published.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="Number",
setSamplesID.Column="Number" )
Metadata$Clinic$samplesID = unlist(lapply(str_split(rownames(Metadata$Clinic),"-"), "[[",2))
Metadata$Clinic$patientsID = as.character(tidyr::extract_numeric(Metadata$Clinic$samplesID))
Metadata$Clinic$Tissue = ifelse(str_detect( rownames(Metadata$Clinic), "N"), "Normal", "Tumoral")
rownames(Metadata$Clinic) = Metadata$Clinic$samplesID
Metadata$CellsAnnot$Malgignant = ifelse(str_detect(Metadata$CellsAnnot$cell_name, "N"), "Normal", "Tumoral")
Metadata$CellsAnnot$CellsBarcode = gsub("_","-", Metadata$CellsAnnot$CellsBarcode)
Metadata$CellsAnnot$samplesID = unlist(lapply(str_split(Metadata$CellsAnnot$CellsBarcode,"-"), "[[",1))
Metadata$CellsAnnot$patientsID = as.character(tidyr::extract_numeric(Metadata$CellsAnnot$samplesID))
head(Metadata$Clinic)
attributes(Metadata)
Metadata = AddExpressionMatrixSC(Metadata = Metadata,
ExpressionMatrix = "count-matrix.txt",
Cell.file = NULL,
Genes.file = NULL,
name = "count")
gc()
head(Metadata[["count"]][1:5])
attributes(Metadata)
Metadata$count$V1=NULL
colnames(Metadata$count[,1:5])
CheckMeta(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
CellsLexic = CL,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
CheckMeta(Metadata)
View(Metadata)
CheckMeta(Metadata)
View(Metadata)
Metadata$SamplesAnnot$patientsID
Metadata$SamplesAnnot$samplesID
