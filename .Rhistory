filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(MetaData)[j],".V", Vnumber2)
if(attributes(MetaData)$Omics.type=="Single.Cell"){
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(MetaData)[j],".V", Vnumber2, ".mtx")
if(!"geneAnnot"%in%attributes(MetaData)$Data.Type){
filename.genes <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".GenesInfo",".V", Vnumber2, ".csv")}
}
if(attributes(MetaData)$Omics.type!="Single.Cell") {write.table(z,row.names = F ,file = paste0(filename,".csv"), sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)}
if(attributes(MetaData)$Omics.type=="Single.Cell") {
if(!"geneAnnot"%in%attributes(MetaData)$Data.Type){
write.table(rownames(MetaData[[j]]),row.names = F ,file = filename.genes, sep = "\t")}
if(!class(MetaData[[j]])[1]=="dgCMatrix"){MetaData[[j]] = as.matrix(MetaData[[j]]) }
writeMM(Matrix(MetaData[[j]], sparse = T),file = paste0(filename,".mtx"))
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}
}
} else{
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j]))
message(paste(names(MetaData)[j],"exported file exist. Versionning data."))
df <- file.info(list.files(list.files.path$Project.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
df <- df[str_detect(df$Filenames, names(MetaData)[j]),]
filepath <- rownames(df)[which.max(df$mtime)]
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
if(attributes(MetaData)$Omics.type!="Single.Cell") {
filename2 <- unlist(lapply(str_split(filename,".csv"),"[[",1))
extension <- unlist(lapply(str_split(filename,".csv"),"[[",2))}
if(attributes(MetaData)$Omics.type=="Single.Cell") {
filename2 <- unlist(lapply(str_split(filename,".mtx"),"[[",1))
extension <- unlist(lapply(str_split(filename,".mtx"),"[[",2))}
if(is.na(Vnumber)) {
Vnumber2 = 1
if(attributes(MetaData)$Omics.type!="Single.Cell") {
filepath2 <- paste0(list.files.path$Project.VerifiedDataset,"/",filename2,".V",Vnumber2,".csv",extension)
file.rename(from = filepath, to = filepath2)
}
if(attributes(MetaData)$Omics.type=="Single.Cell") {
filepath2 <- paste0(list.files.path$Project.VerifiedDataset,"/",filename2,".V",Vnumber2,".mtx",extension)
file.rename(from = filepath, to = filepath2)
if(!"geneAnnot"%in%attributes(MetaData)$Data.Type){
message(paste(project, "Single cell GenesInfo exported file exist. Versionning data."))
file.rename(from =  paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(MetaData)[j],".GenesInfo.csv"),
to = paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(MetaData)[j],".GenesInfo",".V", Vnumber2, ".csv") )}
}
}
#adding version file history
if(!is.null(Vnumber) & !is.na(Vnumber)){Vnumber2 = Vnumber }
if(Vnumber2==1){ Vnumber2 = 2}
message(paste0("Exporting ", count, " / ", object," object: ",names(MetaData)[j]))
filename3 <- unlist(lapply(str_split(filename2,".V"),"[[",1))
filepath2 <- paste0(list.files.path$Project.VerifiedDataset,"/",filename3,".V",Vnumber2,".csv")
z <- try(cbind("GeneSymbol" = rownames(MetaData[[j]]), MetaData[[j]]),silent = T)
if(attributes(MetaData)$Omics.type=="Single.Cell"){
z=  MetaData[[j]]
filepath2 <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(MetaData)[j],".V", Vnumber2, ".mtx")
if(!"geneAnnot"%in%attributes(MetaData)$Data.Type){
filename.genes <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(MetaData)[j],".GenesInfo",".V", Vnumber2, ".csv")}
}
if(attributes(MetaData)$Omics.type!="Single.Cell") { write.table(z,row.names = F ,file = filepath2,sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filepath2, destname=sprintf("%s.gz", filepath2), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)}
if(attributes(MetaData)$Omics.type=="Single.Cell") {
count <- count+1
message("-------------------------------------------------")
if(!"geneAnnot"%in%attributes(MetaData)$Data.Type){
message(paste("Exporting", count, "/", object,"object: ","GeneInfo", "file"))
write.table(rownames(MetaData[[j]]),row.names = F ,col.names = F,file = filename.genes, sep = "\t")
message("-------------------------------------------------")}
if(!class(MetaData[[j]])[1]=="dgCMatrix"){MetaData[[j]] = as.matrix(MetaData[[j]]) }
writeMM(Matrix(MetaData[[j]], sparse = T),file = filepath2)
message(paste("Compressing"))
R.utils::gzip(filepath2, destname=sprintf("%s.gz", filepath2), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}
}
}
} # if(length(NB.Count)!=0)
NB.geneAnnot<-  which(attributes(MetaData)$Data.Type=="geneAnnot")
if(length(NB.Count)!=0) {
for (j in NB.geneAnnot) {
LF <- list.files(list.files.path$Project.VerifiedDataset)
lengthSTR <- length(LF[str_detect(LF,names(MetaData)[j])])
if(lengthSTR==0){
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j], "file"))
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(MetaData)[j],".csv")
z <- cbind(MetaData[[j]])
if(is.na(Vnumber)| is.null(Vnumber)){
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)} else {
if(is.na(Vnumber)) {Vnumber2 = 1}
if(Vnumber2==1){ Vnumber2 = 2}
if(!is.null(Vnumber) & !is.na(Vnumber)){Vnumber2 = Vnumber }
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(MetaData)[j],".V", Vnumber2,".csv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}
} else{
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(MetaData)[j], "file"))
message(paste(attributes(MetaData)$Data.Type[j],"exported file exist. Versionning data."))
df <- file.info(list.files(list.files.path$Project.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
df <- df[str_detect(df$Filenames, names(MetaData)[j]),]
filepath <- rownames(df)[which.max(df$mtime)]
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split(filename,".csv"),"[[",1))
extension <- unlist(lapply(str_split(filename,".csv"),"[[",2))
if(is.na(Vnumber)) {
Vnumber2 = 1
filepath2 <- paste0(list.files.path$Project.VerifiedDataset,"/",filename2,".V",Vnumber2,".csv",extension)
file.rename(from = filepath, to = filepath2)
}
#adding version file history
if(!is.null(Vnumber) & !is.na(Vnumber)){Vnumber2 = Vnumber }
if(Vnumber2==1){ Vnumber2 = 2}
message(paste0("Exporting ", count, " / ", object," object: ",names(MetaData)[j]))
filename3 <- unlist(lapply(str_split(filename2,".V"),"[[",1))
filepath2 <- paste0(list.files.path$Project.VerifiedDataset,"/",filename3,".V",Vnumber2,".csv")
z <-  MetaData[[j]]
write.table(z,row.names = F ,file = filepath2, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filepath2, destname=sprintf("%s.gz", filepath2), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}}
}# if length(NB.geneAnnot)
objs =  mget(ls(envir=.GlobalEnv), envir=.GlobalEnv)
NO <- names(Filter(function(i) inherits(i, "list"), objs))[str_detect(toupper(names(Filter(function(i) inherits(i, "list"), objs))),"META")]
pos <- 1
envir = as.environment(pos)
assign(NO, MetaData, envir = envir)
attributes(MetaData)$Version <- paste0("V", Vnumber2)
return(MetaData)
}#function
#Step 7 : Export data as ".csv"
Meta = ExportCSV(MetaData = Meta,
list.files.path = list.files.path,
project = project)
attributes(Meta)
library(PublicDataNorm)
#' @param Export  TRUE or FALSE. If data to be Exported, set T.
#' @param join c("left_join", "full_join")
#' @param force.replace set as F. T : replace an already object with the same name
#' @importFrom utils menu
#' @import purrr
#' @import dplyr
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddClinicFromFile <- function(Metadata,
Raw.file.path,
name.local.file = NULL,
name,
type = c("Samples", "Patients"),
force.replace=F,
Export = F,
merge = F,
mergeBy,
join = c("left_join", "full_join")) {
### ecrasement si même nom dans le Meta à faire.
if(!is.null(Metadata)){
if(!is.list(Metadata)){
stop("Metadata should be a list.")}
l <-length(names(Metadata))
if(!is.null(name.local.file)){
filepath <- paste(path,name.local.file,sep="/")
if(length(filepath)>1){
if(is.null(mergeBy)){stop("For merging data from multiple loading, mergeBy='colnames' must be specified")}
clinic <- list()
count <- 0
for (i in filepath) {
if(all(str_detect(i, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
count <- count+1
if(str_detect(i, ".rds", negate = FALSE)){
clinic[[count]] <- readRDS(i) }
if(str_detect(i, ".txt|.csv|.tsv", negate = FALSE)){
clinic[[count]] <- suppressWarnings(as.data.frame(data.table::fread(i, na.strings = "")))
}}
if(join=="full_join"){
dt <- clinic %>% purrr::reduce(full_join, by=mergeBy)
}
if(join=="left_join"){
dt <- clinic %>% purrr::reduce(left_join, by=mergeBy)
}
}
if(length(filepath)==1){
if(all(str_detect(filepath, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(filepath, ".rds", negate = FALSE)){
dt <- readRDS(filepath) }
if(str_detect(filepath, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath, na.strings = "")))
rownames(dt) <-    dt[,1]
}
}} else {
LF <- list.files(path)
LF <- LF[str_detect(LF,"clinic")]
if(length(LF)>1){stop("Ther is more than one files with 'clinic' in its name. Switch to 'name.local.file' and 'mergeBy' ")}
if(all(str_detect(LF, ".rds|.txt|.csv|.tsv", negate = FALSE)==F)  ){stop("#55 No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(LF, ".rds", negate = FALSE)){
dt <- readRDS(LF)}
if(str_detect(LF, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(LF, na.strings = "")))
rownames(dt) <- dt[,1]
}}
if (merge == F){
if(!all(str_detect(names(Metadata),name)==F)){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt
} else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name
if(!type%in%c("Samples","Patients")){stop("type must be set to Samples or Patients")}
if(l==0) {   if(type == "Samples") {attributes(Metadata)$Data.Type <-  c("SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c("Clinic")}
if(Export==T){attributes(Metadata)$Export <- c("Yes") } else {attributes(Metadata)$Export <- c("No") }
} else {  if(type == "Samples") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinic")}
if(Export==T){attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") } else {attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"No") }
}}
} else {
if(is.null(str_detect(names(Metadata),"clinic"))){stop("No clinical data found in Meta Object.\n
For merging 1 newly loaded clinical data to an already loaded file in Meta Object, firslty load one.\n
You can list a list of caracter for multiple clinical data to load at once and will be full_join.")}
if(is.null(mergeBy)){stop("For merging data, mergeBy='colnames' must be specified")}
NB <- which(str_detect(string =attributes(Metadata)$Data.Type ,"Clinic") & attributes(Metadata)$Export=="No")
clinic <- list(Metadata[[NB]], dt)
if(join=="full_join"){
dt <- clinic %>% purrr::reduce(full_join, by=mergeBy)
}
if(join=="left_join"){
dt <- clinic %>% purrr::reduce(left_join, by=mergeBy)
}
Metadata[[NB]] <- clinic
}
return(Metadata)
}else{ stop("No meta data object found")
} }
attributes(Meta)
Meta = AddClinicFromFile(Metadata = Meta,
Raw.file.path = list.files.path$Project.RawData,
name.local.file = c( "PANC.samplesAnnotation.csv", "PANC.Clinic.all.csv"),
name = "Pheno",
type = "Samples",
Export =  F,
merge = T,
mergeBy = "id_cit",
join = "full_join")
list.files.path$Project.RawData
list.files(list.files.path$Project.RawData)
#' @param Export  TRUE or FALSE. If data to be Exported, set T.
#' @param join c("left_join", "full_join")
#' @param force.replace set as F. T : replace an already object with the same name
#' @importFrom utils menu
#' @import purrr
#' @import dplyr
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddClinicFromFile <- function(Metadata,
Raw.file.path,
name.local.file = NULL,
name,
type = c("Samples", "Patients"),
force.replace=F,
Export = F,
merge = F,
mergeBy,
join = c("left_join", "full_join")) {
### ecrasement si même nom dans le Meta à faire.
path = Raw.file.path
if(!is.null(Metadata)){
if(!is.list(Metadata)){
stop("Metadata should be a list.")}
l <-length(names(Metadata))
if(!is.null(name.local.file)){
filepath <- paste(path,name.local.file,sep="/")
if(length(filepath)>1){
if(is.null(mergeBy)){stop("For merging data from multiple loading, mergeBy='colnames' must be specified")}
clinic <- list()
count <- 0
for (i in filepath) {
if(all(str_detect(i, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
count <- count+1
if(str_detect(i, ".rds", negate = FALSE)){
clinic[[count]] <- readRDS(i) }
if(str_detect(i, ".txt|.csv|.tsv", negate = FALSE)){
clinic[[count]] <- suppressWarnings(as.data.frame(data.table::fread(i, na.strings = "")))
}}
if(join=="full_join"){
dt <- clinic %>% purrr::reduce(full_join, by=mergeBy)
}
if(join=="left_join"){
dt <- clinic %>% purrr::reduce(left_join, by=mergeBy)
}
}
if(length(filepath)==1){
if(all(str_detect(filepath, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(filepath, ".rds", negate = FALSE)){
dt <- readRDS(filepath) }
if(str_detect(filepath, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath, na.strings = "")))
rownames(dt) <-    dt[,1]
}
}} else {
LF <- list.files(path)
LF <- LF[str_detect(LF,"clinic")]
if(length(LF)>1){stop("Ther is more than one files with 'clinic' in its name. Switch to 'name.local.file' and 'mergeBy' ")}
if(all(str_detect(LF, ".rds|.txt|.csv|.tsv", negate = FALSE)==F)  ){stop("#55 No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(LF, ".rds", negate = FALSE)){
dt <- readRDS(LF)}
if(str_detect(LF, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(LF, na.strings = "")))
rownames(dt) <- dt[,1]
}}
if (merge == F){
if(!all(str_detect(names(Metadata),name)==F)){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt
} else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name
if(!type%in%c("Samples","Patients")){stop("type must be set to Samples or Patients")}
if(l==0) {   if(type == "Samples") {attributes(Metadata)$Data.Type <-  c("SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c("Clinic")}
if(Export==T){attributes(Metadata)$Export <- c("Yes") } else {attributes(Metadata)$Export <- c("No") }
} else {  if(type == "Samples") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinic")}
if(Export==T){attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") } else {attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"No") }
}}
} else {
if(is.null(str_detect(attributes(Metadata)$Data.Type,"Clinic"))){stop("No clinical data found in Meta Object.\n
For merging 1 newly loaded clinical data to an already loaded file in Meta Object, firslty load one.\n
You can list a list of caracter for multiple clinical data to load at once and will be full_join.")}
if(is.null(mergeBy)){stop("For merging data, mergeBy='colnames' must be specified")}
NB <- which(str_detect(string =attributes(Metadata)$Data.Type ,"Clinic") & attributes(Metadata)$Export=="No")
clinic <- list(Metadata[[NB]], dt)
if(join=="full_join"){
dt <- clinic %>% purrr::reduce(full_join, by=mergeBy)
}
if(join=="left_join"){
dt <- clinic %>% purrr::reduce(left_join, by=mergeBy)
}
Metadata[[NB]] <- clinic
}
return(Metadata)
}else{ stop("No meta data object found")
} }
Meta = AddClinicFromFile(Metadata = Meta,
Raw.file.path = list.files.path$Project.RawData,
name.local.file = c( "PANC.samplesAnnotation.csv", "PANC.Clinic.all.csv"),
name = "Pheno",
type = "Samples",
Export =  F,
merge = T,
mergeBy = "id_cit",
join = "full_join")
traceback()
which(str_detect(string =attributes(Meta)$Data.Type ,"Clinic") & attributes(Metadata)$Export=="No")
which(str_detect(string =attributes(Meta)$Data.Type ,"Clinic") & attributes(Meta)$Export=="No")
Meta = AddClinicFromFile(Metadata = Meta,
Raw.file.path = list.files.path$Project.RawData,
name.local.file = c( "PANC.samplesAnnotation.csv", "PANC.Clinic.all.csv"),
name = "Pheno",
type = "Samples",
Export =  F,
merge = F,
mergeBy = "id_cit",
join = "full_join")
View(Meta)
Meta[["Pheno"]]
#' @param Export  TRUE or FALSE. If data to be Exported, set T.
#' @param join c("left_join", "full_join")
#' @param force.replace set as F. T : replace an already object with the same name
#' @importFrom utils menu
#' @import purrr
#' @import dplyr
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddClinicFromFile <- function(Metadata,
Raw.file.path,
name.local.file = NULL,
name,
type = c("Samples", "Patients"),
force.replace=F,
Export = F,
mergeToClinic = F,
mergeBy,
join = c("left_join", "full_join")) {
### ecrasement si même nom dans le Meta à faire.
path = Raw.file.path
if(!is.null(Metadata)){
if(!is.list(Metadata)){
stop("Metadata should be a list.")}
l <-length(names(Metadata))
if(!is.null(name.local.file)){
filepath <- paste(path,name.local.file,sep="/")
if(length(filepath)>1){
if(is.null(mergeBy)){stop("For merging data from multiple loading, mergeBy='colnames' must be specified")}
clinic <- list()
count <- 0
for (i in filepath) {
if(all(str_detect(i, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
count <- count+1
if(str_detect(i, ".rds", negate = FALSE)){
clinic[[count]] <- readRDS(i) }
if(str_detect(i, ".txt|.csv|.tsv", negate = FALSE)){
clinic[[count]] <- suppressWarnings(as.data.frame(data.table::fread(i, na.strings = "")))
}}
if(join=="full_join"){
dt <- clinic %>% purrr::reduce(full_join, by=mergeBy)
}
if(join=="left_join"){
dt <- clinic %>% purrr::reduce(left_join, by=mergeBy)
}
}
if(length(filepath)==1){
if(all(str_detect(filepath, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(filepath, ".rds", negate = FALSE)){
dt <- readRDS(filepath) }
if(str_detect(filepath, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath, na.strings = "")))
rownames(dt) <-    dt[,1]
}
}} else {
LF <- list.files(path)
LF <- LF[str_detect(LF,"clinic")]
if(length(LF)>1){stop("Ther is more than one files with 'clinic' in its name. Switch to 'name.local.file' and 'mergeBy' ")}
if(all(str_detect(LF, ".rds|.txt|.csv|.tsv", negate = FALSE)==F)  ){stop("#55 No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(LF, ".rds", negate = FALSE)){
dt <- readRDS(LF)}
if(str_detect(LF, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(LF, na.strings = "")))
rownames(dt) <- dt[,1]
}}
if (mergeToClinic == F){
if(!all(str_detect(names(Metadata),name)==F)){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt
} else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name
if(!type%in%c("Samples","Patients")){stop("type must be set to Samples or Patients")}
if(l==0) {   if(type == "Samples") {attributes(Metadata)$Data.Type <-  c("SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c("Clinic")}
if(Export==T){attributes(Metadata)$Export <- c("Yes") } else {attributes(Metadata)$Export <- c("No") }
} else {  if(type == "Samples") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinic")}
if(Export==T){attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") } else {attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"No") }
}}
} else {
if(is.null(str_detect(attributes(Metadata)$Data.Type,"Clinic"))){stop("No clinical data found in Meta Object.\n
For merging 1 newly loaded clinical data to an already loaded file in Meta Object, firslty load one.\n
You can list a list of caracter for multiple clinical data to load at once and will be full_join.")}
if(is.null(mergeBy)){stop("For merging data, mergeBy='colnames' must be specified")}
NB <- which(str_detect(string =attributes(Metadata)$Data.Type ,"Clinic") & attributes(Metadata)$Export=="No")
clinic <- list(Metadata[[NB]], dt)
if(join=="full_join"){
dt <- clinic %>% purrr::reduce(full_join, by=mergeBy)
}
if(join=="left_join"){
dt <- clinic %>% purrr::reduce(left_join, by=mergeBy)
}
Metadata[[NB]] <- clinic
}
return(Metadata)
}else{ stop("No meta data object found")
} }
Meta = AddClinicFromFile(Metadata = Meta,
Raw.file.path = list.files.path$Project.RawData,
name.local.file = c( "PANC.samplesAnnotation.csv", "PANC.Clinic.all.csv"),
name = "Pheno",
type = "Samples",
Export =  F,
mergeToClinic = F,
mergeBy = "id_cit",
join = "full_join")
Meta = AddClinicFromFile(Metadata = Meta,
Raw.file.path = list.files.path$Project.RawData,
name.local.file = c( "PANC.samplesAnnotation.csv", "PANC.Clinic.all.csv"),
name = "Pheno",
type = "Samples",
Export =  F,force.replace = T,
mergeToClinic = F,
mergeBy = "id_cit",
join = "full_join")
View(Meta)
attributes(Meta)
Meta = AddClinicFromFile(Metadata = Meta,
Raw.file.path = list.files.path$Project.RawData,
name.local.file = c( "PANC.samplesAnnotation.csv", "PANC.Clinic.all.csv"),
name = "Pheno",
type = "Patient",force.replace = T,
Export =  F,
mergeToClinic = F,
mergeBy = "id_cit",
join = "full_join")
attributes(Meta)
library(PublicDataNorm)
git config --global --list
