FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned == "No")
which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned == "No")
View(Metadata)
which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="No")
which(attributes(Metadata)$Data.Type=="SamplesAnnot" &attributes(Metadata)$Cleaned=="No")
#' @param FilterSP default F, if T, keep only retrieved samples in SamplesAnnotation file
#' @param force.replace set as F. T : replace an already object with the same name
#' @param keep.all.column default F, if T, copy all column from clinic.
#' @param FilterGenes Filter for genes found in geneannotation file and rownames of matrices.
#' @importFrom utils menu
#' @import dplyr
#' @return a meataobject
#' @export
#'
#' @examples "non"
CleaningData = function(Metadata = NULL,
PatientsLexic = NULL,
PatientsAnnotToClean = NULL,
PatientsExportname = NULL,
SamplesLexic = NULL,
SamplesAnnotToClean = NULL,
CellsLexic = NULL,
SamplesExportname = NULL,
FilterSP =  F,
force.replace = F,
keep.all.column = F,
FilterGenes = F){
if(is.null(Metadata)){stop("No Metadata found.")}
if(is.null(PatientsLexic)&is.null(SamplesLexic)){stop("A PatientsLexic or SamplesLexic is mandatory for data cleaning")}
if(!is.null(SamplesLexic) & attributes(Metadata)$Omics.type!="Single.Cell"){
if(is.null(SamplesAnnotToClean)){stop("SamplesAnnotToClean has to be specify.")}
SamAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned == "No")
ClinicRaw = which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned == "No")
if(length(SamAnnotRaw)!=0){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = SamplesAnnotToClean,
exportname = SamplesExportname,
FilterSamples =  FilterSP,
force.replace = force.replace )
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = SamplesAnnotToClean,
exportname = paste0(SamplesExportname,".fullCol"),
FilterSamples =  FilterSP,
force.replace = force.replace,
keep.all.column =keep.all.column )}
}
}
if(!all(is.null(PatientsExportname),is.null(PatientsLexic),is.null(PatientsAnnotToClean))){
if(is.null(PatientsAnnotToClean) & attributes(Metadata)$Omics.type!="Single.Cell"   ){
RP = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="No")
message("Creating a Patient clinical table from Samples annotation")
if(length(RP)>0){stop("Raw Patients clinical data found in Metaobject, Specify PatientsAnnotToClean")}
if(is.null(PatientsExportname)){stop("Specify PatientsExportname.")}
if(is.null(PatientsLexic)){stop("PatientsLexic is mandatory.")}
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = SamplesAnnotToClean,
exportname = PatientsExportname,
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace,
CleanFromOtherType = T)
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = SamplesAnnotToClean,
exportname = paste0(PatientsExportname,".fullCol"),
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace,
CleanFromOtherType = T,
keep.all.column = T)
}
} else{}
}
if(FilterGenes == T){
g =  which(attributes(Metadata)$Data.Type=="geneAnnot")[1]
m <- which(attributes(Metadata)$Data.Type=="Count")
object = Metadata[[g]]
if(!is.na(g)){geneAnnot = as.matrix(Metadata[[g]])}
for (i in m){
gene = rownames(Metadata[[i]])
sel = which(geneAnnot %in% gene)
colT = which(apply(geneAnnot, 2, function(x) which(x %in% geneAnnot[sel[1]]))>0)[1]
object <- object[object[,colT]%in%gene,]
if(length(object[,colT])!=length(unique(object[,colT]))){object <- object[!duplicated(object[,colT]),]}
Metadata[[i]] = Metadata[[i]][object[,colT],]
attributes(Metadata)$Cleaned[i] = "Yes"
}
Metadata[[g]] = object
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
if(is.null(CellsLexic)){stop("No CellsLexic was specified.")}
if("CellsAnnot"%in%attributes(Metadata)$Data.Type & !is.null(CellsLexic)){
CellAnnotRaw = which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned == "No")
pp = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="Yes")
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = CellsLexic,
type = "Cells",
ClinicToClean = names(Metadata)[CellAnnotRaw],
exportname = "Cells.Annotation",
FilterPatients =F,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
cellID = Metadata$Cells.Annotation$CellsBarcode
if(length(pp)>0){
clinic = Metadata[[pp]]
for (z in clinic$PatientsID){
Metadata$Cells.Annotation$PatientsID=ifelse(str_detect(pattern = paste0(z), cellID),z,Metadata$Cells.Annotation$PatientsID)
}
}
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = CellsLexic,
type = "Cells",
ClinicToClean = names(Metadata)[CellAnnotRaw],
exportname = "Cells.Annotation.Full",
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =keep.all.column )
cellID = Metadata$Cells.Annotation$CellsBarcode
if(length(pp)>0){
clinic = Metadata[[pp]]
for (z in clinic$PatientsID){
Metadata$Cells.Annotation.Full$PatientsID=ifelse(str_detect(pattern = paste0(z), cellID),z,Metadata$Cells.Annotation.Full$PatientsID)
}
}
}
} # CellAnnotRaw present
ClinicRaw = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="No")
SampleAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" &attributes(Metadata)$Cleaned=="No")
# Patient annot absent
if(length(ClinicRaw)<1 & !is.null(PatientsLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = PatientsExportname,
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = paste0(PatientsExportname,".Full"),
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =T )}
}# Patient annot absent
# Patient annot Present
if(length(ClinicRaw)>0 & !is.null(PatientsLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = PatientsExportname,
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = paste0(PatientsExportname,".Full"),
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =T )
}
}# Patient annot Present
# Sample annot Present
if(length(SampleAnnotRaw)>0 & !is.null(SamplesLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = SamplesExportname,
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = paste0(SamplesExportname,".Full"),
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =T )
}
}    # Sample annot Present
# Sample annot Absent
if(length(SampleAnnotRaw)<1 & !is.null(SamplesLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = SamplesExportname,
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =F )
if(keep.all.column==T){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = paste0(SamplesExportname,".Full"),
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =T )}
}    # Sample annot Absent
}
return(Metadata)
}
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = F,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
for i in c('AnnotationDbi', 'DT', 'ggplot2', 'org.Hs.eg.db', 'plyr', 'rstudioapi', 'survminer', 'TCGAbiolinks', 'matrixStats', 'readr'){
for (i in c('AnnotationDbi', 'DT', 'ggplot2', 'org.Hs.eg.db', 'plyr', 'rstudioapi', 'survminer', 'TCGAbiolinks', 'matrixStats', 'readr')){
install.packages(i,dependencies = T)
}
for (i in c('AnnotationDbi', 'org.Hs.eg.db', 'TCGAbiolinks')){
install.packages(i,dependencies = T)
}
install.packages("BiocManager")
for (i in c('AnnotationDbi', 'org.Hs.eg.db', 'TCGAbiolinks')){
BiocManager::install(i,dependencies = T)
}
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "Steele"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path) # if all are TRUE ; next step can be done
Metadata <- CreateDataset(project,path) %>% # if  are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="patient" ,
setSamplesID.Column = "sample" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
Metadata$Clinic$V1=NULL
rownames(Metadata$Clinic) = Metadata$Clinic$PatientsID
CheckMeta(Metadata)
#Step 3 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Metadata$Clinic)
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType" = "cell_type" ))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Disease" ="cancer_type "))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = F,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
gc()
CheckMeta(Metadata)
View(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = F,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
CheckMeta(Metadata)
View(Metadata)
Metadata[["SamplesAnnot"]]
Metadata[["Patients.Clinic"]]
Metadata[["Cells.Annotation"]]
Metadata <- CreateDataset(project,path) %>% # if  are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="patient" ,
setSamplesID.Column = "sample" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
Metadata$Clinic$V1=NULL
Metadata$Clinic$PatientsID
colnames(Metadata$count)[1:5]
rownames(Metadata$Clinic) = gsub("_","-",Metadata$Clinic$PatientsID)
CheckMeta(Metadata)
#Step 3 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Metadata$Clinic)
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType" = "cell_type" ))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Disease" ="cancer_type "))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = F,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
gc()
CheckMeta(Metadata)
View(Metadata)
Metadata[["Cells.Annotation"]]
Metadata[["Patients.Clinic"]]
Metadata[["SamplesAnnot"]]
Metadata[["Clinic"]]
Metadata$Clinic$sample = gsub("_","-",Metadata$Clinic$sample)
Metadata$Clinic$patient = gsub("_","-",Metadata$Clinic$patient)
CheckMeta(Metadata)
#Step 3 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Metadata$Clinic)
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType" = "cell_type" ))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Disease" ="cancer_type "))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = F,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
gc()
CheckMeta(Metadata)
Metadata <- CreateDataset(project,path) %>% # if  are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="patient" ,
setSamplesID.Column = "sample" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
colnames(Metadata$count)[1:5]
Metadata$Clinic$V1=NULL
rownames(Metadata$Clinic) = gsub("_","-",Metadata$Clinic$PatientsID)
Metadata$Clinic$sample = gsub("_","-",Metadata$Clinic$sample)
Metadata$Clinic$patient = gsub("_","-",Metadata$Clinic$patient)
CheckMeta(Metadata)
Metadata$Clinic$PatientsID = gsub("_","-",Metadata$Clinic$PatientsID)
Metadata$Clinic$SamplesID = gsub("_","-",Metadata$Clinic$SamplesID)
CheckMeta(Metadata)
#Step 3 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Metadata$Clinic)
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType" = "cell_type" ))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Disease" ="cancer_type "))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
gc()
CheckMeta(Metadata)
Metadata = ExportTSV(Metadata)
gc()
attributes(Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x V2 HiSeq4000" ,
Run.spec = NA,
First.Author = "Steele N.",
DOI = "10.1038/s43018-020-00121-4",
Comment = NA,
User = "JR-Analytics")
Metadata$Clinic
project <- "Schlesinger"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path)
Metadata <- CreateDataset(project,path) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="GSM4293555_Human.csv.gz" ,
Cell.file = NULL ,
Genes.file =NULL,
name = "rawcount")
head(Metadata$rawcount[1:5])
Metadata$rawcount$V1= NULL
attributes(Metadata)
CheckMeta(Metadata)
View(Metadata)
Metadata <- CreateDataset(project,path) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="GSM4293555_Human.csv.gz" ,
Cell.file = "GSE141017_ALL_barcode_ident.csv.gz" ,setID.cellAnnotColumn = 1,
Genes.file =NULL,
name = "rawcount")
