}
}} else {
LF <- list.files(path)
LF <- LF[str_detect(LF,"clinic")]
if(length(LF)>1){stop("Ther is more than one files with 'clinic' in its name. Switch to 'name.local.file' and 'mergeBy' ")}
if(all(str_detect(LF, ".rds|.txt|.csv|.tsv", negate = FALSE)==F)  ){stop("#55 No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(LF, ".rds", negate = FALSE)){
dt <- readRDS(LF)}
if(str_detect(LF, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(LF, na.strings = "")))
rownames(dt) <- dt[,1]
}}
if (merge == F){
if(!all(str_detect(names(Metadata),name)==F)){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name}
if(l==0) {   attributes(Metadata)$Data.Type <-  c("Clinical.data")
if(Raw==T){attributes(Metadata)$Raw.data <- c("Yes") } else {attributes(Metadata)$Raw.data <- c("No") }
} else {  attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
if(Raw==T){attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"Yes") } else {attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No") }
}
} else {
if(is.null(str_detect(names(Metadata),"clinic"))){stop("No clinical data found in Meta Object.\n
For merging 1 newly loaded clinical data to an already loaded file in Meta Object, firslty load one.\n
You can list a list of caracter for multiple clinical data to load at once and will be full_join.")}
if(is.null(mergeBy)){stop("For merging data, mergeBy='colnames' must be specified")}
NB <- which(attributes(Metadata)$Data.Type=="Clinical.data" & attributes(Metadata)$Raw=="Yes")
clinic <- list(Metadata[[NB]], dt)
clinic <- clinic %>% purrr::reduce(full_join, by=mergeBy)
Metadata[[NB]] <- clinic
}
return(Metadata)
}else{ stop("No meta data object found")
} } # function
View(Meta)
Meta$MaurerRaw.clinic <- NULL
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "MaurerRaw.clinic", merge = F,
name.local.file = "MaurerRaw.clinic.csv.gz")
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "MaurerRaw.clinic",force.replace = T,
merge = F,
name.local.file = "MaurerRaw.clinic.csv.gz")
View(Meta)
attributes(Meta)
#' @param name if loca=True, names to apply in Meatadata object slot
#' @param name.local.file name file of interest in path directory
#' @param force.replace set as F. T : replace an already object with the same name
#' @param Raw TRUE or FALSE. If Raw data, to be specified.
#' @importFrom utils menu
#' @import data.table
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddExpressionMatrix <- function(Metadata, local = c(T, F) , query, data.norm, path, name, Raw=T, name.local.file = NULL, force.replace=F ) {
if(!is.null(Metadata)){
if(!is.list(Metadata)){
stop("Metadata should be a list.")}
setwd(path)
if(local== T){
message("Local import")
l <-length(names(Metadata))
lf <- list.files(path)
if(length(lf)>1){print(c(message("There is more than one files in Dir :"),lf))}
if(all(str_detect(lf, ".rds|.txt|.csv|.tsv", negate = FALSE)==F)){stop("No '*.rds' or '*.txt' or '*.csv' files in set directory. \n change path or add file")}
if(!is.null(name.local.file)) {
filepath <- paste(path,name.local.file,sep="/")
message(paste("Loading", name.local.file, "file"))
if(str_detect(name.local.file, ".rds", negate = FALSE)){
dt <- readRDS(filepath)}
else {
if(str_detect(name.local.file, ".txt", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
rownames(dt) <- dt[,1]
}  else {
if(str_detect(name.local.file, ".csv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
rownames(dt) <- dt[,1]
}else {
if(str_detect(name.local.file, ".tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
rownames(dt) <- dt[,1]
}}
}
}
if(length(Metadata)>=1) {
if(!all(str_detect(names(Metadata),paste0(name,".matrix")))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[paste0(name,".matrix")]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- paste0(name,".matrix")}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"Yes") } else {attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No") }
}
return(Metadata)}
else {
Metadata <- list("mat" = dt)
names(Metadata)[1] <- paste0(name,".matrix")
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c("Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- "Yes" } else {attributes(Metadata)$Raw.data <- "No" }}
return(Metadata)
}
} else {
if(length(lf[str_detect(lf, "matrix")])>1) {
for (i in lf[str_detect(lf, "matrix")]) {
l <- length(Metadata)
message(paste("Loading", i, "file"))
if(str_detect(i, ".rds", negate = FALSE)){Metadata[[1]] <- readRDS(i)} else {
if(str_detect(i, ".txt", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(i)))
rownames(dt) <- dt[,1]
if(!all(str_detect(names(Metadata),paste0(name,".matrix")))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[paste0(name,".matrix")]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- paste0(name,".matrix")}
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"Yes") } else {attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No") }
}  else {
if(str_detect(i, ".csv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(i)))
rownames(dt) <- dt[,1]
if(!all(str_detect(names(Metadata),paste0(name,".matrix")))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[paste0(name,".matrix")]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- paste0(name,".matrix")}
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"Yes") } else {attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No") }} else {
if(str_detect(i, ".tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(i)))
rownames(dt) <- dt[,1]
if(!all(str_detect(names(Metadata),paste0(name,".matrix")))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[paste0(name,".matrix")]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- paste0(name,".matrix")}
}
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"Yes") } else {attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No") }}
} }
names(Metadata)[l+1] <- paste0(name,".matrix.",which(lf[str_detect(lf, "matrix")]%in%i))
} } else {
if(length(Metadata)>=1) {
lf <- lf[str_detect(lf, "matrix")]
message(paste("Loading", lf, "file"))
if(str_detect(lf, ".rds", negate = FALSE)){Metadata[[l+1]] <- readRDS(lf)} else {
if(str_detect(lf, ".txt", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(lf)))
rownames(dt) <- dt[,1]
dt <- dt[,colnames(Metadata[[1]])]
if(!all(str_detect(names(Metadata),paste0(name,".matrix")))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[paste0(name,".matrix")]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- paste0(name,".matrix")}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"Yes") } else {attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No") }}  else {
}
if(str_detect(lf, ".csv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(lf)))
rownames(dt) <- dt[,1]
dt <- dt[,colnames(Metadata[[1]])]
if(!all(str_detect(names(Metadata),paste0(name,".matrix")))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[paste0(name,".matrix")]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- paste0(name,".matrix")}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"Yes") } else {attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No") }
}} else {
if(str_detect(lf, ".tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(lf)))
rownames(dt) <- dt[,1]
dt <- dt[,colnames(Metadata[[1]])]
if(!all(str_detect(names(Metadata),paste0(name,".matrix")))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[paste0(name,".matrix")]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- paste0(name,".matrix")}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"Yes") } else {attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No") }
}
}
}
}
}
}
else {
lf <- lf[str_detect(lf, "matrix")]
message(paste("Loading", lf, "file"))
if(str_detect(lf, ".rds", negate = FALSE)){Metadata[[1]] <- readRDS(lf)} else {
if(str_detect(lf, ".txt", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(lf)))
rownames(dt) <- dt[,1]
Metadata[[1]] <- dt
attributes(Metadata)$Data.Type <-  c("Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- "Yes" } else {attributes(Metadata)$Raw.data <- "No" } }  else {
if(str_detect(lf, ".csv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(lf)))
rownames(dt) <- dt[,1]
Metadata[[1]] <- dt
attributes(Metadata)$Data.Type <-  c("Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- "Yes" } else {attributes(Metadata)$Raw.data <- "No" } }else {
if(str_detect(lf, ".tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(lf)))
rownames(dt) <- dt[,1]
Metadata[[1]] <- dt
attributes(Metadata)$Data.Type <-  c("Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- "Yes" } else {attributes(Metadata)$Raw.data <- "No" } }}
}
}
names(Metadata)[1] <- paste0(name,".matrix")
}}
###marche pas le readme!
if(file.exists("Readme.txt")){
name <- paste0(name,".matrix")
tme <- Sys.Date()
tme <- format(tme, format="%B %d %Y")
sp <- data.frame("Type"="---------:" ,"Description"="---------")
mod <- data.frame("Type"=paste(name, "added the: ") ,"Description"=tme)
dt <- rbind(sp,mod,sp)
if(str_detect(name, c("matrix"))==T){
nr <- nrow(Metadata[[name]])
nc <- ncol(Metadata[[name]])
if(str_detect(name, "Raw")){ Assay = "Raw counts"}
if(str_detect(name, "TPM")){ Assay="TPM normalization"}
if(str_detect(name, "FKPM")){ Assay="FKPM normalization"}
if(str_detect(name, "Normalized")){ Assay="Normalized gene expression"}
ltest <- data.frame("Type"=c("File: " , "Class: " ,"Dimension: ", "Assay: ", "Rownames: ","Colnames: "),"Description" = c(
paste0(name,".csv"),
class(Metadata[[name]]),
paste(nr,"x",nc),
Assay,
paste(rownames(Metadata[[name]])[1],"...",rownames(Metadata[[name]])[nrow(Metadata[[name]])]),
paste(colnames(Metadata[[name]])[2],"...",colnames(Metadata[[name]])[ncol(Metadata[[name]])])
))
}
dt <- rbind(dt, ltest,sp)
write.table(dt,"Readme.txt",row.names = F,quote = FALSE, append = T, col.names=FALSE)
file.show("Readme.txt")
closeAllConnections()
}
return(Metadata)
}} else { # if local ==T
message("Fetching data from TCGA portal")
query <- query
if(is.null(query)){message("Query data form adding expression matrix to Meta object needed \n launch : query <<- GDCquery() with associated project")}
project <- query$results[[1]]$project
source <- ifelse(query$legacy,"legacy","harmonized")
files <- file.path(
project, source,
gsub(" ","_",query$results[[1]]$data_category),
gsub(" ","_",query$results[[1]]$data_type),
gsub(" ","_",query$results[[1]]$file_id),
gsub(" ","_",query$results[[1]]$file_name)
)
if(dir.exists(file.path("GDCdata",project, source))){message(paste(project, "data found"))}
files <- file.path("GDCdata", files)
cases <- ifelse(grepl("TCGA|TARGET",query$results[[1]]$project %>% unlist()),query$results[[1]]$cases,query$results[[1]]$sample.submitter_id)
message("Building gene expression data")
y <- TCGA.build(
ask = data.norm,
files = files,
cases = cases,
genome = ifelse(query$legacy,"hg19","hg38"),
experimental.strategy = unique(query$results[[1]]$experimental_strategy))
y <- y[,colnames(Metadata[[1]])]
if(!all(colnames(Metadata[[1]])==colnames(y))){stop("Samples are not the sames accross data matrix expression")}
l <-length(names(Metadata))
Metadata[[l+1]]<- y
names(Metadata)[l+1] <- c(paste0(data.norm,".",project,".matrix"))
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
if(l==0) {   attributes(Metadata)$Data.Type <-  c("Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- "Yes" } else {attributes(Metadata)$Raw.data <- "No" }
}} else {
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Expression.Matrix")
if(Raw==T){attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"Yes") } else {attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No") } }
}
if(file.exists("Readme.txt")){
name <- c(paste0(data.norm,".",project,".matrix"))
tme <- Sys.Date()
tme <- format(tme, format="%B %d %Y")
sp <- data.frame("Type"="---------:" ,"Description"="---------")
mod <- data.frame("Type"=paste(name, "added the: ") ,"Description"=tme)
dt <- rbind(sp,mod,sp)
if(str_detect(name, c("matrix"))==T){
nr <- nrow(Metadata[[name]])
nc <- ncol(Metadata[[name]])
if(str_detect(name, "Raw")){ Assay = "Raw counts"}
if(str_detect(name, "TPM")){ Assay="TPM normalization"}
if(str_detect(name, "FKPM")){ Assay="FKPM normalization"}
if(str_detect(name, "Normalized")){ Assay="Normalized gene expression"}
ltest <- data.frame("Type"=c("File: " , "Class: " ,"Dimension: ", "Assay: ", "Rownames: ","Colnames: "),"Description" = c(
paste0(name,".csv"),
class(Metadata[[name]]),
paste(nr,"x",nc),
Assay,
paste(rownames(Metadata[[name]])[1],"...",rownames(Metadata[[name]])[nrow(Metadata[[name]])]),
paste(colnames(Metadata[[name]])[2],"...",colnames(Metadata[[name]])[ncol(Metadata[[name]])])
))
}
dt <- rbind(dt, ltest,sp)
write.table(dt,"Readme.txt",row.names = F,quote = FALSE, append = T, col.names=FALSE)
file.show("Readme.txt")
closeAllConnections()
}
return(Metadata) }
}else{ stop("No meta data object found")} #else meta data object not found
} # function
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,Raw = T,
local = T,path = list.files.path$Project.RawData,
name.local.file ="MaurerRaw.matrix.csv.gz",
name = "Maruer.rawcount",force.replace = T
)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
Meta <- AddExpressionMatrix(Metadata = Meta,Raw = T,
local = T,path = list.files.path$Project.RawData,
name.local.file ="MaurerRaw.matrix.csv.gz",
name = "Maruer.rawcount",force.replace = F
)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
Meta <- AddExpressionMatrix(Metadata = Meta,Raw = T,
local = T,path = list.files.path$Project.RawData,
name.local.file ="MaurerRaw.matrix.csv.gz",
name = "Maruer.rawcount",force.replace = T
)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
head(Meta$Maruer.rawcount.matrix[,1:5])
Meta$Maruer.rawcount.matrix <- Meta$Maruer.rawcount.matrix[,-1]  # First colonne, geneSymbols drop off.
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "MaurerRaw.clinic",force.replace = F,
merge = F,
name.local.file = "MaurerRaw.clinic.csv.gz")
attributes(Meta)
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "MaurerRaw.clinic",force.replace = F,
merge = F,
name.local.file = "MaurerRaw.clinic.csv.gz")
attributes(Meta)
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "MaurerRaw.clinic",force.replace = T,
merge = F,
name.local.file = "MaurerRaw.clinic.csv.gz")
attributes(Meta)
#' @param mergeBy colname using for merging clinical data.
#' @param Raw TRUE or FALSE. If Raw data, to be specified.
#' @param force.replace set as F. T : replace an already object with the same name
#' @importFrom utils menu
#' @import purrr
#' @import dplyr
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddClinic <- function(Metadata, path, merge = c(F,T), Raw = T,mergeBy, name, name.local.file = NULL, force.replace=F) {
### ecrasement si même nom dans le Meta à faire.
if(!is.null(Metadata)){
if(!is.list(Metadata)){
stop("Metadata should be a list.")}
l <-length(names(Metadata))
if(!is.null(name.local.file)){
filepath <- paste(path,name.local.file,sep="/")
if(length(filepath)>1){
if(is.null(mergeBy)){stop("For merging data from multiple loading, mergeBy='colnames' must be specified")}
clinic <- list()
count <- 0
for (i in filepath) {
if(all(str_detect(i, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
count <- count+1
if(str_detect(i, ".rds", negate = FALSE)){
clinic[[count]] <- readRDS(i) }
if(str_detect(i, ".txt|.csv|.tsv", negate = FALSE)){
clinic[[count]] <- suppressWarnings(as.data.frame(data.table::fread(i, na.strings = "")))
rownames(clinic[[count]]) <-    clinic[[count]][,1]
}}
dt <- clinic %>% purrr::reduce(full_join, by=mergeBy)
rownames(dt) <- dt[,1]
}
if(length(filepath)==1){
if(all(str_detect(filepath, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(filepath, ".rds", negate = FALSE)){
dt <- readRDS(filepath) }
if(str_detect(filepath, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath, na.strings = "")))
rownames(dt) <-    dt[,1]
}
}} else {
LF <- list.files(path)
LF <- LF[str_detect(LF,"clinic")]
if(length(LF)>1){stop("Ther is more than one files with 'clinic' in its name. Switch to 'name.local.file' and 'mergeBy' ")}
if(all(str_detect(LF, ".rds|.txt|.csv|.tsv", negate = FALSE)==F)  ){stop("#55 No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(LF, ".rds", negate = FALSE)){
dt <- readRDS(LF)}
if(str_detect(LF, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(LF, na.strings = "")))
rownames(dt) <- dt[,1]
}}
if (merge == F){
if(!all(str_detect(names(Metadata),name)==F)){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt
} else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name
if(l==0) {   attributes(Metadata)$Data.Type <-  c("Clinical.data")
if(Raw==T){attributes(Metadata)$Raw.data <- c("Yes") } else {attributes(Metadata)$Raw.data <- c("No") }
} else {  attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
if(Raw==T){attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"Yes") } else {attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No") }
}}
} else {
if(is.null(str_detect(names(Metadata),"clinic"))){stop("No clinical data found in Meta Object.\n
For merging 1 newly loaded clinical data to an already loaded file in Meta Object, firslty load one.\n
You can list a list of caracter for multiple clinical data to load at once and will be full_join.")}
if(is.null(mergeBy)){stop("For merging data, mergeBy='colnames' must be specified")}
NB <- which(attributes(Metadata)$Data.Type=="Clinical.data" & attributes(Metadata)$Raw=="Yes")
clinic <- list(Metadata[[NB]], dt)
clinic <- clinic %>% purrr::reduce(full_join, by=mergeBy)
Metadata[[NB]] <- clinic
}
return(Metadata)
}else{ stop("No meta data object found")
} } # function
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,Raw = T,
local = T,path = list.files.path$Project.RawData,
name.local.file ="MaurerRaw.matrix.csv.gz",
name = "Maruer.rawcount",force.replace = T
)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
head(Meta$Maruer.rawcount.matrix[,1:5])
Meta$Maruer.rawcount.matrix <- Meta$Maruer.rawcount.matrix[,-1]  # First colonne, geneSymbols drop off.
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "MaurerRaw.clinic",force.replace = T,
merge = F,
name.local.file = "MaurerRaw.clinic.csv.gz")
attributes(Meta)
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "MaurerRaw.clinic",force.replace = T,
merge = F,
name.local.file = "MaurerRaw.clinic.csv.gz")
attributes(Meta)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = list.files.path$Processes)
attributes(Meta)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = list.files.path$Processes)
attributes(Meta)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/02Processes")
attributes(Meta)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/02Processes")
attributes(Meta)
library(PublicDataNorm)
library(PublicDataNorm)
library(stringr)
project <- "Maurer"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path)
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,Raw = T,
local = T,path = list.files.path$Project.RawData,
name.local.file ="MaurerRaw.matrix.csv.gz",
name = "Maruer.rawcount",force.replace = F
)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
head(Meta$Maruer.rawcount.matrix[,1:5])
Meta$Maruer.rawcount.matrix <- Meta$Maruer.rawcount.matrix[,-1]  # First colonne, geneSymbols drop off.
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "MaurerRaw.clinic",force.replace = F,
merge = F,
name.local.file = "MaurerRaw.clinic.csv.gz")
attributes(Meta)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = list.files.path$Processes)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/02Processes")
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/02Processes")
attributes(Meta)
CheckMeta(Meta)
Meta <- AddgeneAnnot(Meta = Meta , gtf.file.dir =list.files.path$References , gtf.files = "gencode.v33.annotation.gtf.gz")
View(Meta)
Meta[["geneAnnotation"]]
attributes(Meta)
library(PublicDataNorm)
Meta$geneAnnotation <- NULL
Meta <- AddgeneAnnot(Meta = Meta , gtf.file.dir =list.files.path$References , gtf.files = "gencode.v33.annotation.gtf.gz")
View(Meta)
attributes(Meta)
