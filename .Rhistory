mm =  which(attributes(Metadata)$Data.Type=="Count")
if(length(ccc)>0){  message(paste("Checking Common Patients from", names(Metadata)[c[1]] ,"in other Cleaned Samples or Patients annotations data."))
}else {
message(paste("Checking Common Patients from", names(Metadata)[c[1]] ,"in other Samples or Patients annotations data."))}
message("-------------------------")
if(attributes(Metadata)$Omics.type!="Single.Cell"){
for (i in c(c[-1],s)){
target = unique(Metadata[[i[1]]][,"PatientsID"])
if(length(which(PpID %in% as.matrix(Metadata[[i[1]]])))==length(PpID)){message(paste(MetaDataN[i]), " : PASS") }
if(length(which(PpID %in% as.matrix(Metadata[[i[1]]])))<length(PpID)){
message(paste(MetaDataN[i]), " : FAIL")
message(paste("PatientsID not found in ", MetaDataN[i]," : "), paste0(na.omit(PpID[!PpID%in%target]),collapse = "; "))
}
}}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
for (i in c(c,s)){
message(paste0("PatientsID from '", names(Metadata)[i],"', in CellsAnnotation object"))
tot=0
for (z in unique(Metadata[[i]][,"PatientsID"])) {
t = summary(str_detect(pattern = paste0(z,"-"), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
message("Total = " , tot,"/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")}
if(length(ccc)>0){ p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")}else{
p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
}
if(length(p)>0){
for (i in p){
message(paste0("SamplesID from '", names(Metadata)[i],"', in CellsAnnotation object :"))
tot=0
for (z in Metadata[[i]][,"SamplesID"]) {
t = summary(str_detect(pattern = paste0(z), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
message("Total = " , tot, "/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")
}
}
}
}
CheckMeta(Metadata)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(GEOquery)
library(Matrix)
project <- "Lee"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Clinic=getGEO('GSE132465',GSEMatrix=TRUE)[["GSE132465_series_matrix.txt.gz"]]@phenoData@data
Metadata <- CreateDataset(project,"E:/DataBase") %>%
AddClinicFromObject(object = Clinic,
name = "rawsam",
type = "Samples",#alway set to this
setSamplesID.Column="title",
setPatientID.Column="patient_id:ch1",
force.replace = T)%>%
AddExpressionMatrixSC(ExpressionMatrix ="GSE132465_GEO_processed_CRC_10X_natural_log_TPM_matrix.txt.gz" ,
Cell.file = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"GSE132465_GEO_processed_CRC_10X_cell_annotation.txt.gz"))),
Genes.file =NULL ,
setID.cellAnnotColumn = "Index" ,
name = "TPM")
gc()
head(Metadata$TPM)[,1:5]
colnames(Metadata$TPM) = c("GeneID", colnames(Metadata$TPM)[-ncol(Metadata$TPM)])
Metadata$TPM$GeneID=NULL
CheckMeta(Metadata)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Clinic)
SL = addSeveralKeysToLexic(lexic = SL,vector = c("Stage"="tumor stage:ch1",
"SamplePathologicalState"="pathologic:ch1",
"Tissue"="tissue type:ch1",
"Region" = "region:ch1") )
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Stage"="tumor stage:ch1",
"SamplePathologicalState"="pathologic:ch1",
"Tissue"="tissue type:ch1",
"Region" = "region:ch1") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot",
CellsLexic = CL,
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = T, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
CheckMeta(Metadata)
gc()
Metadata = ExportTSV(Metadata)
View(CL)
traceback()
lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic")
)
ls(envir=.GlobalEnv)
lapply(ls(envir=.GlobalEnv), get)
lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic")
#' ExportTSV Export Metadata inside object into ".tsv" files
#'
#' @param Metadata a Metadata  data files
#' @return ".tsv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
ExportTSV <- function (Metadata){
if(is.null(Metadata)){stop("Need a Metadata List file")}
if(!is.list(Metadata)){stop("Need a Metadata List file")}
list.files.path = attributes(Metadata)$File.path
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
project = attributes(Metadata)$Project
count <- 0
object <- length(Metadata)
name <- names(Metadata)
LF <- list.files(Verifiedpath(Metadata))
if(length(LF)!=0){
df <- file.info(list.files(Verifiedpath(Metadata), full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filepath <- rownames(df)
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
version <- na.omit(str_extract(filename,"V[0-9]*"))
Vnumber <- max(na.omit(as.numeric(str_extract(version,"([0-9]+).*$"))))+1
} else {
Vnumber = 1
attributes(Metadata)$Version <- "V1"}
message(paste0("Exporting Version V", Vnumber))
message(paste("Exporting", object, "objects"))
NB.raw.clinic <- which(c(attributes(Metadata)$Data.Type=="Clinic" | attributes(Metadata)$Data.Type=="SamplesAnnot" ) & attributes(Metadata)$Export=="No" )
if(length(NB.raw.clinic)>0) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[NB.raw.clinic],"data will not be exported"))
}
PatientLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="PatientsLexic" ][[1]]
if(attributes(Metadata)$Omics.type=="Single.Cell"){
SamplesLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="CellsLexic" ][[1]]
}
SamplesLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="SamplesLexic" ][[1]]
}
Metadata = ExportTSV(Metadata)
Verifiedpath(Metadata)
list.files(Verifiedpath(Metadata))
Verifiedpath(Metadata)
attributes(Metadata)
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
gc()
Metadata <- CreateDataset(project,"E:/DataBase") %>%
AddClinicFromObject(object = Clinic,
name = "rawsam",
type = "Samples",#alway set to this
setSamplesID.Column="title",
setPatientID.Column="patient_id:ch1",
force.replace = T)%>%
AddExpressionMatrixSC(ExpressionMatrix ="GSE132465_GEO_processed_CRC_10X_natural_log_TPM_matrix.txt.gz" ,
Cell.file = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"GSE132465_GEO_processed_CRC_10X_cell_annotation.txt.gz"))),
Genes.file =NULL ,
setID.cellAnnotColumn = "Index" ,
name = "TPM")
colnames(Metadata$TPM) = c("GeneID", colnames(Metadata$TPM)[-ncol(Metadata$TPM)])
Metadata$TPM$GeneID=NULL
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot",
CellsLexic = CL,
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = T, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
attributes(Metadata)
list.files(Verifiedpath(Metadata))
LF <- list.files(Verifiedpath(Metadata))
if(length(LF)!=0){
df <- file.info(list.files(Verifiedpath(Metadata), full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filepath <- rownames(df)
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
version <- na.omit(str_extract(filename,"V[0-9]*"))
Vnumber <- max(na.omit(as.numeric(str_extract(version,"([0-9]+).*$"))))+1
} else {
Vnumber = 1
attributes(Metadata)$Version <- "V1"}
Vnumber
if(Vnumber =="-Inf")
Vnumber =="-Inf"
#' ExportTSV Export Metadata inside object into ".tsv" files
#'
#' @param Metadata a Metadata  data files
#' @return ".tsv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
ExportTSV <- function (Metadata){
if(is.null(Metadata)){stop("Need a Metadata List file")}
if(!is.list(Metadata)){stop("Need a Metadata List file")}
list.files.path = attributes(Metadata)$File.path
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
project = attributes(Metadata)$Project
count <- 0
object <- length(Metadata)
name <- names(Metadata)
LF <- list.files(Verifiedpath(Metadata))
if(length(LF)!=0){
df <- file.info(list.files(Verifiedpath(Metadata), full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filepath <- rownames(df)
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
version <- na.omit(str_extract(filename,"V[0-9]*"))
Vnumber <- max(na.omit(as.numeric(str_extract(version,"([0-9]+).*$"))))+1
if(Vnumber =="-Inf"){Vnumber=1}
} else {
Vnumber = 1
attributes(Metadata)$Version <- "V1"}
message(paste0("Exporting Version V", Vnumber))
message(paste("Exporting", object, "objects"))
NB.raw.clinic <- which(c(attributes(Metadata)$Data.Type=="Clinic" | attributes(Metadata)$Data.Type=="SamplesAnnot" ) & attributes(Metadata)$Export=="No" )
if(length(NB.raw.clinic)>0) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[NB.raw.clinic],"data will not be exported"))
}
PatientLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="PatientsLexic" ][[1]]
if(attributes(Metadata)$Omics.type=="Single.Cell"){
SamplesLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="CellsLexic" ][[1]]
}
SamplesLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="SamplesLexic" ][[1]]
}
Metadata = ExportTSV(Metadata)
traceback()
#' ExportTSV Export Metadata inside object into ".tsv" files
#'
#' @param Metadata a Metadata  data files
#' @return ".tsv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
ExportTSV <- function (Metadata){
if(is.null(Metadata)){stop("Need a Metadata List file")}
if(!is.list(Metadata)){stop("Need a Metadata List file")}
list.files.path = attributes(Metadata)$File.path
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
project = attributes(Metadata)$Project
count <- 0
object <- length(Metadata)
name <- names(Metadata)
LF <- list.files(Verifiedpath(Metadata))
if(length(LF)!=0){
df <- file.info(list.files(Verifiedpath(Metadata), full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filepath <- rownames(df)
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
version <- na.omit(str_extract(filename,"V[0-9]*"))
Vnumber <- max(na.omit(as.numeric(str_extract(version,"([0-9]+).*$"))))+1
if(Vnumber =="-Inf"){Vnumber=1}
} else {
Vnumber = 1
attributes(Metadata)$Version <- "V1"}
message(paste0("Exporting Version V", Vnumber))
message(paste("Exporting", object, "objects"))
NB.raw.clinic <- which(c(attributes(Metadata)$Data.Type=="Clinic" | attributes(Metadata)$Data.Type=="SamplesAnnot" ) & attributes(Metadata)$Export=="No" )
if(length(NB.raw.clinic)>0) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[NB.raw.clinic],"data will not be exported"))
}
PatientLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="PatientsLexic" ][[1]]
if(attributes(Metadata)$Omics.type=="Single.Cell"){
CellsLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="CellsLexic" ][[1]]
}
SamplesLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="SamplesLexic" ][[1]]
}
Metadata = ExportTSV(Metadata)
attributes(Metadata)
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
gc()
Metadata <- CreateDataset(project,"E:/DataBase") %>%
AddClinicFromObject(object = Clinic,
name = "rawsam",
type = "Samples",#alway set to this
setSamplesID.Column="title",
setPatientID.Column="patient_id:ch1",
force.replace = T)%>%
AddExpressionMatrixSC(ExpressionMatrix ="GSE132465_GEO_processed_CRC_10X_natural_log_TPM_matrix.txt.gz" ,
Cell.file = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"GSE132465_GEO_processed_CRC_10X_cell_annotation.txt.gz"))),
Genes.file =NULL ,
setID.cellAnnotColumn = "Index" ,
name = "TPM")
#' ExportTSV Export Metadata inside object into ".tsv" files
#'
#' @param Metadata a Metadata  data files
#' @return ".tsv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
ExportTSV <- function (Metadata){
if(is.null(Metadata)){stop("Need a Metadata List file")}
if(!is.list(Metadata)){stop("Need a Metadata List file")}
list.files.path = attributes(Metadata)$File.path
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
project = attributes(Metadata)$Project
count <- 0
object <- length(Metadata)
name <- names(Metadata)
LF <- list.files(Verifiedpath(Metadata))
if(length(LF)!=0){
df <- file.info(list.files(Verifiedpath(Metadata), full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filepath <- rownames(df)
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
version <- na.omit(str_extract(filename,"V[0-9]*"))
Vnumber <- max(na.omit(as.numeric(str_extract(version,"([0-9]+).*$"))))+1
if(Vnumber =="-Inf"){Vnumber=1}
} else {
Vnumber = 1
attributes(Metadata)$Version <- "V1"}
message(paste0("Exporting Version V", Vnumber))
message(paste("Exporting", object, "objects"))
NB.raw.clinic <- which(c(attributes(Metadata)$Data.Type=="Clinic" | attributes(Metadata)$Data.Type=="SamplesAnnot" ) & attributes(Metadata)$Export=="No" )
if(length(NB.raw.clinic)>0) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[NB.raw.clinic],"data will not be exported"))
}
PatientLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="PatientsLexic" ][[1]]
if(attributes(Metadata)$Omics.type=="Single.Cell"){
CellsLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="CellsLexic" ][[1]]
}
SamplesLexic = lapply(ls(envir=.GlobalEnv), get)[lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Lexic") == "Yes" & lapply(lapply(ls(envir=.GlobalEnv), get), attr, "Name")=="SamplesLexic" ][[1]]
if(exists("PatientLexic", mode= "any" )) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","PatientLexic"))
if (file.exists(paste0(list.files.path$Project.Processes,"/",project,".PatientLexic.txt"))) {
#Delete file if it exists
file.remove(paste0(list.files.path$Project.Processes,"/",project,".PatientLexic.txt"))
}
PatientLexic <- lapply(PatientLexic, function(x) {c(x[1],x)}) #Mandatory to duplicated listName in the listed values.
lapply(PatientLexic, write, paste0(list.files.path$Project.Processes,"/",project,".PatientLexic.txt"), append=TRUE, ncolumns=1000 ) #write a ".txt" file without listNames
}
if(exists("SamplesLexic", mode= "any" )) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","SamplesLexic"))
if (file.exists(paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"))) {
#Delete file if it exists
file.remove(paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"))
}
SamplesLexic <- lapply(SamplesLexic, function(x) {c(x[1],x)}) #Mandatory to duplicated listName in the listed values.
lapply(SamplesLexic, write, paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"), append=TRUE, ncolumns=1000 ) #write a ".txt" file without listNames
}
if(exists("CellsLexic", mode= "any" )) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsLexic"))
if (file.exists(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"))) {
#Delete file if it exists
file.remove(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"))
}
CellsLexic <- lapply(CellsLexic, function(x) {c(x[1],x)}) #Mandatory to duplicated listName in the listed values.
lapply(CellsLexic, write, paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), append=TRUE, ncolumns=1000 ) #write a ".txt" file without listNames
}
NB.Samples.Patients.pheno <-   which(c(attributes(Metadata)$Data.Type=="Clinic" |attributes(Metadata)$Data.Type=="SamplesAnnot" ) & attributes(Metadata)$Export=="Yes" )
if(length(NB.Samples.Patients.pheno)!=0) {
for (j in NB.Samples.Patients.pheno) {
z <-  Metadata[[j]]
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j]))
if(Vnumber==1){
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".V1",".tsv")
write.table(z,row.names = F ,file = filename, sep = "\t")
} else {
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".V", Vnumber,".tsv")
write.table(z,row.names = F ,file = filename, sep = "\t")
}
} #for J in NBsamples
} # if( length(NB.Samples.Patients.pheno)!=0)
NB.Count <-  which(attributes(Metadata)$Data.Type=="Count")
if(length(NB.Count)!=0) {
for (j in NB.Count) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j], "file"))
if(attributes(Metadata)$Omics.type!="Single.Cell"){ z <- try(cbind("GeneSymbol" = rownames(Metadata[[j]]), Metadata[[j]]),silent = T)}
if(attributes(Metadata)$Omics.type=="Single.Cell"){ z = Metadata[[j]]}
if(Vnumber==1){
if(attributes(Metadata)$Omics.type!="Single.Cell"){
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j], ".V1.tsv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".V1.mtx")
if(!class(Metadata[[j]])[1]=="dgTMatrix"){Metadata[[j]] = as.matrix(Metadata[[j]]) }
writeMM(Matrix(as.matrix(Metadata[[j]]), sparse = T),file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
gc()
if(!"geneAnnot"%in%attributes(Metadata)$Data.Type){
message("No geneAnnot file found. Exporting geneAnnot from count matrix.")
filename.genes <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".GenesAnnot.V1.tsv")
write.table(rownames(Metadata[[j]]),row.names = F ,col.names = F ,file = filename.genes, sep = "\t")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","geneAnnot", "file"))}
if(!"CellsAnnot"%in%attributes(Metadata)$Data.Type){
message("No CellsAnnot file found. Exporting CellsAnnot from count matrix.")
filename.cells <- paste0(Verifiedpath(Metadata),"/",project,".CellsAnnot", "V1.tsv")
write.table(data.frame("Cells"= colnames(Metadata[[j]])),row.names = F ,file = filename.cells, sep = "\t")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))} else {
kk = which(attributes(Metadata)$Data.Type%in%"CellsAnnot"& attributes(Metadata)$Export=="Yes")
if(length(kk)>0){
filename.cells <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[kk], ".V1.tsv")
write.table(Metadata[[kk]],row.names = F ,file = filename.cells, sep = "\t")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))}
}}} else { #Vnumber ==1
if(attributes(Metadata)$Omics.type!="Single.Cell") {
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".V",Vnumber, ".tsv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)}
if(attributes(Metadata)$Omics.type=="Single.Cell") {
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".V",Vnumber,".mtx")
if(!class(Metadata[[j]])[1]=="dgTMatrix"){Metadata[[j]] = as.matrix(Metadata[[j]]) }
writeMM(Matrix(as.matrix(Metadata[[j]]), sparse = T),file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
gc()
if(!"geneAnnot"%in%attributes(Metadata)$Data.Type){
message("No geneAnnot file found. Exporting geneAnnot from count matrix.")
filename.genes <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".GenesAnnot",".V",Vnumber,".tsv")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","geneAnnot", "file"))
write.table(rownames(Metadata[[j]]),row.names = F ,col.names = F ,file = filename.genes, sep = "\t")
}
if(!"CellsAnnot"%in%attributes(Metadata)$Data.Type){
message("No CellsAnnot file found. Exporting CellsAnnot from count matrix.")
filename.cells <- paste0(Verifiedpath(Metadata),"/",project,".CellsAnnot",".V",Vnumber,".tsv")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))
write.table(data.frame("Cells"= colnames(Metadata[[j]])),row.names = F ,file = filename.cells, sep = "\t")} else {
filename.cells <- paste0(Verifiedpath(Metadata),"/",project,".CellsAnnot",".V",Vnumber,".tsv")
kk = which(attributes(Metadata)$Data.Type%in%"CellsAnnot"& attributes(Metadata)$Export=="Yes")
if(length(kk)>0){
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))
write.table(Metadata[[kk]],row.names = F ,file = filename.cells, sep = "\t")}
}
}
} #Vnumber !=1
}#j in NB.count
} # if(length(NB.Count)!=0)
NB.geneAnnot<-  which(attributes(Metadata)$Data.Type=="geneAnnot")
if(length(NB.geneAnnot)!=0) {
for (j in NB.geneAnnot) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j], "file"))
z <- Metadata[[j]]
if(Vnumber==1){
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".V1.tsv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else { #Vnumber==1
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".V",Vnumber,".tsv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} #Vnumber !=1
} #j in NGgeneannot
}# NBgeneAnnot
attributes(Metadata)$Version = paste0("V", Vnumber)
return(Metadata)
}#function
Metadata = ExportTSV(Metadata)
traceback()
gc()
Metadata = ExportTSV(Metadata)
