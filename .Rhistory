PatientsExportname = "PatientsAnnot" ,
SamplesLexic = SL,
SamplesAnnotToClean ="Clinic" ,
SamplesExportname = "SamplesAnnot" )
Metadata$Sample.pheno$SamplePathologicalState <- "Tumor"
Metadata$Sample.pheno$Disease <- "PDAC"
View(Metadata)
Metadata$Sample.pheno = NULL
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname = "PatientsAnnot" ,
SamplesLexic = SL,
SamplesAnnotToClean ="Clinic" ,
SamplesExportname = "SamplesAnnot",
keep.all.column = F )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname = "PatientsAnnot" ,
SamplesLexic = SL,
SamplesAnnotToClean ="Clinic" ,
SamplesExportname = "SamplesAnnot",
keep.all.column = F,force.replace = T )
View(Metadata)
Metadata[["PatientsAnnot"]]
Metadata$PatientsAnnot$samplePathologicalState <- "Tumor"
Metadata$PatientsAnnot$Disease <- "PDAC"
View(Metadata)
Metadata[["PatientsAnnot"]]
#' @param FilterSP default F, if T, keep only retrieved samples in SamplesAnnotation file
#' @param force.replace set as F. T : replace an already object with the same name
#' @param keep.all.column default T, copy all column from clinic, else only column from Lexics are built.
#' @param FilterGenes Filter for genes found in geneannotation file and rownames of matrices.
#' @importFrom utils menu
#' @import dplyr
#' @return a meataobject
#' @export
#'
#' @examples "non"
CleaningData = function(Metadata = NULL,
PatientsLexic = NULL,
PatientsAnnotToClean = NULL,
PatientsExportname = NULL,
SamplesLexic = NULL,
SamplesAnnotToClean = NULL,
CellsLexic = NULL,
SamplesExportname = NULL,
FilterSP =  F,
force.replace = F,
keep.all.column = T,
FilterGenes = F){
if(is.null(Metadata)){stop("No Metadata found.")}
if(is.null(PatientsLexic)&is.null(SamplesLexic)){stop("A PatientsLexic or SamplesLexic is mandatory for data cleaning")}
if(!is.null(SamplesLexic) & attributes(Metadata)$Omics.type!="Single.Cell"){
if(is.null(SamplesAnnotToClean)){stop("SamplesAnnotToClean has to be specify.")}
SamAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned == "No")
ClinicRaw = which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned == "No")
if(length(SamAnnotRaw)!=0){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = SamplesAnnotToClean,
exportname = SamplesExportname,
FilterSamples =  FilterSP,
force.replace = force.replace,
keep.all.column = keep.all.column )
}
}
if(length(SamAnnotRaw)<1 & !is.null(SamplesLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = SamplesExportname,
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column = keep.all.column )}
if(!all(is.null(PatientsExportname),is.null(PatientsLexic),is.null(PatientsAnnotToClean))){
if(is.null(PatientsAnnotToClean) & attributes(Metadata)$Omics.type!="Single.Cell"   ){
RP = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="No")
message("Creating a Patient clinical table from Samples annotation")
if(length(RP)>0){stop("Raw Patients clinical data found in Metaobject, Specify PatientsAnnotToClean")}
if(is.null(PatientsExportname)){stop("Specify PatientsExportname.")}
if(is.null(PatientsLexic)){stop("PatientsLexic is mandatory.")}
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = SamplesAnnotToClean,
exportname = PatientsExportname,
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace,
CleanFromOtherType = T,
keep.all.column = keep.all.column)
} else{
if(!is.null(PatientsAnnotToClean) & attributes(Metadata)$Omics.type!="Single.Cell"   ){
if(is.null(PatientsExportname)){stop("Specify PatientsExportname.")}
if(is.null(PatientsLexic)){stop("PatientsLexic is mandatory.")}
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = PatientsAnnotToClean,
exportname = PatientsExportname,
FilterPatients =  FilterSP,
FilterSamples = F,
force.replace = force.replace,
CleanFromOtherType = T,
keep.all.column = keep.all.column)
}
}
}
if(FilterGenes == T){
g =  which(attributes(Metadata)$Data.Type=="geneAnnot")[1]
m <- which(attributes(Metadata)$Data.Type=="Count")
object = Metadata[[g]]
if(!is.na(g)){geneAnnot = as.matrix(Metadata[[g]])}
for (i in m){
gene = rownames(Metadata[[i]])
sel = which(geneAnnot %in% gene)
colT = which(apply(geneAnnot, 2, function(x) which(x %in% geneAnnot[sel[1]]))>0)[1]
object <- object[object[,colT]%in%gene,]
if(length(object[,colT])!=length(unique(object[,colT]))){object <- object[!duplicated(object[,colT]),]}
Metadata[[i]] = Metadata[[i]][object[,colT],]
attributes(Metadata)$Cleaned[i] = "Yes"
}
Metadata[[g]] = object
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
if(is.null(CellsLexic)){stop("No CellsLexic was specified.")}
if("CellsAnnot"%in%attributes(Metadata)$Data.Type & !is.null(CellsLexic)){
CellAnnotRaw = which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned == "No")
pp = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="Yes")
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = CellsLexic,
type = "Cells",
ClinicToClean = names(Metadata)[CellAnnotRaw],
exportname = "Cells.Annotation",
FilterPatients =F,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =keep.all.column )
cellID = Metadata$Cells.Annotation$CellsBarcode
if(length(pp)>0){
clinic = Metadata[[pp]]
for (z in clinic$patientsID){
Metadata$Cells.Annotation$patientsID=ifelse(str_detect(pattern = paste0(z), cellID),z,Metadata$Cells.Annotation$patientsID)
}
}
} # CellAnnotRaw present
ClinicRaw = which(attributes(Metadata)$Data.Type=="Clinic" &attributes(Metadata)$Cleaned=="No")
SampleAnnotRaw = which(attributes(Metadata)$Data.Type=="SamplesAnnot" &attributes(Metadata)$Cleaned=="No")
# Patient annot absent
if(length(ClinicRaw)<1 & !is.null(PatientsLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = PatientsExportname,
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =keep.all.column )
}# Patient annot absent
# Patient annot Present
if(length(ClinicRaw)>0 & !is.null(PatientsLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = PatientsLexic,
type = "Patients",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = PatientsExportname,
FilterPatients =FilterSP,
FilterSamples = F,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =keep.all.column )
}# Patient annot Present
# Sample annot Present
if(length(SampleAnnotRaw)>0 & !is.null(SamplesLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[SampleAnnotRaw],
exportname = SamplesExportname,
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = F,
force.replace = force.replace,
keep.all.column =keep.all.column )
}    # Sample annot Present
# Sample annot Absent
if(length(SampleAnnotRaw)<1 & !is.null(SamplesLexic)){
Metadata <- CleaningClinic(Metadata = Metadata,
Lexic = SamplesLexic,
type = "Samples",
ClinicToClean = names(Metadata)[ClinicRaw],
exportname = SamplesExportname,
FilterPatients =F,
FilterSamples = FilterSP,
CleanFromOtherType = T,
force.replace = force.replace,
keep.all.column =keep.all.column )
}    # Sample annot Absent
}
return(Metadata)
}
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname = "PatientsAnnot" ,
SamplesLexic = SL,
SamplesAnnotToClean =NULL ,
SamplesExportname = "SamplesAnnot",
keep.all.column = F,
force.replace = T )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname = "PatientsAnnot" ,
SamplesLexic = SL,
SamplesAnnotToClean ="Clinic" ,
SamplesExportname = "SamplesAnnot",
keep.all.column = F,
force.replace = T )
View(Metadata)
rm(CleaningData())
rm(CleaningData)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname = "PatientsAnnot" ,
SamplesLexic = SL,
SamplesAnnotToClean ="Clinic" ,
SamplesExportname = "SamplesAnnot",
keep.all.column = F,
force.replace = T )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname = "PatientsAnnot" ,
SamplesLexic = SL,
SamplesAnnotToClean ="Clinic" ,
SamplesExportname = "SamplesAnnot",
keep.all.column = T,
force.replace = T )
View(Metadata)
View(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname = "PatientsAnnot" ,
SamplesLexic = SL,
SamplesAnnotToClean ="Clinic" ,
SamplesExportname = "SamplesAnnot",
keep.all.column = F,
force.replace = T )
View(Metadata)
Metadata$PatientsAnnot$disease <- "PDAC"
Metadata$SamplesAnnot$samplePathologicalState <- "Tumor"
CheckMeta(Metadata)
# Step 3.1 : Build Metadata object from Raw genomic and Raw clinic folders.
geneAnnotation <- data.table::fread(paste0(list.files.path$References,"/HG-U133_Plus_2.Affymetrix.Porbes.Annot.txt"),header = T)
Metadata <- AddObjetToMeta(Metadata,object = geneAnnotation, name = "geneAnnotation",Data.type = "geneAnnotation.file", Raw = "No" )
# Step 3.1 : Build Metadata object from Raw genomic and Raw clinic folders.
geneAnnotation <- data.table::fread(paste0(Refpath(Metadata),"/HG-U133_Plus_2.Affymetrix.Porbes.Annot.txt"),header = T)
Metadata =CreateDataset(project, path) %>%
AddClinicFromFile(ClinicFile = "Gao.PDX.Samples.clinic.txt",
setSamplesID.Column = "SamplesID",
setPatientID.Column = "Samplestitle",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix ="Gao.PDX.PublishedNormalized.matrix.txt",
name ='NormCount'  ) %>%
AddObjetToMeta(object = geneAnnotation,
name = "geneAnnotation",
Data.type = "geneAnnotation.file")
Metadata =CreateDataset(project, path) %>%
AddClinicFromFile(ClinicFile = "Gao.PDX.Samples.clinic.txt",
setSamplesID.Column = "SamplesID",
setPatientID.Column = "Samplestitle",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix ="Gao.PDX.PublishedNormalized.matrix.txt",
name ='NormCount'  ) %>%
AddObjetToMeta(object = geneAnnotation,
name = "geneAnnotation",
Data.type = "geneAnnot")
Metadata =CreateDataset(project, path) %>%
AddClinicFromFile(ClinicFile = "Gao.PDX.Samples.clinic.txt",
setSamplesID.Column = "SamplesID",
setPatientID.Column = "Samplestitle",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix ="Gao.PDX.PublishedNormalized.matrix.txt",
name ='NormCount'  ) %>%
AddObjetToMeta(object = geneAnnotation,
name = "geneAnnotation",
Data.type = "geneAnnot",Export = "No")
Metadata =CreateDataset(project, path) %>%
AddClinicFromFile(ClinicFile = "Gao.PDX.Samples.clinic.txt",
setSamplesID.Column = "SamplesID",
setPatientID.Column = "Samplestitle",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix ="Gao.PDX.PublishedNormalized.matrix.txt",
name ='NormCount'  ) %>%
AddObjetToMeta(object = geneAnnotation,
name = "geneAnnotation",
Data.type = "geneAnnot",
Export = "No",
Omics.type = "RNAseq")
View(Metadata)
head(Metadata$NormCount[,1:5])
Metadata$NormCount <- Metadata$NormCount[,-1]  # First colonne, geneSymbols drop off.
head(Metadata$NormCount[,1:5])
row.names(Metadata$Clinic) <- Metadata$Clinic$SamplesID
CheckMeta(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname = "PatientsAnnot" ,
SamplesLexic = SL,
SamplesAnnotToClean ="Clinic" ,
SamplesExportname = "SamplesAnnot",
keep.all.column = F,
force.replace = T )
attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned == "No"
attributes(Metadata)$Data.Type=="SamplesAnnot"
attributes(Metadata)$Cleaned == "No"
View(Metadata)
View(geneAnnotation)
Metadata =CreateDataset(project, path) %>%
AddClinicFromFile(ClinicFile = "Gao.PDX.Samples.clinic.txt",
setSamplesID.Column = "SamplesID",
setPatientID.Column = "Samplestitle",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix ="Gao.PDX.PublishedNormalized.matrix.txt",
name ='NormCount'  ) %>%
AddgeneAnnotFromObject(object = geneAnnotation,
geneAnnotIDcolumn = "ID")
Metadata =CreateDataset(project, path) %>%
AddClinicFromFile(ClinicFile = "Gao.PDX.Samples.clinic.txt",
setSamplesID.Column = "SamplesID",
setPatientID.Column = "Samplestitle",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix ="Gao.PDX.PublishedNormalized.matrix.txt",
name ='NormCount'  ) %>%
AddgeneAnnotFromObject(object = as.data.frame(geneAnnotation),
geneAnnotIDcolumn = "ID")
head(Metadata$NormCount[,1:5])
Metadata$NormCount <- Metadata$NormCount[,-1]  # First colonne, geneSymbols drop off.
head(Metadata$NormCount[,1:5])
row.names(Metadata$Clinic) <- Metadata$Clinic$SamplesID
CheckMeta(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname = "PatientsAnnot" ,
SamplesLexic = SL,
SamplesAnnotToClean ="Clinic" ,
SamplesExportname = "SamplesAnnot",
keep.all.column = F,
force.replace = T )
Metadata$SamplesAnnot$samplePathologicalState <- "Tumor"
Metadata$PatientsAnnot$disease <- "PDAC"
CheckMeta(Metadata)
attributes(Metadata)
Metadata$SamplesAnnot$samplePathologicalState <- "Tumor"
Metadata$PatientsAnnot$disease <- "PDAC"
CheckMeta(Metadata)
Metadata$geneAnnotation
rownames(Metadata$geneAnnotation) <- Metadata$geneAnnotation$ID
head(Metadata$geneAnnotation)
Metadata = ExportTSV(Metadata)
CheckLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "Microarray",
Platform = "Illumina" ,
Run.spec = "HG-U133_Plus_2",
First.Author =  "Gao H",
DOI = "10.1038/nm.3954",
project = project,
Comment = NA,
User = "JR-Analytics")
CheckLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "Microarray",
Platform = "Illumina" ,
Run.spec = "HG-U133_Plus_2",
First.Author =  "Gao H",
DOI = "10.1038/nm.3954",
Comment = NA,
User = "JR-Analytics")
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "Microarray",
Platform = "Illumina" ,
Run.spec = "HG-U133_Plus_2",
First.Author =  "Gao H",
DOI = "10.1038/nm.3954",
Comment = NA,
User = "JR-Analytics")
project <- "ICGC.PACA.AU.RNAseq"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path) # if all are TRUE ; next step can be done
# Expression matrix
{
dt <- data.table::fread(paste0(Rawpath(Metadata),"/exp_seq.PACA-AU.tsv.gz"))
dt2 <- distinct(dt) #suppressing dupliated rows
rm(dt)
summary(unique(dt2$icgc_donor_id))
summary(unique(dt2$icgc_specimen_id))
summary(unique(dt2$icgc_sample_id))
summary(unique(dt2$submitted_sample_id))
DFnorm <- data.table::dcast(dt2, gene_id~icgc_sample_id , value.var =  "normalized_read_count",fill = 0,drop = F)
DFnorm <- as.data.frame(DFnorm)
rownames(DFnorm) <- DFnorm$gene_id
DFraw <- data.table::dcast(dt2, gene_id~icgc_sample_id , value.var =  "raw_read_count",fill = 0,drop = F)
DFraw <- as.data.frame(DFraw)
rownames(DFraw) <- DFraw$gene_id
rm(dt2,DFnormL)
}#expression Matrix
# Clinical data
{
pheno <- data.table::fread(paste0(Rawpath(Metadata),"/specimen.PACA-AU.tsv.gz"))
patient <- data.table::fread(paste0(Rawpath(Metadata),"/donor.PACA-AU.tsv.gz"))
PatientToSampels <- data.table::fread(paste0(Rawpath(Metadata),"/sample.PACA-AU.tsv.gz"))
colnames(pheno)[colnames(pheno)%in%colnames(patient)] # colnames in common "icgc_donor_id"
dt <- list(pheno,patient) %>% purrr::reduce(left_join, by="icgc_donor_id")
colnames(dt)[colnames(dt)%in%colnames(PatientToSampels)] # colnames in common "icgc_specimen_id"
dt <- list(dt,PatientToSampels) %>% purrr::reduce(left_join, by="icgc_specimen_id")
}# Clinical data
colnames(dt)
Metadata =CreateDataset(project, path) %>%
AddClinicFromObject(object = dt,
setSamplesID.Column = "icgc_specimen_id",
setPatientID.Column = "icgc_donor_id.x",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix =DFnorm,
name ='NormCount'  ) %>%
AddExpressionMatrixRNAseq(ExpressionMatrix =DFraw,
name ='RawCount'  )
View(dt)
View(DFnorm)
Metadata =CreateDataset(project, path) %>%
AddClinicFromObject(object = dt,
setSamplesID.Column = "icgc_sample_id",
setPatientID.Column = "icgc_sample_id",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix =DFnorm,
name ='NormCount'  ) %>%
AddExpressionMatrixRNAseq(ExpressionMatrix =DFraw,
name ='RawCount'  )
traceback()
dt$icgc_sample_id
unique(dt$icgc_sample_id)
Metadata =CreateDataset(project, path) %>%
AddClinicFromObject(object = dt,
setSamplesID.Column = "icgc_sample_id",
setPatientID.Column = 50,
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix =DFnorm,
name ='NormCount'  ) %>%
AddExpressionMatrixRNAseq(ExpressionMatrix =DFraw,
name ='RawCount'  )
Metadata =CreateDataset(project, path) %>%
AddClinicFromObject(object = as.data.frame(dt),
setSamplesID.Column = "icgc_sample_id",
setPatientID.Column = "icgc_sample_id",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixRNAseq(ExpressionMatrix =DFnorm,
name ='NormCount'  ) %>%
AddExpressionMatrixRNAseq(ExpressionMatrix =DFraw,
name ='RawCount'  )
attributes(Metadata) # attributes(Metadata)$Data.type has the data type information for multiple functions
head(Metadata$RawCount[,1:5])
rownames(Metadata$RawCount) <- Metadata$RawCount$gene_id
Metadata$RawCount$gene_id <- NULL
head(Metadata$NormCount[,1:5])
rownames(Metadata$NormCount) <- Metadata$NormCount$gene_id
Metadata$NormCount$gene_id <- NULL
CheckMeta(Metadata)
View(Metadata)
#Cleaning of TNM and AJCC stage because are a mess!!!!!
{
Metadata$Clinic$TNM <-    ifelse(  Metadata$Clinic$tumour_stage_system=="TNM",Metadata$Clinic$tumour_stage,
ifelse(str_detect( Metadata$Clinic$donor_tumour_stage_at_diagnosis, "T"),
Metadata$Clinic$donor_tumour_stage_at_diagnosis,   NA ))
Metadata$Clinic$TNM <- ifelse(  str_detect( Metadata$Clinic$TNM, "T"), Metadata$Clinic$TNM,NA)
Metadata$Clinic$TNM <- ifelse( !is.na(Metadata$Clinic$donor_tumour_stage_at_diagnosis)&str_detect( Metadata$Clinic$donor_tumour_stage_at_diagnosis, "T"),
Metadata$Clinic$donor_tumour_stage_at_diagnosis,
ifelse(Metadata$Clinic$tumour_stage_system=="TNM",Metadata$Clinic$tumour_stage,NA))
Metadata$Clinic$TNM <- ifelse(  str_detect( Metadata$Clinic$TNM, "T"), Metadata$Clinic$TNM,NA)
Metadata$Clinic$AJCC <-    ifelse(  Metadata$Clinic$tumour_stage_system!="TNM",Metadata$Clinic$tumour_stage,
ifelse(!str_detect( Metadata$Clinic$donor_tumour_stage_at_diagnosis, "T"),
Metadata$Clinic$donor_tumour_stage_at_diagnosis,   NA ))
Metadata$Clinic$AJCC <- ifelse(  str_detect( Metadata$Clinic$AJCC, "T"), NA,    Metadata$Clinic$AJCC)
Metadata$Clinic$AJCC <- ifelse(  is.na(Metadata$Clinic$AJCC) &  !str_detect( Metadata$Clinic$donor_tumour_stage_at_diagnosis, "T"),
Metadata$Clinic$donor_tumour_stage_at_diagnosis,    Metadata$Clinic$AJCC )
Metadata$Clinic$AJCC <- ifelse(  is.na(Metadata$Clinic$AJCC)&!is.na(Metadata$Clinic$tumour_stage_supplemental),
Metadata$Clinic$tumour_stage_supplemental,    Metadata$Clinic$AJCC)
}#Cleaning of TNM and AJCC stage because are a mess!!!!!
