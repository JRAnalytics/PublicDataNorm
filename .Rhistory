Meta$Cells.Annot$SampleID = unlist(lapply(str_split(Meta$Cells.Annot$CellsID, "_"),"[[",1))
Meta$Cells.Annot$PatientID = as.character(gsub("\\D","",Meta$Cells.Annot$SampleID))
Meta$Cells.Annot$SampleType = ifelse(str_detect(Meta$Cells.Annot$SampleID, "PDAC"), "Tumor", "Normal")
Meta$Cells.Annot$Tissue = "Pancreas"
Meta$Cells.Annot$Treatment = "No"
colnames(Meta$Cells.Annot)
head(Meta$Cells.Annot)
names(SamplesLexic)
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientsID","PatientID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesID","CellsID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesOrigin","Tissue") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplePathologicalState","SampleType") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("HadTreatment","Treatment") )
Meta <- CleaningClinic(Metadata = Meta,
ClinicToClean = "Clinic",
CleanFromOtherType =T,
name = "Chen.SamplesAnnot.short",
type = "Samples",
list.files.path = list.files.path,
project = project)
Meta$Chen.SamplesAnnot.short$SpecimenSampling ="Pancreatectomy"
Meta$Chen.SamplesAnnot.short$SpecimenOrgan  ="Pancreas"
colnames(Meta$Clinic)
head(Meta$Clinic)
Meta$Clinic$Disease   = "Pancreatic ductal adenocarcinoma"
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("PatientsID","PatientID") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("Disease","Disease") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("TreatmentInfo","treatment:ch1") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("PatientSampling","PatientSampling") )
Meta <- CleaningClinic(Metadata = Meta,
ClinicToClean = "Clinic",
type = "Patients",
name = "Chen.short.cleaned.Clinic",
list.files.path = list.files.path,
project = project)
Meta$Chen.short.cleaned.Clinic$PatientSampling = "Pancreatectomy"
gc()
Meta = ExportCSV(Meta,
list.files.path = list.files.path,
project = project)
gc()
attributes(Meta)
View(Meta)
Meta[["geneAnnot"]]
for(i in Clinic$SampleID[Clinic$SampleID!="ADJ5"]){
files = list.files(list.files.path$Project.RawData)[str_detect(list.files(list.files.path$Project.RawData), i)]
Meta = try(AddExpressionMatrixSC(Metadata = NULL,
Export = T,
Raw.file.path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =files[str_detect(files, "barcode")],
Genes.file = files[str_detect(files, "genes")],
name = "Raw.count",
force.replace = F), silent = T)
gc()
if(class(Meta)=="try-error"){
message(paste(i, "has not the same length in Genes, or Samples in Matrix"))
Meta = AddExpressionMatrixSC(Metadata = NULL,
Export = T,
Raw.file.path = list.files.path$Project.RawData,
name.local.file =files[str_detect(files, ".mtx")],
Cell.file =NULL ,
name = "Raw.count",
force.replace = F)
colnames(Meta$Raw.count.matrix) = paste0(rep(1:ncol(Meta$Raw.count.matrix)))
}
colnames(Meta$Raw.count.matrix) = paste0(i,"_",colnames(Meta$Raw.count.matrix))
if(!exists("test")){
test = Matrix(Meta$Raw.count.matrix)
} else {
if(nrow(test)==nrow(Meta$Raw.count.matrix)) {
test = cbind(test, Matrix(Meta$Raw.count.matrix)) } else {
test = full_join(test, Meta$Raw.count.matrix)
rownames(test) = rownames(Matrix(Meta$Raw.count.matrix))
}}
rm(i,files)
gc()
}
{
Meta = AddExpressionMatrixSC(Metadata = NULL,
Export = T,
Raw.file.path = list.files.path$Project.RawData,
name.local.file ="GSM6567157_PDAC1_matrix.mtx.gz",
Cell.file = NULL ,
Genes.file = "GSM6567157_PDAC1_genes.tsv.gz",
name = "Raw.count",
force.replace = F)
Meta$Raw.count.matrix = test
Meta= AddClinicFromObject(Meta,
object = {data.frame("CellsID" = colnames(Meta$Raw.count.matrix), row.names =colnames(Meta$Raw.count.matrix) )},
name = "Cells.Annot",
Export = "Yes",
type = "Cells")
gc()
rm(test)
}
Meta= AddClinicFromObject(Meta,
name = "Clinic" ,
object = Clinic,
Export = "No",
type = "Patients")
attributes(Meta)
Meta = AddgeneAnnotFromObject(Meta,
object = as.data.frame(data.table::fread(file.path(list.files.path$Project.RawData, "GSM6567157_PDAC1_genes.tsv.gz"),header = F)),
Filter.Genes = F,
force.replace = T)
attributes(Meta)
colnames(Meta$geneAnnotation) = c("Ensemble", "GeneName", "Type")
rownames(Meta$geneAnnotation) = Meta$geneAnnotation$Ensemble
attributes(Meta)
#No samples data file in published exported file. On ly 1 Patient.
LexicData(list.files.path, replaceLexic = T)
Meta$Cells.Annot$SampleID = unlist(lapply(str_split(Meta$Cells.Annot$CellsID, "_"),"[[",1))
Meta$Cells.Annot$PatientID = as.character(gsub("\\D","",Meta$Cells.Annot$SampleID))
Meta$Cells.Annot$SampleType = ifelse(str_detect(Meta$Cells.Annot$SampleID, "PDAC"), "Tumor", "Normal")
Meta$Cells.Annot$Tissue = "Pancreas"
Meta$Cells.Annot$Treatment = "No"
colnames(Meta$Cells.Annot)
head(Meta$Cells.Annot)
names(SamplesLexic)
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("PatientsID","PatientID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesID","CellsID") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplesOrigin","Tissue") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("SamplePathologicalState","SampleType") )
SamplesLexic <- AddKeyLexic(lexic = SamplesLexic, Param = c("HadTreatment","Treatment") )
Meta <- CleaningClinic(Metadata = Meta,
ClinicToClean = "Clinic",
CleanFromOtherType =T,
name = "Chen.SamplesAnnot.short",
type = "Samples",
list.files.path = list.files.path,
project = project)
Meta$Chen.SamplesAnnot.short$SpecimenSampling ="Pancreatectomy"
Meta$Chen.SamplesAnnot.short$SpecimenOrgan  ="Pancreas"
colnames(Meta$Clinic)
head(Meta$Clinic)
Meta$Clinic$Disease   = "Pancreatic ductal adenocarcinoma"
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("PatientsID","PatientID") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("Disease","Disease") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("TreatmentInfo","treatment:ch1") )
PatientLexic <- AddKeyLexic(lexic = PatientLexic, Param = c("PatientSampling","PatientSampling") )
Meta <- CleaningClinic(Metadata = Meta,
ClinicToClean = "Clinic",
type = "Patients",
name = "Chen.short.cleaned.Clinic",
list.files.path = list.files.path,
project = project)
Meta$Chen.short.cleaned.Clinic$PatientSampling = "Pancreatectomy"
gc()
attributes(Meta)
Meta = ExportCSV(Meta,
list.files.path = list.files.path,
project = project)
attributes(Meta)
which(attributes(Meta)$Data.Type%in%"CellsAnnot"& attributes(Meta)$Export=="Yes")
!"CellsAnnot"%in%attributes(Meta)$Data.Type
View(Meta)
Meta[["Cells.Annot"]]
which(attributes(Meta)$Data.Type%in%"CellsAnnot"& attributes(Meta)$Export=="Yes")
length(which(attributes(Meta)$Data.Type%in%"CellsAnnot"& attributes(Meta)$Export=="Yes"))
#'
#' @param Metadata a Metadata  data files
#' @param list.files.path dirpath
#' @param project project
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @import Matrix
#' @examples "non"
ExportCSV <- function (Metadata, list.files.path, project){
if(is.null(Metadata)){stop("Need a Metadata List file")}
if(!is.list(Metadata)){stop("Need a Metadata List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
count <- 0
object <- length(Metadata)
name <- names(Metadata)
LF <- list.files(list.files.path$Project.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Project.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filepath <- rownames(df)
filename <-  unlist(lapply(str_split(filepath,paste0(project,"/")),"[[",2))
version <- na.omit(str_extract(filename,"V[0-9]*"))
Vnumber <- max(na.omit(as.numeric(str_extract(version,"([0-9]+).*$"))))+1
} else {
Vnumber = 1
attributes(Metadata)$Version <- "V1"}
message(paste0("Exporting Version V", Vnumber))
message(paste("Exporting", object, "objects"))
NB.raw.clinic <- which(c(attributes(Metadata)$Data.Type=="Clinic" | attributes(Metadata)$Data.Type=="SamplesAnnot" ) & attributes(Metadata)$Export=="No" )
if(length(NB.raw.clinic)>0) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[NB.raw.clinic],"data will not be exported"))
}
if(exists("PatientLexic", mode= "any" )) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","PatientLexic"))
if (file.exists(paste0(list.files.path$Project.Processes,"/",project,".PatientLexic.txt"))) {
#Delete file if it exists
file.remove(paste0(list.files.path$Project.Processes,"/",project,".PatientLexic.txt"))
}
PatientLexic <- lapply(PatientLexic, function(x) {c(x[1],x)}) #Mandatory to duplicated listName in the listed values.
lapply(PatientLexic, write, paste0(list.files.path$Project.Processes,"/",project,".PatientLexic.txt"), append=TRUE, ncolumns=1000 ) #write a ".txt" file without listNames
}
if(exists("SamplesLexic", mode= "any" )) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","SamplesLexic"))
if (file.exists(paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"))) {
#Delete file if it exists
file.remove(paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"))
}
SamplesLexic <- lapply(SamplesLexic, function(x) {c(x[1],x)}) #Mandatory to duplicated listName in the listed values.
lapply(SamplesLexic, write, paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"), append=TRUE, ncolumns=1000 ) #write a ".txt" file without listNames
}
NB.Samples.Patients.pheno <-   which(c(attributes(Metadata)$Data.Type=="Clinic" |attributes(Metadata)$Data.Type=="SamplesAnnot" ) & attributes(Metadata)$Export=="Yes" )
if(length(NB.Samples.Patients.pheno)!=0) {
for (j in NB.Samples.Patients.pheno) {
z <-  Metadata[[j]]
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j]))
if(Vnumber==1){
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V1",".csv")
write.table(z,row.names = F ,file = filename, sep = "\t")
} else {
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V", Vnumber,".csv")
write.table(z,row.names = F ,file = filename, sep = "\t")
}
} #for J in NBsamples
} # if( length(NB.Samples.Patients.pheno)!=0)
NB.Count <-  which(attributes(Metadata)$Data.Type=="Count")
if(length(NB.Count)!=0) {
for (j in NB.Count) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j], "file"))
if(attributes(Metadata)$Omics.type!="Single.Cell"){ z <- try(cbind("GeneSymbol" = rownames(Metadata[[j]]), Metadata[[j]]),silent = T)}
if(attributes(Metadata)$Omics.type=="Single.Cell"){ z = Metadata[[j]]}
if(Vnumber==1){
if(attributes(Metadata)$Omics.type!="Single.Cell"){
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j], ".V1.csv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V1.mtx")
if(!class(Metadata[[j]])[1]=="dgCMatrix"){Metadata[[j]] = as.matrix(Metadata[[j]]) }
writeMM(Matrix(Metadata[[j]], sparse = T),file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
gc()
if(!"geneAnnot"%in%attributes(Metadata)$Data.Type){
message("No geneAnnot file found. Exporting geneAnnot from count matrix.")
filename.genes <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".GenesAnnot.V1.csv")
write.table(rownames(Metadata[[j]]),row.names = F ,col.names = F ,file = filename.genes, sep = "\t")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","geneAnnot", "file"))}
if(!"CellsAnnot"%in%attributes(Metadata)$Data.Type){
message("No CellsAnnot file found. Exporting CellsAnnot from count matrix.")
filename.cells <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".CellsAnnot", "V1.csv")
write.table(data.frame("Cells"= colnames(Metadata[[j]])),row.names = F ,file = filename.cells, sep = "\t")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))} else {
kk = which(attributes(Metadata)$Data.Type%in%"CellsAnnot"& attributes(Metadata)$Export=="Yes")
if(length(kk)>0){
filename.cells <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[kk], ".V1.csv")
write.table(Metadata[[kk]],row.names = F ,file = filename.cells, sep = "\t")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))}
}}} else { #Vnumber ==1
if(attributes(Metadata)$Omics.type!="Single.Cell") {
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V",Vnumber, ".csv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)}
if(attributes(Metadata)$Omics.type=="Single.Cell") {
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V",Vnumber,".mtx")
if(!class(Metadata[[j]])[1]=="dgCMatrix"){Metadata[[j]] = as.matrix(Metadata[[j]]) }
writeMM(Matrix(Metadata[[j]], sparse = T),file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
gc()
if(!"geneAnnot"%in%attributes(Metadata)$Data.Type){
message("No geneAnnot file found. Exporting geneAnnot from count matrix.")
filename.genes <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".GenesAnnot",".V",Vnumber,".csv")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","geneAnnot", "file"))
write.table(rownames(Metadata[[j]]),row.names = F ,col.names = F ,file = filename.genes, sep = "\t")
}
if(!"CellsAnnot"%in%attributes(Metadata)$Data.Type){
message("No CellsAnnot file found. Exporting CellsAnnot from count matrix.")
filename.cells <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".CellsAnnot",".V",Vnumber,".csv")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))
write.table(data.frame("Cells"= colnames(Metadata[[j]])),row.names = F ,file = filename.cells, sep = "\t")} else {
filename.cells <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".CellsAnnot",".V",Vnumber,".csv")
kk = which(attributes(Metadata)$Data.Type%in%"CellsAnnot"& attributes(Metadata)$Export=="Yes")
if(length(kk)>0){
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))
write.table(Metadata[[kk]],row.names = F ,file = filename.cells, sep = "\t")}
}
}
} #Vnumber !=1
}#j in NB.count
} # if(length(NB.Count)!=0)
NB.geneAnnot<-  which(attributes(Metadata)$Data.Type=="geneAnnot")
if(length(NB.geneAnnot)!=0) {
for (j in NB.geneAnnot) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j], "file"))
z <- Metadata[[j]]
if(Vnumber==1){
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V1.csv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else { #Vnumber==1
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V",Vnumber,".csv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} #Vnumber !=1
} #j in NGgeneannot
}# NBgeneAnnot
attributes(Metadata)$Version = paste0("V", Vnumber)
return(Metadata)
}#function
Meta = ExportCSV(Meta,
list.files.path = list.files.path,
project = project)
attributes(Meta)
attributes(Meta)
Meta= AddClinicFromObject(Meta,
object = {data.frame("CellsID" = colnames(Meta$Raw.count.matrix), row.names =colnames(Meta$Raw.count.matrix) )},
name = "Cells.Annot",
Export = "Yes",
type = "Cells",
force.replace = F
)
Meta= AddClinicFromObject(Meta,
object = {data.frame("CellsID" = colnames(Meta$Raw.count.matrix), row.names =colnames(Meta$Raw.count.matrix) )},
name = "Cells.Annot",
Export = "Yes",
type = "Cells",
force.replace = T
)
attributes(Meta)
which(str_detect(names(Meta), "Cells.Annot" ))
attributes(Meta)$Export[3]
#' @param type can be Samples", "Patients" or "Cells", to defiens Data.type attributes
#' @param Export data to export after cleaning c("Yes", "No")
#' @param force.replace set as F. T : replace an already object with the same name
#' @import matrixStats
#'
#' @return a Metadata Object
#' @export
#'
#' @examples "none"
#'
AddClinicFromObject  <- function(Metadata,
object,
name,
SamplesFilter = F,
type = c("Samples", "Patients", "Cells"),
Export = c("Yes", "No"),
force.replace = F){
if(!is.list(Metadata)) { stop("Metadata object should be a list")}
if(is.null(object)) { stop("Object is null")}
if(is.null(name)) { stop("name should be specified, as character")}
if(!is.character(name)) { stop("name should be specified as character")}
if(is.null(type)) { stop("Data.type should be specified")}
if(is.null(Export)) { stop("Export should be specified")}
if(!type%in%c("Samples", "Patients", "Cells")) { stop("type should be specified from this values c('Samples', 'Patients'or 'Cells') ")}
if(!Export%in%c("Yes", "No")) { stop("Export should be specified 'Yes' or 'No'")}
if(!all(str_detect(names(Metadata),name)==F)){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}}
l <- length(Metadata)
zz <- which(attributes(Metadata)$Data.Type=="Count")[1]
samples <- colnames(Metadata[[zz]])
val <- samples[which(samples%in%as.matrix(object))[1]]
colT <- which(matrixStats::colAnys(as.matrix(object),value = val))
if(length(colT)>1){ colT <- colT[1]}
message("Found Samples :")
print(summary(samples%in%as.matrix(object)))
message("Unfound Samples :")
print(samples[!samples%in%as.matrix(object)])
if(SamplesFilter==T){
message("Selecting only Samples present in both Count and Clinical data.")
# Diviser chaque élément de la colonne en un vecteur de sous-chaînes
substrings <- strsplit(as.data.frame(object)[,colT], ";")
# Vérifier si chaque valeur du vecteur est présente dans chaque vecteur de sous-chaînes
est_present <- sapply(substrings, function(x) any(colnames(Metadata[[zz]]) %in% x))
# Récupérer les index de position correspondants
indices <- which(est_present)
object <- object[indices,]
}
if(!all(str_detect(names(Metadata),name)==F)){
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- object
t= which(str_detect(names(Metadata),name))
if(!type%in%c("Samples","Patients", "Cells")){stop("type must be set to Samples, Patients or Cells")}
if(type == "Samples") {attributes(Metadata)$Data.Type[t] <-  c("SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type[t] <-  c("Clinic")}
if(type == "Cells") {attributes(Metadata)$Data.Type[t] <-  c("CellsAnnot")}
if(Export=="Yes"){attributes(Metadata)$Export[t] <- c("Yes") } else {attributes(Metadata)$Export[t] <- c("No") }
return(Metadata)
} else {
Metadata[[l+1]] <- object
names(Metadata)[l+1] <- name
if(!type%in%c("Samples","Patients", "Cells")){stop("type must be set to Samples, Patients or Cells")}
if(l==0) {   if(type == "Samples") {attributes(Metadata)$Data.Type <-  c("SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c("Clinic")}
if(type == "Cells") {attributes(Metadata)$Data.Type <-  c("CellsAnnot")}
if(Export=="Yes"){attributes(Metadata)$Export <- c("Yes") } else {attributes(Metadata)$Export <- c("No") }
} else {  if(type == "Samples") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinic")}
if(type == "Cells") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"CellsAnnot")}
if(Export=="Yes"){attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") } else {attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"No") }
}}
return(Metadata)
}
Meta= AddClinicFromObject(Meta,
object = {data.frame("CellsID" = colnames(Meta$Raw.count.matrix), row.names =colnames(Meta$Raw.count.matrix) )},
name = "Cells.Annot",
Export = "Yes",
type = "Cells",
force.replace = T
)
attributes(Meta)
gc()
Meta = ExportCSV(Meta,
list.files.path = list.files.path,
project = project)
gc()
attributes(Meta)
CheckLocalDatabase(Meta = Meta,
list.files.path = list.files.path,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x Illumina Novaseq6000" ,
Run.spec = NA,
First.Author = "Chen K.",
DOI = "10.1186/s12967-023-04051-4",
project = project,
Comment = NA,
User = "JR-Analytics")
attributes(Meta)
AddLocalDatabase(Meta = Meta,
list.files.path = list.files.path,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x Illumina Novaseq6000" ,
Run.spec = NA,
First.Author = "Chen K.",
DOI = "10.1186/s12967-023-04051-4",
project = project,
Comment = NA,
User = "JR-Analytics")
library(PublicDataNorm)
library(PublicDataNorm)
devtools::build_rmd("vignettes/PublicDataNorm.Rmd")
library(PublicDataNorm)
vignette(PublicDataNorm)
vignette("PublicDataNorm")
vignettes("PublicDataNorm")
vignette("PublicDataNorm")
devtools::load_all()
vignette("PublicDataNorm")
R CMD build PublicDataNorm
devtools::install(build_vignettes=TRUE)
library(PublicDataNorm)
vignette(PublicDataNorm)
vignette("PublicDataNorm")
library(PublicDataNorm)
vignette("PublicDataNorm")
library(PublicDataNorm)
vignette("PublicDataNorm")
vignette("PublicDataNorm")
library(PublicDataNorm)
vignette("PublicDataNorm")
vignette("PublicDataNorm")
library(PublicDataNorm)
vignette("PublicDataNorm")
library(PublicDataNorm)
vignette("PublicDataNorm")
devtools::install(build_vignettes=TRUE)
?AddClinicFromObject
?AddExpressionMatrixMArray
?AddClinicFromFile
?AddgeneAnnotFromObject
LexicData()
LexicData(Meta)
?CleaningClinic
library(PublicDataNorm)
devtools::install(build_vignettes=TRUE)
vignette("PublicDataNorm")
