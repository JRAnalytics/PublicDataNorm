message(paste("Exporting", count, "/", object,"object: ","SamplesLexic"))
if (file.exists(paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"))) {
#Delete file if it exists
file.remove(paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"))
}
SamplesLexic <- lapply(SamplesLexic, function(x) {c(x[1],x)}) #Mandatory to duplicated listName in the listed values.
lapply(SamplesLexic, write, paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"), append=TRUE, ncolumns=1000 ) #write a ".txt" file without listNames
}
if(exists("CellsLexic", mode= "any" )) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsLexic"))
if (file.exists(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"))) {
#Delete file if it exists
file.remove(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"))
}
CellsLexic <- lapply(CellsLexic, function(x) {c(x[1],x)}) #Mandatory to duplicated listName in the listed values.
lapply(CellsLexic, write, paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), append=TRUE, ncolumns=1000 ) #write a ".txt" file without listNames
}
NB.Samples.Patients.pheno <-   which(c(attributes(Metadata)$Data.Type=="Clinic" |attributes(Metadata)$Data.Type=="SamplesAnnot" ) & attributes(Metadata)$Export=="Yes" )
if(length(NB.Samples.Patients.pheno)!=0) {
for (j in NB.Samples.Patients.pheno) {
z <-  Metadata[[j]]
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j]))
if(Vnumber==1){
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".V1",".tsv")
write.table(z,row.names = F ,file = filename, sep = "\t", fileEncoding = encoding)
} else {
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".V", Vnumber,".tsv")
write.table(z,row.names = F ,file = filename, sep = "\t", fileEncoding = encoding)
}
} #for J in NBsamples
} # if( length(NB.Samples.Patients.pheno)!=0)
NB.Count <-  which(attributes(Metadata)$Data.Type=="Count")
if(length(NB.Count)!=0) {
for (j in NB.Count) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j], "file"))
if(attributes(Metadata)$Omics.type!="Single.Cell"){ z <- try(cbind("GeneSymbol" = rownames(Metadata[[j]]), Metadata[[j]]),silent = T)}
if(attributes(Metadata)$Omics.type=="Single.Cell"){ z = Metadata[[j]]}
if(Vnumber==1){
if(attributes(Metadata)$Omics.type!="Single.Cell"){
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j], ".V1.tsv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
filename <- paste0(Verifiedpath(Metadata),"/","V1.matrix.mtx")
if(!class(Metadata[[j]])[1]=="dgTMatrix"){Metadata[[j]] = as.matrix(Metadata[[j]]) }
writeMM(Matrix(as.matrix(Metadata[[j]]), sparse = T),file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
gc()
if(!"geneAnnot"%in%attributes(Metadata)$Data.Type){
message("No geneAnnot file found. Exporting geneAnnot from count matrix.")
filename.genes <- paste0(Verifiedpath(Metadata),"/","V1.features.tsv")
write.table(rownames(Metadata[[j]]),row.names = F ,col.names = F ,file = filename.genes, sep = "\t")
R.utils::gzip(filename.genes, destname=sprintf("%s.gz", filename.genes), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","geneAnnot", "file"))}
if(!"CellsAnnot"%in%attributes(Metadata)$Data.Type){
message("No CellsAnnot file found. Exporting CellsAnnot from count matrix.")
filename.cells <- paste0(Verifiedpath(Metadata),"/", "V1.barcodes.tsv")
write.table(data.frame("Cells"= colnames(Metadata[[j]])),row.names = F ,file = filename.cells, sep = "\t")
R.utils::gzip(filename.cells, destname=sprintf("%s.gz", filename.cells), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))} else {
kk = which(attributes(Metadata)$Data.Type%in%"CellsAnnot"& attributes(Metadata)$Export=="Yes")
if(length(kk)>0){
for (i in kk){
filename.cells <- paste0(Verifiedpath(Metadata),"/", "V1.barcodes.tsv")
write.table(Metadata[[i]],row.names = F ,file = filename.cells, sep = "\t")
R.utils::gzip(filename.cells, destname=sprintf("%s.gz", filename.cells), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))}}
}}} else { #Vnumber ==1
if(attributes(Metadata)$Omics.type!="Single.Cell") {
filename <- paste0(Verifiedpath(Metadata),"/",project,".",names(Metadata)[j],".V",Vnumber, ".tsv")
write.table(z,row.names = F ,file = filename, sep = "\t")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)}
if(attributes(Metadata)$Omics.type=="Single.Cell") {
filename <- paste0(Verifiedpath(Metadata),"/","V",Vnumber,".matrix.mtx")
if(!class(Metadata[[j]])[1]=="dgTMatrix"){Metadata[[j]] = Matrix(as.matrix(Metadata[[j]]), sparse = T) }
writeMM(Metadata[[j]],file = filename)
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
gc()
if(!"geneAnnot"%in%attributes(Metadata)$Data.Type){
message("No geneAnnot file found. Exporting geneAnnot from count matrix.")
filename.genes <- paste0(Verifiedpath(Metadata),"/","V",Vnumber,".features.tsv")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","geneAnnot", "file"))
write.table(rownames(Metadata[[j]]),row.names = F ,col.names = F ,file = filename.genes, sep = "\t")
R.utils::gzip(filename.genes, destname=sprintf("%s.gz", filename.genes), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}
if(!"CellsAnnot"%in%attributes(Metadata)$Data.Type){
message("No CellsAnnot file found. Exporting CellsAnnot from count matrix.")
filename.cells <- paste0(Verifiedpath(Metadata),"/",project,".CellsAnnot","V",Vnumber,".barcodes.tsv")
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ","CellsAnnot", "file"))
write.table(data.frame("Cells"= colnames(Metadata[[j]])),row.names = F ,file = filename.cells, sep = "\t")
R.utils::gzip(filename.cells, destname=sprintf("%s.gz", filename.cells), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else {
filename.cells <- paste0(Verifiedpath(Metadata),"/","V",Vnumber,".barcodes.tsv")
kk = which(attributes(Metadata)$Data.Type%in%"CellsAnnot"& attributes(Metadata)$Export=="Yes")
if(length(kk)>0){
for (i in kk){
count = count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[[i]], "file"))
write.table(Metadata[[i]],row.names = F ,file = filename.cells, sep = "\t")
R.utils::gzip(filename.cells, destname=sprintf("%s.gz", filename.cells), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)}}
}
}
} #Vnumber !=1
}#j in NB.count
} # if(length(NB.Count)!=0)
NB.geneAnnot<-  which(attributes(Metadata)$Data.Type=="geneAnnot")
if(length(NB.geneAnnot)!=0) {
for (j in NB.geneAnnot) {
count <- count+1
message("-------------------------------------------------")
message(paste("Exporting", count, "/", object,"object: ",names(Metadata)[j], "file"))
z <- Metadata[[j]]
if(Vnumber==1){
if(attributes(Metadata)$Omics.type=="Single.Cell") {
filename <- paste0(Verifiedpath(Metadata),"/","V1.features.tsv")
}else{
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V1.tsv")
}
write.table(z,row.names = F ,file = filename, sep = ",")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} else { #Vnumber==1
if(attributes(Metadata)$Omics.type=="Single.Cell") {
filename <- paste0(list.files.path$Project.VerifiedDataset,"/","V",Vnumber,".features.tsv")
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
}else{
filename <- paste0(list.files.path$Project.VerifiedDataset,"/",project,".",names(Metadata)[j],".V",Vnumber,".tsv")}
write.table(z,row.names = F ,file = filename, sep = ",")
message(paste("Compressing"))
R.utils::gzip(filename, destname=sprintf("%s.gz", filename), overwrite=T, remove=TRUE, BFR.SIZE=1e+07)
} #Vnumber !=1
} #j in NGgeneannot
}# NBgeneAnnot
attributes(Metadata)$Version = paste0("V", Vnumber)
return(Metadata)
}#function
Meta = ExportTSV(Meta)
project <- "Peng"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
list.files(path)
Meta = CreateDataset(project, path)
Meta =CreateDataset(project, path) %>%
AddClinicFromFile(ClinicFile = "Meta-data.csv",
name = "Raw.clinic",
setSamplesID.Column = "sample",
setPatientID.Column = "sample" ,
type = "Patients" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count")
gc()
rownames(Meta$CellsAnnot) =Meta$CellsAnnot$cell_name
rownames(Meta$CellsAnnot)[1:5]
head(Meta$CellsAnnot)
head(Meta$geneAnnot)
rownames(Meta$Raw.clinic) = paste0(Meta$Raw.clinic[,2],"_") # pour compter n cellules dans les colnames(Count) par partient
attributes(Meta)
CheckMeta(Meta)
#Step 5 : Cleaning clinical data
PL = CreateLexic(Meta,type = "PatientsLexic")
SL = CreateLexic(Meta,type = "SamplesLexic")
CL = CreateLexic(Meta,type = "CellsLexic")
#MetaData can be NULL for other data ype (i.e RNAseq)
colnames(Meta$CellsAnnot)
head(Meta$Raw.clinic)
head(Meta$SamplesAnnot)
CL <- addSeveralKeysToLexic( CL, vector = c("PatientsID"="sample",
"SamplesID"="sample",
"Tumoral.Cells"="malignant",
"Cell.type "="cell_type",
"Seurat.Cluster" = "subclone") )
SL <- addSeveralKeysToLexic( SL, vector = c("PatientsID"="sample",
"SamplesID"="sample",
"SamplePathologicalState"="histology",
"HadTreatment"="treated_naive") )
PL <- addSeveralKeysToLexic(lexic = PL, vector = c("PatientsID"="patient"
,"Age"="age"
,"Sex"="sex"
,"PFSdelay"="PFS_DFS"
,"Disease"="cancer_type"
,"OSevent"="OS"
,"PatientSampling"="site"
,"TreatmentInfo"="treated_naive"
,"pT"="AJCC_T"
,"pN"="AJCC_N"
,"pM"="AJCC_M"
,"Stage"="AJCC_stage"
,"Size"="size"
,"Grade"="grade"))
Meta = CleaningData(Meta,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Raw.clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Raw.clinic",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
head(Meta$Patients.Clinic)
Meta$Patients.Clinic$Grade = gsub("W-MD", "Well-Mildly differenciated",Meta$Patients.Clinic$Grade )
Meta$Patients.Clinic$Grade = gsub("M-PD", "Mildly-Poorly differenciated",Meta$Patients.Clinic$Grade )
Meta$Patients.Clinic$Grade = gsub("WD", "Well differenciated",Meta$Patients.Clinic$Grade )
Meta$Patients.Clinic$Grade = gsub("MD", "Mildly differenciated",Meta$Patients.Clinic$Grade )
Meta$Patients.Clinic$Grade = gsub("PD", "Poorly differenciated",Meta$Patients.Clinic$Grade )
head(Meta$Cells.Annotation)
head(Meta$SamplesAnnot)
gc()
Meta = ExportTSV(Meta)
attributes(Meta)
Meta = ExportTSV(Meta)
gc()
attributes(Meta)
CheckMeta(Meta)
AddLocalDatabase(Metadata = Meta,
list.files.path = list.files.path,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x" ,
Run.spec = NA,
First.Author = "Peng J.",
DOI = "10.1038/s41422-019-0195-y",
project = project,
Comment = NA,
User = "JR-Analytics")
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x" ,
Run.spec = NA,
First.Author = "Peng J.",
DOI = "10.1038/s41422-019-0195-y",
Comment = NA,
User = "JR-Analytics")
AddLocalDatabase(Metadata = Meta,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x" ,
Run.spec = NA,
First.Author = "Peng J.",
DOI = "10.1038/s41422-019-0195-y",
Comment = NA,
User = "JR-Analytics")
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
?databaseSummary
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "Peng"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
list.files(path)
Meta = CreateDataset(project, path) # if all
Meta =CreateDataset(project, path) %>%
AddClinicFromFile(ClinicFile = "Meta-data.csv",
name = "Raw.clinic",
setSamplesID.Column = "sample",
setPatientID.Column = "sample" ,
type = "Patients" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count")
gc()
rownames(Meta$CellsAnnot) =Meta$CellsAnnot$cell_name
rownames(Meta$CellsAnnot)[1:5]
head(Meta$CellsAnnot)
head(Meta$geneAnnot)
rownames(Meta$Raw.clinic) = paste0(Meta$Raw.clinic[,2],"_") # pour compter n cellules dans les colnames(Count) par partient
attributes(Meta)
CheckMeta(Meta)
#Step 5 : Cleaning clinical data
PL = CreateLexic(Meta,type = "PatientsLexic")
SL = CreateLexic(Meta,type = "SamplesLexic")
CL = CreateLexic(Meta,type = "CellsLexic")
#MetaData can be NULL for other data ype (i.e RNAseq)
colnames(Meta$CellsAnnot)
head(Meta$Raw.clinic)
head(Meta$SamplesAnnot)
CL <- addSeveralKeysToLexic( CL, vector = c("PatientsID"="sample",
"SamplesID"="sample",
"Tumoral.Cells"="malignant",
"Cell.type "="cell_type",
"Seurat.Cluster" = "subclone") )
SL <- addSeveralKeysToLexic( SL, vector = c("PatientsID"="sample",
"SamplesID"="sample",
"SamplePathologicalState"="histology",
"HadTreatment"="treated_naive") )
PL <- addSeveralKeysToLexic(lexic = PL, vector = c("PatientsID"="patient"
,"Age"="age"
,"Sex"="sex"
,"PFSdelay"="PFS_DFS"
,"Disease"="cancer_type"
,"OSevent"="OS"
,"PatientSampling"="site"
,"TreatmentInfo"="treated_naive"
,"pT"="AJCC_T"
,"pN"="AJCC_N"
,"pM"="AJCC_M"
,"Stage"="AJCC_stage"
,"Size"="size"
,"Grade"="grade"))
Meta = CleaningData(Meta,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Raw.clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Raw.clinic",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
head(Meta$Patients.Clinic)
Meta$Patients.Clinic$Grade = gsub("W-MD", "Well-Mildly differenciated",Meta$Patients.Clinic$Grade )
Meta$Patients.Clinic$Grade = gsub("M-PD", "Mildly-Poorly differenciated",Meta$Patients.Clinic$Grade )
Meta$Patients.Clinic$Grade = gsub("WD", "Well differenciated",Meta$Patients.Clinic$Grade )
Meta$Patients.Clinic$Grade = gsub("MD", "Mildly differenciated",Meta$Patients.Clinic$Grade )
Meta$Patients.Clinic$Grade = gsub("PD", "Poorly differenciated",Meta$Patients.Clinic$Grade )
head(Meta$Cells.Annotation)
head(Meta$SamplesAnnot)
gc()
attributes(Meta)$Data.Type
Metadata=Meta
NBC = which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(attributes(Metadata)$Omics.type=="Single.Cell"){N.cells = nrow(Metadata[[NBC[1]]])}else{N.cells = NA}
N.cells
#' @param Run.spec Deppenes, reads, etc etc
#' @param First.Author Defaul = NA
#' @param DOI doi of article if exist. Defaul = NA
#' @param Comment specify a comment for this export
#' @param User User who export the cleaned Metadata object
#' @return a .text tab delimited database summary
#' @import data.table
#' @export
#'
#' @examples "non"
AddLocalDatabase <- function(Metadata,
Normalization.Method = NA,
Technology = NA,
Platform = NA,
Run.spec=NA ,
First.Author = NA,
DOI = NA,
Comment = NA,
User= NA){
Databasename = "DataBaseSummary.txt"
Local.Data.base.Path <- attributes(Metadata)$File.path$Parent
project <- attributes(Metadata)$Project
lf <- list.files(Local.Data.base.Path)
if(is.null(attributes(Metadata)$Version)){ Version = "V1"} else {   Version <- attributes(Metadata)$Version }
NBS <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")
NBS = NBS[1]
NBP <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="Yes")
NBP = NBP[1]
if(is.na(NBS)){ Nsamples=0 } else{
Nsamples <- nrow(Metadata[[NBS[1]]])}
if(is.na(NBP)){ Npatient = Nsamples}else{
Npatient <- nrow(Metadata[[NBP[1]]])}
if(length(which(attributes(Metadata)$Data.Type=="Count" & attributes(Metadata)$Export=="Yes" ))==0){ RawGenes = 0} else {
NB.raw.mat<- which(attributes(Metadata)$Data.Type=="Count" & attributes(Metadata)$Export=="Yes" )
RawGenes <- nrow(Metadata[[NB.raw.mat[1]]])}
if(length(which(attributes(Metadata)$Data.Type=="Count" & attributes(Metadata)$Export=="No" ))==0){NormGenes=0}else{
NB.norm.mat <- which(attributes(Metadata)$Data.Type=="Count" & attributes(Metadata)$Export=="No")
NormGenes <- nrow(Metadata[[NB.norm.mat[1]]])}
if(!is.na(NBS)){
if(all(is.na(Metadata[[NBS[1]]]$SamplePathologicalState))){tumor <- nrow(Metadata[[NBS[1]]]) } else {
tumor <- length(which(str_detect(toupper(Metadata[[NBS[1]]]$SamplePathologicalState),"TUM|PRIMARY|CARCINO")))
if(tumor==0 & !all(is.na(Metadata[[NBS[1]]]$SamplePathologicalState))) {
normal <- length(which(str_detect(toupper(Metadata[[NBS[1]]]$SamplePathologicalState),"NORM|HEAL")))
met <- length(which(str_detect(toupper(Metadata[[NBS[1]]]$SamplePathologicalState),"MET")))
na <- length(which(is.na(Metadata[[NBS[1]]]$SamplePathologicalState)))
tumor = nrow(Metadata[[NBS[1]]])-normal-met-na
}
}
if(all(is.na(Metadata[[NBS[1]]]$SamplePathologicalState))){normal <- 0 } else {
normal<- length(which(str_detect(toupper(Metadata[[NBS[1]]]$SamplePathologicalState),"NORM|HEAL")))
if(normal==0 & !all(is.na(Metadata[[NBS[1]]]$SamplePathologicalState))) {
met <- length(which(str_detect(toupper(Metadata[[NBS[1]]]$SamplePathologicalState),"MET")))
na <- length(which(is.na(Metadata[[NBS[1]]]$SamplePathologicalState)))
normal = nrow(Metadata[[NBS[1]]])-tumor-met-na
}
}}else {
met <- NA
na <- NA
normal = NA
tumor = NA
}
if(!is.na(NBS)){
if(!is.null(Metadata[[NBS[1]]][,"HadTreatment"])) {
TTT <- length(which(str_detect(toupper(Metadata[[NBS[1]]][,"HadTreatment"]),"YES|OUI|TRUE|1")))
} else { TTT <- 0   }
} else { TTT <- 0 }
if( TTT==0  ){
TTTinfo <- "No"
} else {
TTTinfo <- "Yes"
}
if(!is.na(NBP)){
if(all(is.na(Metadata[[NBP[1]]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
if(all(is.na(Metadata[[NBP[1]]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" } } else {
OSinfo <- "No"
PFSinfo <- "No" }
if(!is.na(NBS)){
met <- length(which(str_detect(toupper(Metadata[[NBS[1]]]$SamplePathologicalState),"MET")))}else{met = 0}
NBC = which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(attributes(Metadata)$Omics.type=="Single.Cell"){N.cells = nrow(Metadata[[NBC[1]]])}else{N.cells = NA}
dt <- data.frame("Project" = project,
"Version" = Version,
"Date.of.Data.Norm" = format(Sys.Date(),format = "%d/%m/%Y" ),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.TumoralSamples" = tumor,
"N.NormalSamples" = normal,
"N.Metastasis" = met,
"N.Cells" = N.cells,
"Overall.Survival" = OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = Normalization.Method,
"Technology" = Technology,
"Platform" = Platform,
"Run.spec"=Run.spec ,
"First.Author" = First.Author,
"Article.DOI" = DOI,
"Comment" = Comment,
"User"= User)
message("Adding to data bases : ")
fp <- paste(c(Local.Data.base.Path,Databasename), collapse = "/")
if(file.exists(fp)){
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
if(length(x$Project[x$Project==project])!=0){
if(!all((x$Project[x$Project==project]==project & x$Version[x$Project==project]==Version)==F)){
message(paste(project,"already existing in database. Reactualising database"))
proj <- which(x$Project==project)
row <- which(x$Version[proj]==Version)
x[proj[row],] <- dt
print(dt)
} else {
x <- rbind(x,dt)
print(dt)
}}
if(length(x$Project[x$Project==project])==0){ x <- rbind(x,dt)
print(dt)
}
LF <- list.files(attributes(Metadata)$File.path$Project.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(attributes(Metadata)$File.path$Project.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]"))
}
if(length(version)==1){
if(is.na(version)){version = "V1"}}
if(!all(is.na(version))){
if(!all(x$Version[x$Project==project]%in%version)){
proj <- which(x$Project==project)
if(length(unique(x[proj,]$Project))!=1){stop("Error in actualising DataBaseSummary.txt")}
outV <- which(!x[proj,]$Version%in%version)
message(paste("Project",project   ,"version",x[proj[outV],]$Version," is missing in 04VerifiedDataset. Removing from DataBaseSummary.txt\n"))
x <- x[-proj[outV],]
}}
x <- x[order(x$Project,x$Version,decreasing = F),]
write.table(x,fp,row.names = F, sep = "\t",dec = "." )
} else {
print(dt)
write.table(dt,fp,row.names = F, sep = "\t",dec = "." )
}
}
AddLocalDatabase(Metadata = Meta,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x" ,
Run.spec = NA,
First.Author = "Peng J.",
DOI = "10.1038/s41422-019-0195-y",
Comment = NA,
User = "JR-Analytics")
