SamplesLexic = SL,
SamplesAnnotToClean = NULL,
SamplesExportname =NULL ,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = NULL,
SamplesExportname ="Samples.Annot",force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["Patients.Clinic"]]
Metadata[["Cells.Annotation"]]
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = NULL,
SamplesExportname =NULL,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
gc()
CheckMeta(Metadata)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(GEOquery)
library(Matrix)
project <- "Werba"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
list.files(path)
Clinic=getGEO('GSE205013',GSEMatrix=TRUE)[["GSE205013_series_matrix.txt.gz"]]@phenoData@data
rownames(Clinic) = Clinic$title
Clinic$PatientID = unlist(lapply(str_split(Clinic$title, "_"),"[[",1))
for(i in Clinic$title){
Metadata <- CreateDataset(project,path)
files = list.files(Rawpath(Metadata))[str_detect(list.files(Rawpath(Metadata)), i)]
Metadata = AddExpressionMatrixSC(Metadata = Metadata,
ExpressionMatrix = files[str_detect(files, ".mtx")],
Cell.file = files[str_detect(files, "barcode")] ,
setID.cellAnnotColumn = 1,
Genes.file = files[str_detect(files, "features")],
name = "count")
gc()
colnames(Metadata$count) = paste0(i,"_",colnames(Metadata$count))
if(!exists("test")){
test =Matrix::Matrix(Metadata$count)
cells = data.frame("cell_barcode" = paste0(i,"_",Metadata$CellsAnnot[,1]))
} else {
test = cbind(test, Matrix::Matrix(Metadata$count))
cells =rbind(cells, data.frame("cell_barcode" =paste0(i,"_",Metadata$CellsAnnot[,1])))}
rm(Metadata,i,files)
gc()
}
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = as.data.frame(Clinic),
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "PatientID",
name ="SamplesAnnot" ,
type ="Samples") %>%
AddExpressionMatrixSC(
ExpressionMatrix = test,
Cell.file = cells,
setID.cellAnnotColumn = "cell_barcode",
Genes.file = "GSM6204121_P13_features.tsv.gz",
name = "rawcount")
CheckMeta(Metadata)
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = as.data.frame(Clinic),
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "PatientID",
name ="Clinic",
type ="Patients") %>%
AddExpressionMatrixSC(
ExpressionMatrix = test,
Cell.file = cells,
setID.cellAnnotColumn = "cell_barcode",
Genes.file = "GSM6204121_P13_features.tsv.gz",
name = "rawcount")
CheckMeta(Metadata)
is.null(c)
c= NULL
is.null(c)
#' CheckMeta : Checking samples accors Metadata files
#'
#' @param Metadata a Metadata list
#'
#' @return none
#' @export
#'
#' @examples "none"
CheckMeta <- function(Metadata) {
if(is.null(Metadata)){stop("Need a Metadata List file")}
if(!is.list(Metadata)){stop("Need a Metadata List file")}
if(is.null(attributes(Metadata)$Omics.type)){attributes(Metadata)$Omics.type="NotDefine"}
if("CellsAnnot"%in%attributes(Metadata)$Data.Type){attributes(Metadata)$Omics.type="Single.Cell"}
l <-length(names(Metadata))
MetaDataN <- names(Metadata)
m <- which(attributes(Metadata)$Data.Type=="Count")
g =  which(attributes(Metadata)$Data.Type=="geneAnnot")[1]
if(!is.na(g)){geneAnnot = as.matrix(Metadata[[g]])}
if(attributes(Metadata)$Omics.type!="Single.Cell"){
c <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="Yes")
s <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
s2 <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(c2)>0){c=c2}
if(length(s2)>0){s=s2}
if(length(s)!=0){
if(attributes(Metadata)$Data.Type[s[1]]=="SamplesAnnot"){sID <- Metadata[[s[1]]][,"SamplesID"] }}
if(length(c)!=0){
if(attributes(Metadata)$Data.Type[c[1]]=="Clinic"){pID <- Metadata[[c[1]]][,"PatientsID"] }}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
c= NULL
if("Clinic" %in%attributes(Metadata)$Data.Type){
c <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="Yes")
pID <- Metadata[[c[1]]][,"PatientsID"]
sID = Metadata[[c[1]]][,"SamplesID"]
}
if(is.null(c)){stop("A Patients' Clinical data must be loaded.")}
if(length(c2)>0){c=c2}
if("SamplesAnnot" %in%attributes(Metadata)$Data.Type ){
s <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
s2 <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(s2)>0){s=s2}
sID <- Metadata[[s[1]]][,"SamplesID"]
pID <- Metadata[[s[1]]][,"PatientsID"]}
if("CellsAnnot" %in%attributes(Metadata)$Data.Type){
cellannot <- which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned=="No")
cellannot2 <- which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(cellannot2)>0){cellannot=cellannot2}
cellID <- Metadata[[cellannot[1]]][,"CellsBarcode"]
}
}
for (i in m){
if(attributes(Metadata)$Omics.type!="Single.Cell"){
message("-------------------------")
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
if(length(ccc)>0){  message(paste("Checking SamplesID in Cleaned Metadata sub-objects from", names(Metadata)[s2[1]]))}else {
message(paste("Checking SamplesID in Metadata sub-objects from", names(Metadata)[s[1]])) }
message("-------------------------")
if(all(sID %in% colnames(Metadata[[i]]))==T) {   message(paste(MetaDataN[i]), " colnames : PASS") } else {
message(paste(MetaDataN[i]), " colnames : FAIL")
if(summary(sID %in% colnames(Metadata[[i]]))["TRUE"]==ncol(Metadata[[i]]) ){message(paste("All samples from", MetaDataN[i],"are found in Samples or clinical annotation file."))}
message(paste("Samples not found in ", MetaDataN[i]," : "), paste0(na.omit(sID[!sID%in%colnames(Metadata[[i]])]),collapse = "; "))}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
message("-------------------------")
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
if(length(ccc)>0 ){  message(paste("Checking  Cells barcodes and Samples/Patients correspondances in cleaned Metadata sub-objects from", names(Metadata)[c2[1]]))}else {
message(paste("Checking Cells barcodes and Samples/Patients correspondances in Metadata sub-objects from", names(Metadata)[c[1]]))}
message("-------------------------")
if(all(cellID %in% colnames(Metadata[[i]]))==T) {   message(paste("All Cells barcodes in",MetaDataN[i], "colnames : PASS")) } else {
message(paste(MetaDataN[i]), " colnames : FAIL")
if(length(!cellID%in%colnames(Metadata[[i]]))>10){
mismatch = na.omit(cellID[!cellID%in%colnames(Metadata[[i]])])[1:10]
ext = paste("\n showing ten of",length(cellID[!cellID%in%colnames(Metadata[[i]])]), "not found") }else {
mismatch=na.omit(cellID[!cellID%in%colnames(Metadata[[i]])])
ext = ""}
message(paste("Cells barcodes not found in ", MetaDataN[i]," : "), paste0(mismatch,collapse = "; "),ext)}
}
}
if(!is.na(g)){
message("-------------------------")
message("Checking Matrices probes")
message("-------------------------")
for (i in m){
gene = rownames(Metadata[[i]])
sel = which(geneAnnot %in% gene)
col = which(apply(geneAnnot, 2, function(x) which(x %in% geneAnnot[sel[1]]))>0)[1]
if(all(str_detect(gene, "ENSG")==T)) { message(paste(names(Metadata[i]), " gene probes as ENSEMBL"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(is.numeric(as.numeric(gene))))  { message(paste(names(Metadata[i]), " gene probes as ENTREZ gene id"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(str_detect(gene, "ILMN_")==T)) { message(paste(names(Metadata[i]), " gene probes as Illumina Bead Array Probes"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else{
if(all(str_detect(gene, "_at")==T)) { message(paste(names(Metadata[i]), " gene probes as Illumina Microarray Probes"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(length(which(gene%in%geneAnnot$GeneSymbol))>1)   {
message(paste(names(Metadata[i]), " gene probes as genes Symbols"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(gene%in%geneAnnot)) { message(paste(names(Metadata[i]), " gene probes manualy entered from published data."))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
}
}}}}}}}
message("-------------------------")
if(length(c>0)){
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
if(attributes(Metadata)$Omics.type=="Single.Cell"){pp = c; s = c}else{ pp = s}
if(length(ccc)>0){  message(paste("Checking Common Samples from", names(Metadata)[pp[1]] ,"in other Cleaned Samples or Patients annotations data."))
}else {
message(paste("Checking Common Samples from", names(Metadata)[pp[1]] ,"in other Samples or Patients annotations data."))}
message("-------------------------")
for (i in c(c,s[-1])){
if(attributes(Metadata)$Omics.type!="Single.Cell"){
psID =  Metadata[[i]][,"SamplesID"]
if(length(which(psID %in% as.matrix(Metadata[[s]])))==length(sID)){message(paste(MetaDataN[i]), " : PASS") }
if(length(which(psID %in% as.matrix(Metadata[[s]])))<length(sID)){
message(paste(MetaDataN[i]), " : FAIL")
message(paste("SamplesID not found in ", MetaDataN[i]," : "), paste0(na.omit(sID[!sID%in%psID]),collapse = "; "))
}
}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
message(paste("Patients from Single.Cell data'", names(Metadata)[i],"', in Cells annotation object"))
tot=0
for (z in rownames(Metadata[[i]])) {
t = summary(str_detect(pattern = paste0(z,"_"), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
message(c(z," N= ",as.numeric(t)))
}
message("Total = " , tot, "\n Are all cells barcode associated to Patients found in clinical data ? ", tot/length(cellID)==1)
message("-------------------------")
p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
if(length(p)>0){
message(paste("Samples from Single.Cell data '", names(Metadata)[p],"',  in Cells annotation object"))
tot=0
for (z in rownames(Metadata[[p]])) {
t = summary(str_detect(pattern = paste0(z,"_"), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
message(c(z," N= ",as.numeric(t)))
}
message("Total = " , tot, "\nAre all Cells barcode associated to Samples in SamplesAnnot ? ", tot/length(cellID)==1)
message("-------------------------")
}
mm =  which(attributes(Metadata)$Data.Type=="Count")
if(length(mm)>0){
message(paste("Samples from Single.Cell data '", names(Metadata)[i],"', in count matrix"))
tot=0
for (z in sID) {
t = summary(str_detect(pattern = paste0(z,"_"), colnames(Metadata[[mm]])))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
message(c(z," N= ",as.numeric(t)))
}
message("Total = " , tot, "\nAre all cells barcode found in Matrix count ? ", tot/length(cellID)==1)
message("-------------------------")
}
}
}
}
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = as.data.frame(Clinic),
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "PatientID",
name ="SamplesAnnot" ,
type ="Patients") %>%
AddExpressionMatrixSC(
ExpressionMatrix = test,
Cell.file = cells,
setID.cellAnnotColumn = "cell_barcode",
Genes.file = "GSM6204121_P13_features.tsv.gz",
name = "rawcount")
CheckMeta(Metadata)
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = as.data.frame(Clinic),
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "PatientID",
name ="SamplesAnnot" ,
type ="Patients") %>%
AddExpressionMatrixSC(
ExpressionMatrix = test,
Cell.file = cells,
setID.cellAnnotColumn = "cell_barcode",
Genes.file = "GSM6204121_P13_features.tsv.gz",
name = "rawcount")
View(Metadata)
"Clinic" %in%attributes(Metadata)$Data.Type
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = as.data.frame(Clinic),
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "PatientID",
name ="SamplesAnnot" ,
type ="Samples") %>%
AddExpressionMatrixSC(
ExpressionMatrix = test,
Cell.file = cells,
setID.cellAnnotColumn = "cell_barcode",
Genes.file = "GSM6204121_P13_features.tsv.gz",
name = "rawcount")
CheckMeta(Metadata)
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = as.data.frame(Clinic),
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "PatientID",
name ="raw.Clinic" ,
type ="Clinic") %>%
AddExpressionMatrixSC(
ExpressionMatrix = test,
Cell.file = cells,
setID.cellAnnotColumn = "cell_barcode",
Genes.file = "GSM6204121_P13_features.tsv.gz",
name = "rawcount")
CheckMeta(Metadata)
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = as.data.frame(Clinic),
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "PatientID",
name ="raw.Clinic" ,
type ="Clinic") %>%
AddExpressionMatrixSC(
ExpressionMatrix = test,
Cell.file = cells,
setID.cellAnnotColumn = "cell_barcode",
Genes.file = "GSM6204121_P13_features.tsv.gz",
name = "rawcount")
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = as.data.frame(Clinic),
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "PatientID",
name ="raw.Clinic" ,
type ="Patients") %>%
AddExpressionMatrixSC(
ExpressionMatrix = test,
Cell.file = cells,
setID.cellAnnotColumn = "cell_barcode",
Genes.file = "GSM6204121_P13_features.tsv.gz",
name = "rawcount")
rm(CheckMeta)
CheckMeta(Metadata)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
Metadata$CellsAnnot$PatientID = unlist(lapply(str_split(Metadata$CellsAnnot$Cells, "_"),"[[",1))
Metadata$SamplesAnnot$PatientID = unlist(lapply(str_split(Metadata$SamplesAnnot$title, "_"),"[[",1))
View(Metadata)
Metadata$raw.Clinic $PatientID = unlist(lapply(str_split(Metadata$raw.Clinic $title, "_"),"[[",1))
colnames(Metadata$CellsAnnot)
head(Metadata$CellsAnnot)
SL = addSeveralKeysToLexic(lexic = SL,vector = c("SamplePathologicalState" = "source_name_ch1",
"SpecimenSampling" = "procedure:ch1",
"HadTreatment" = "treatment:ch1") )
PL = addSeveralKeysToLexic(lexic = PL,vector = c("SamplesID" = "SamplesID",
"Stage" ="Stage:ch1",
"TreatmentInfo" = "treatment:ch1",
"PatientSampling" = "procedure:ch1") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean =NULL,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
force.replace = T,
SamplesAnnotToClean = "raw.Clinic ",
SamplesExportname ="Samples.Annot" ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean =NULL,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
force.replace = T,
SamplesAnnotToClean = "raw.Clinic",
SamplesExportname ="Samples.Annot" ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
traceback()
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="raw.Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
force.replace = T,
SamplesAnnotToClean = "raw.Clinic",
SamplesExportname ="Samples.Annot" ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["Patients.Clinic"]]
Metadata[["Cells.Annotation"]]
Metadata$Samples.Annot
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="raw.Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
force.replace = T,
SamplesAnnotToClean = "raw.Clinic",
SamplesExportname =NULL ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata$Patients.Clinic
Metadata$Cells.Annotation
CheckMeta(Metadata)
Metadata$Patients.Clinic$PatientSampling = Metadata$Patients.Clinic[Metadata$Patients.Clinic$PatientsID,]$PatientSampling
Metadata$Cells.Annotation$HadTreatment = Metadata$Patients.Clinic[Metadata$Cells.Annotation$PatientsID,]$HadTreatment
Metadata$Cells.Annotation$SamplePathologicalState  = Metadata$Patients.Clinic[Metadata$Cells.Annotation$PatientsID,]$SamplePathologicalState
Metadata$Cells.Annotation$PatientSampling = Metadata$Patients.Clinic[Metadata$Cells.Annotation$PatientsID,]$PatientSampling
Metadata$Patients.Clinic$Disease   = "Pancreatic ductal adenocarcinoma"
Metadata$Patients.Clinic$SpecimenOrgan = ifelse(str_detect(Metadata$Patients.Clinic$SamplePathologicalState, "liver"), "Liver", "Pancreas")
Metadata$Cells.Annotation$SpecimenOrgan = Metadata$Patients.Clinic[Metadata$Cells.Annotation$PatientsID,]$SpecimenOrgan
Metadata$Cells.Annotation
project <- "Steele"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="patient" ,
setSamplesID.Column = "sample" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
Metadata$Clinic$V1=NULL
rownames(Metadata$Clinic) = Metadata$Clinic$PatientsID
CheckMeta(Metadata)
#Step 3 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
colnames(Metadata$Clinic)
SL = addSeveralKeysToLexic(lexic = SL,vector = c("CellType" = "cell_type" ))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Disease" ="cancer_type "))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = NULL,
SamplesExportname =NULL,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
gc()
CheckMeta(Metadata)
str(PL)
attributes(PL)
objects()
attriubtes(objects())
attributes(objects())
for (i in objects()){
attributes(unquote(i))}
attr(PL, "Lexic") = "Yes"
attr(SL, "Lexic") = "Yes"
all <- mget(ls(), envir = globalenv())
all
Filter(function(x) attr(x, "Lexic") == "Yes", all)
all = lapply(ls(), get)
all
# extract objects with attribute = "bar"
bar = all[lapply(all, attr, "Lexic") == "Yes"]
load("E:/JR_analytics_Rwork/JRA_U1037_Bousquet/Chris/Chris.start.RData")
gc()
