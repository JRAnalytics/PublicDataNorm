}
}
gsub(".", "\.",LexicClinic)
gsub(".", "\\.",LexicClinic)
gsub(".", "'\.'",LexicClinic)
gsub(".", "[\.]",LexicClinic)
gsub(".", "\\.",LexicClinic)
gsub("\\.", "-",LexicClinic)
gsub("\.", "-",LexicClinic)
gsub(".", "-",LexicClinic)
gsub("[.]", "-",LexicClinic)
lappy(LexicClinic,function(x) gsub("[.]", "-",x))
lapply(LexicClinic,function(x) gsub("[.]", "-",x))
lapply(LexicClinic,function(x) gsub("[.]", "_",x))
lapply(LexicClinic,function(x) gsub("[.]", "_",x))
print(LexicClinic)
lapply(LexicClinic,function(x) gsub("[.]", "_",x))
LexicClinic <- lapply(LexicClinic,function(x) gsub("[.]", "_",x))
LexicClinic
for (i in 1:ncol(clinic)) {
pat <- toupper(colnames(clinic)[i])
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
print(paste("pat = ",pat,"col = ", col))
if(!length(col)==0){
clcl[,col] <- clinic[,i]
}
}
View(clcl)
list.files.path <- DirCheck(project,path) # if all are TRUE ; next step can be done
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = list.files.path, project = project)
View(list.files.path)
View(Meta)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", Lexical_colnames_path = list.files.path, project = project) # no data cleaned because LexicClinic and Samples or Patient could not be actualised
View(Meta)
#' @param type "Sample Pheno" or "Patients' clinical data" for building clean clinical data from raw clinical data.
#' @param Lexical_colnames_path file path to find lexique of colnames
#' @param list.files.path dir path
#'  @param project project
#' @importFrom utils menu
#' @import dplyr
#' @return a data frame of Samples pheno or patients clinical data. If Sample ID and Patients ID are the sames, so Samples.pheno and Patient_clinic are the same data frame
#' @export
#'
#' @examples "none"
CleaningClinic <- function(Metadata, type00 = c("Sample", "Patients"), Lexical_colnames_path, project){
if(!exists("LexicClinic", mode = "any")){
pos <- 1
envir = as.environment(pos)
if(file.exists(paste0(Lexical_colnames_path$Project.Processes, "/",project,".Lexic.txt"))){
x <- scan(paste0(Lexical_colnames_path$Project.Processes, "/",project,".Lexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
LexicClinic<- lapply(x, `[`, -1)
assign("LexicClinic", LexicClinic, envir = envir)
} else {  assign("LexicClinic", ColNameClinic(Lexical_colnames_path$Processes), envir = envir) }
}
NB <- which(attributes(Metadata)$Data.Type=="Clinical.data" & attributes(Metadata)$Raw.data=="Yes")
if(length(NB)==0){stop("No clinical data in meta object")}
clinic <- Metadata[[NB]]
clcl <-  data.frame(matrix(nrow = nrow(clinic), ncol = length(LexicClinic)))
colnames(clcl) = names(LexicClinic)
LexicClinic <- lapply(LexicClinic, toupper)
colnames(clinic) <-gsub("[.]", "_",colnames(clinic))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[.]", "_",x))
print(LexicClinic)
for (i in 1:ncol(clinic)) {
pat <- paste0("^",toupper(colnames(clinic)[i]),"$")
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
if(!length(col)==0){
clcl[,col] <- clinic[,i]
}
}
if(!exists("SamplesOrPatients", mode = "any")){
pos <- 1
envir = as.environment(pos)
if(file.exists(paste0(Lexical_colnames_path$Project.Processes, "/",project,".SamplesOrPatients.txt"))){
SamplesOrPatients <- data.table::fread(paste0(Lexical_colnames_path$Project.Processes, "/",project,".SamplesOrPatients.txt"))
} else {  SamplesOrPatients <- data.table::fread(paste(Lexical_colnames_path$Processes,"SamplesOrPatients.txt",sep = "/")) }
assign("SamplesOrPatients", SamplesOrPatients, envir = envir)
}
if(type=="Sample"){
cc <-  SamplesOrPatients[which(SamplesOrPatients$Type=="Samples.Pheno" | SamplesOrPatients$Type=="Both"),]$Descirption
cc <- cc[!cc%in%("SamplesID")]
if(all(is.na(clcl$SamplesID))){
message("No SamplesID found in raw clinical data. Using PatientID instead")
clcl$SamplesID <- clcl$PatientsID
}
if(length(which(duplicated(clcl$SamplesID)))==0) {
clinic2 <-  clcl[,c("SamplesID", cc)]
clinic2[clinic2==""] <- NA
clinic2[clinic2=="NA"] <- NA
Metadata$Sample.pheno <- clinic2
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
} else {
cl_rolled <- clcl %>%
# create groups by name
group_by(SamplesID) %>%
dplyr::summarise(across(everything(), ~paste0(unique(na.omit(.x)), collapse = ";")))
cl_rolled <- as.data.frame(cl_rolled)
cl_rolled <-  cl_rolled[,c("SamplesID", cc)]
cl_rolled[cl_rolled==""] <- NA
cl_rolled[cl_rolled=="NA"] <- NA
Metadata$Sample.pheno <- cl_rolled
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
}
} else if(type=="Patients")
{
cc <-  SamplesOrPatients[which(SamplesOrPatients$Type=="Patients.Pheno" | SamplesOrPatients$Type=="Both"),]$Descirption
cc <- cc[!cc%in%("PatientsID")]
if(all(is.na(clcl$PatientsID))){
message("No PatientsID found in raw clinical data. Using PatientID instead")
clcl$PatientsID <- clcl$SamplesID
}
if(length(which(duplicated(clcl$PatientsID)))==0) {
if(all(is.na(clcl$PatientsID))){
message("No PatientsID found in raw clinical data. Using PatientID instead")
clinic2 <-  clcl[,c("SamplesID", cc)]
} else {
clinic2 <-  clcl[,c("PatientsID", cc)]
}
clinic2 <-  clcl[,c("PatientsID", cc)]
clinic2[clinic2==""] <- NA
clinic2[clinic2=="NA"] <- NA
Metadata$Patient.clinic <- clinic2
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
} else {
cl_rolled <- clcl %>%
# create groups by name
group_by(PatientsID) %>%
dplyr::summarise(across(everything(), ~paste0(unique(na.omit(.x)), collapse = ";")))
isNA <- which(is.na( cl_rolled$PatientsID))
if(length(isNA)>0){ cl_rolled <- as.data.frame(cl_rolled[-isNA,])  }
cl_rolled <- as.data.frame(cl_rolled)
cl_rolled <-  cl_rolled[,c("PatientsID", cc)]
cl_rolled[cl_rolled==""] <- NA
cl_rolled[cl_rolled=="NA"] <- NA
Metadata$Patient.clinic <- cl_rolled
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
}
} else {
stop("Choose type = 'Sample Pheno' or 'Patients' clinical data' ")}
return(Metadata)
}
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = list.files.path, project = project)
traceback()
#' @param type "Sample Pheno" or "Patients' clinical data" for building clean clinical data from raw clinical data.
#' @param Lexical_colnames_path file path to find lexique of colnames
#' @param list.files.path dir path
#'  @param project project
#' @importFrom utils menu
#' @import dplyr
#' @return a data frame of Samples pheno or patients clinical data. If Sample ID and Patients ID are the sames, so Samples.pheno and Patient_clinic are the same data frame
#' @export
#'
#' @examples "none"
CleaningClinic <- function(Metadata, type = c("Sample", "Patients"), Lexical_colnames_path, project){
if(!exists("LexicClinic", mode = "any")){
pos <- 1
envir = as.environment(pos)
if(file.exists(paste0(Lexical_colnames_path$Project.Processes, "/",project,".Lexic.txt"))){
x <- scan(paste0(Lexical_colnames_path$Project.Processes, "/",project,".Lexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
LexicClinic<- lapply(x, `[`, -1)
assign("LexicClinic", LexicClinic, envir = envir)
} else {  assign("LexicClinic", ColNameClinic(Lexical_colnames_path$Processes), envir = envir) }
}
NB <- which(attributes(Metadata)$Data.Type=="Clinical.data" & attributes(Metadata)$Raw.data=="Yes")
if(length(NB)==0){stop("No clinical data in meta object")}
clinic <- Metadata[[NB]]
clcl <-  data.frame(matrix(nrow = nrow(clinic), ncol = length(LexicClinic)))
colnames(clcl) = names(LexicClinic)
LexicClinic <- lapply(LexicClinic, toupper)
colnames(clinic) <-gsub("[.]", "_",colnames(clinic))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[.]", "_",x))
print(LexicClinic)
for (i in 1:ncol(clinic)) {
pat <- paste0("^",toupper(colnames(clinic)[i]),"$")
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
if(!length(col)==0){
clcl[,col] <- clinic[,i]
}
}
if(!exists("SamplesOrPatients", mode = "any")){
pos <- 1
envir = as.environment(pos)
if(file.exists(paste0(Lexical_colnames_path$Project.Processes, "/",project,".SamplesOrPatients.txt"))){
SamplesOrPatients <- data.table::fread(paste0(Lexical_colnames_path$Project.Processes, "/",project,".SamplesOrPatients.txt"))
} else {  SamplesOrPatients <- data.table::fread(paste(Lexical_colnames_path$Processes,"SamplesOrPatients.txt",sep = "/")) }
assign("SamplesOrPatients", SamplesOrPatients, envir = envir)
}
if(type=="Sample"){
cc <-  SamplesOrPatients[which(SamplesOrPatients$Type=="Samples.Pheno" | SamplesOrPatients$Type=="Both"),]$Descirption
cc <- cc[!cc%in%("SamplesID")]
if(all(is.na(clcl$SamplesID))){
message("No SamplesID found in raw clinical data. Using PatientID instead")
clcl$SamplesID <- clcl$PatientsID
}
if(length(which(duplicated(clcl$SamplesID)))==0) {
clinic2 <-  clcl[,c("SamplesID", cc)]
clinic2[clinic2==""] <- NA
clinic2[clinic2=="NA"] <- NA
Metadata$Sample.pheno <- clinic2
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
} else {
cl_rolled <- clcl %>%
# create groups by name
group_by(SamplesID) %>%
dplyr::summarise(across(everything(), ~paste0(unique(na.omit(.x)), collapse = ";")))
cl_rolled <- as.data.frame(cl_rolled)
cl_rolled <-  cl_rolled[,c("SamplesID", cc)]
cl_rolled[cl_rolled==""] <- NA
cl_rolled[cl_rolled=="NA"] <- NA
Metadata$Sample.pheno <- cl_rolled
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
}
} else if(type=="Patients")
{
cc <-  SamplesOrPatients[which(SamplesOrPatients$Type=="Patients.Pheno" | SamplesOrPatients$Type=="Both"),]$Descirption
cc <- cc[!cc%in%("PatientsID")]
if(all(is.na(clcl$PatientsID))){
message("No PatientsID found in raw clinical data. Using PatientID instead")
clcl$PatientsID <- clcl$SamplesID
}
if(length(which(duplicated(clcl$PatientsID)))==0) {
if(all(is.na(clcl$PatientsID))){
message("No PatientsID found in raw clinical data. Using PatientID instead")
clinic2 <-  clcl[,c("SamplesID", cc)]
} else {
clinic2 <-  clcl[,c("PatientsID", cc)]
}
clinic2 <-  clcl[,c("PatientsID", cc)]
clinic2[clinic2==""] <- NA
clinic2[clinic2=="NA"] <- NA
Metadata$Patient.clinic <- clinic2
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
} else {
cl_rolled <- clcl %>%
# create groups by name
group_by(PatientsID) %>%
dplyr::summarise(across(everything(), ~paste0(unique(na.omit(.x)), collapse = ";")))
isNA <- which(is.na( cl_rolled$PatientsID))
if(length(isNA)>0){ cl_rolled <- as.data.frame(cl_rolled[-isNA,])  }
cl_rolled <- as.data.frame(cl_rolled)
cl_rolled <-  cl_rolled[,c("PatientsID", cc)]
cl_rolled[cl_rolled==""] <- NA
cl_rolled[cl_rolled=="NA"] <- NA
Metadata$Patient.clinic <- cl_rolled
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
}
} else {
stop("Choose type = 'Sample Pheno' or 'Patients' clinical data' ")}
return(Metadata)
}
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = list.files.path, project = project)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", Lexical_colnames_path = list.files.path, project = project) # no data cleaned because LexicClinic and Samples or Patient could not be actualised
View(Meta)
View(LexicClinic)
View(Meta)
Meta[["Patient.clinic"]]
#' @param type "Sample Pheno" or "Patients' clinical data" for building clean clinical data from raw clinical data.
#' @param Lexical_colnames_path file path to find lexique of colnames
#' @param list.files.path dir path
#'  @param project project
#' @importFrom utils menu
#' @import dplyr
#' @return a data frame of Samples pheno or patients clinical data. If Sample ID and Patients ID are the sames, so Samples.pheno and Patient_clinic are the same data frame
#' @export
#'
#' @examples "none"
CleaningClinic <- function(Metadata, type = c("Sample", "Patients"), Lexical_colnames_path, project){
if(!exists("LexicClinic", mode = "any")){
pos <- 1
envir = as.environment(pos)
if(file.exists(paste0(Lexical_colnames_path$Project.Processes, "/",project,".Lexic.txt"))){
x <- scan(paste0(Lexical_colnames_path$Project.Processes, "/",project,".Lexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
LexicClinic<- lapply(x, `[`, -1)
assign("LexicClinic", LexicClinic, envir = envir)
} else {  assign("LexicClinic", ColNameClinic(Lexical_colnames_path$Processes), envir = envir) }
}
NB <- which(attributes(Metadata)$Data.Type=="Clinical.data" & attributes(Metadata)$Raw.data=="Yes")
if(length(NB)==0){stop("No clinical data in meta object")}
clinic <- Metadata[[NB]]
clcl <-  data.frame(matrix(nrow = nrow(clinic), ncol = length(LexicClinic)))
colnames(clcl) = names(LexicClinic)
LexicClinic <- lapply(LexicClinic, toupper)
colnames(clinic) <-gsub("[.]", "_",colnames(clinic))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[.]", "_",x))
for (i in 1:ncol(clinic)) {
pat <- paste0("^",toupper(colnames(clinic)[i]),"$")
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
print(paste("pat = ",pat,"col = ", col))
if(!length(col)==0){
clcl[,col] <- clinic[,i]
}
}
if(!exists("SamplesOrPatients", mode = "any")){
pos <- 1
envir = as.environment(pos)
if(file.exists(paste0(Lexical_colnames_path$Project.Processes, "/",project,".SamplesOrPatients.txt"))){
SamplesOrPatients <- data.table::fread(paste0(Lexical_colnames_path$Project.Processes, "/",project,".SamplesOrPatients.txt"))
} else {  SamplesOrPatients <- data.table::fread(paste(Lexical_colnames_path$Processes,"SamplesOrPatients.txt",sep = "/")) }
assign("SamplesOrPatients", SamplesOrPatients, envir = envir)
}
if(type=="Sample"){
cc <-  SamplesOrPatients[which(SamplesOrPatients$Type=="Samples.Pheno" | SamplesOrPatients$Type=="Both"),]$Descirption
cc <- cc[!cc%in%("SamplesID")]
if(all(is.na(clcl$SamplesID))){
message("No SamplesID found in raw clinical data. Using PatientID instead")
clcl$SamplesID <- clcl$PatientsID
}
if(length(which(duplicated(clcl$SamplesID)))==0) {
clinic2 <-  clcl[,c("SamplesID", cc)]
clinic2[clinic2==""] <- NA
clinic2[clinic2=="NA"] <- NA
Metadata$Sample.pheno <- clinic2
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
} else {
cl_rolled <- clcl %>%
# create groups by name
group_by(SamplesID) %>%
dplyr::summarise(across(everything(), ~paste0(unique(na.omit(.x)), collapse = ";")))
cl_rolled <- as.data.frame(cl_rolled)
cl_rolled <-  cl_rolled[,c("SamplesID", cc)]
cl_rolled[cl_rolled==""] <- NA
cl_rolled[cl_rolled=="NA"] <- NA
Metadata$Sample.pheno <- cl_rolled
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
}
} else if(type=="Patients")
{
cc <-  SamplesOrPatients[which(SamplesOrPatients$Type=="Patients.Pheno" | SamplesOrPatients$Type=="Both"),]$Descirption
cc <- cc[!cc%in%("PatientsID")]
if(all(is.na(clcl$PatientsID))){
message("No PatientsID found in raw clinical data. Using PatientID instead")
clcl$PatientsID <- clcl$SamplesID
}
if(length(which(duplicated(clcl$PatientsID)))==0) {
if(all(is.na(clcl$PatientsID))){
message("No PatientsID found in raw clinical data. Using PatientID instead")
clinic2 <-  clcl[,c("SamplesID", cc)]
} else {
clinic2 <-  clcl[,c("PatientsID", cc)]
}
clinic2 <-  clcl[,c("PatientsID", cc)]
clinic2[clinic2==""] <- NA
clinic2[clinic2=="NA"] <- NA
Metadata$Patient.clinic <- clinic2
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
} else {
cl_rolled <- clcl %>%
# create groups by name
group_by(PatientsID) %>%
dplyr::summarise(across(everything(), ~paste0(unique(na.omit(.x)), collapse = ";")))
isNA <- which(is.na( cl_rolled$PatientsID))
if(length(isNA)>0){ cl_rolled <- as.data.frame(cl_rolled[-isNA,])  }
cl_rolled <- as.data.frame(cl_rolled)
cl_rolled <-  cl_rolled[,c("PatientsID", cc)]
cl_rolled[cl_rolled==""] <- NA
cl_rolled[cl_rolled=="NA"] <- NA
Metadata$Patient.clinic <- cl_rolled
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
}
} else {
stop("Choose type = 'Sample Pheno' or 'Patients' clinical data' ")}
return(Metadata)
}
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = list.files.path, project = project)
#' @param type "Sample Pheno" or "Patients' clinical data" for building clean clinical data from raw clinical data.
#' @param Lexical_colnames_path file path to find lexique of colnames
#' @param list.files.path dir path
#'  @param project project
#' @importFrom utils menu
#' @import dplyr
#' @return a data frame of Samples pheno or patients clinical data. If Sample ID and Patients ID are the sames, so Samples.pheno and Patient_clinic are the same data frame
#' @export
#'
#' @examples "none"
CleaningClinic <- function(Metadata, type = c("Sample", "Patients"), Lexical_colnames_path, project){
if(!exists("LexicClinic", mode = "any")){
pos <- 1
envir = as.environment(pos)
if(file.exists(paste0(Lexical_colnames_path$Project.Processes, "/",project,".Lexic.txt"))){
x <- scan(paste0(Lexical_colnames_path$Project.Processes, "/",project,".Lexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
LexicClinic<- lapply(x, `[`, -1)
assign("LexicClinic", LexicClinic, envir = envir)
} else {  assign("LexicClinic", ColNameClinic(Lexical_colnames_path$Processes), envir = envir) }
}
NB <- which(attributes(Metadata)$Data.Type=="Clinical.data" & attributes(Metadata)$Raw.data=="Yes")
if(length(NB)==0){stop("No clinical data in meta object")}
clinic <- Metadata[[NB]]
clcl <-  data.frame(matrix(nrow = nrow(clinic), ncol = length(LexicClinic)))
colnames(clcl) = names(LexicClinic)
LexicClinic <- lapply(LexicClinic, toupper)
colnames(clinic) <-gsub("[.]", "_",colnames(clinic))
LexicClinic <-  lapply(LexicClinic,function(x) gsub("[.]", "_",x))
for (i in 1:ncol(clinic)) {
pat <- toupper(colnames(clinic)[i])
col <- grep(paste("\\b",pat, "\\b",sep=""), LexicClinic)
print(paste("pat = ",pat,"col = ", col))
if(!length(col)==0){
clcl[,col] <- clinic[,i]
}
}
if(!exists("SamplesOrPatients", mode = "any")){
pos <- 1
envir = as.environment(pos)
if(file.exists(paste0(Lexical_colnames_path$Project.Processes, "/",project,".SamplesOrPatients.txt"))){
SamplesOrPatients <- data.table::fread(paste0(Lexical_colnames_path$Project.Processes, "/",project,".SamplesOrPatients.txt"))
} else {  SamplesOrPatients <- data.table::fread(paste(Lexical_colnames_path$Processes,"SamplesOrPatients.txt",sep = "/")) }
assign("SamplesOrPatients", SamplesOrPatients, envir = envir)
}
if(type=="Sample"){
cc <-  SamplesOrPatients[which(SamplesOrPatients$Type=="Samples.Pheno" | SamplesOrPatients$Type=="Both"),]$Descirption
cc <- cc[!cc%in%("SamplesID")]
if(all(is.na(clcl$SamplesID))){
message("No SamplesID found in raw clinical data. Using PatientID instead")
clcl$SamplesID <- clcl$PatientsID
}
if(length(which(duplicated(clcl$SamplesID)))==0) {
clinic2 <-  clcl[,c("SamplesID", cc)]
clinic2[clinic2==""] <- NA
clinic2[clinic2=="NA"] <- NA
Metadata$Sample.pheno <- clinic2
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
} else {
cl_rolled <- clcl %>%
# create groups by name
group_by(SamplesID) %>%
dplyr::summarise(across(everything(), ~paste0(unique(na.omit(.x)), collapse = ";")))
cl_rolled <- as.data.frame(cl_rolled)
cl_rolled <-  cl_rolled[,c("SamplesID", cc)]
cl_rolled[cl_rolled==""] <- NA
cl_rolled[cl_rolled=="NA"] <- NA
Metadata$Sample.pheno <- cl_rolled
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
}
} else if(type=="Patients")
{
cc <-  SamplesOrPatients[which(SamplesOrPatients$Type=="Patients.Pheno" | SamplesOrPatients$Type=="Both"),]$Descirption
cc <- cc[!cc%in%("PatientsID")]
if(all(is.na(clcl$PatientsID))){
message("No PatientsID found in raw clinical data. Using PatientID instead")
clcl$PatientsID <- clcl$SamplesID
}
if(length(which(duplicated(clcl$PatientsID)))==0) {
if(all(is.na(clcl$PatientsID))){
message("No PatientsID found in raw clinical data. Using PatientID instead")
clinic2 <-  clcl[,c("SamplesID", cc)]
} else {
clinic2 <-  clcl[,c("PatientsID", cc)]
}
clinic2 <-  clcl[,c("PatientsID", cc)]
clinic2[clinic2==""] <- NA
clinic2[clinic2=="NA"] <- NA
Metadata$Patient.clinic <- clinic2
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
} else {
cl_rolled <- clcl %>%
# create groups by name
group_by(PatientsID) %>%
dplyr::summarise(across(everything(), ~paste0(unique(na.omit(.x)), collapse = ";")))
isNA <- which(is.na( cl_rolled$PatientsID))
if(length(isNA)>0){ cl_rolled <- as.data.frame(cl_rolled[-isNA,])  }
cl_rolled <- as.data.frame(cl_rolled)
cl_rolled <-  cl_rolled[,c("PatientsID", cc)]
cl_rolled[cl_rolled==""] <- NA
cl_rolled[cl_rolled=="NA"] <- NA
Metadata$Patient.clinic <- cl_rolled
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinical.data")
attributes(Metadata)$Raw.data <- c(attributes(Metadata)$Raw.data,"No")}
}
} else {
stop("Choose type = 'Sample Pheno' or 'Patients' clinical data' ")}
return(Metadata)
}
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", Lexical_colnames_path = list.files.path, project = project)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", Lexical_colnames_path = list.files.path, project = project) # no data cleaned because LexicClinic and Samples or Patient could not be actualised
View(Meta)
Meta[["Sample.pheno"]]
library(PublicDataNorm)
