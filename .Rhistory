else {stop("Genes.file is not a character string or an environment object as data.frame or matrix.")}}
if(length(Genes[,1])==nrow(dt)){
rownames(dt) =  Genes[,1]
} else { stop(paste(Genes.file, "has not the same length as rows of expression matrix"))}
}
if(length(Metadata)>=1) {
l = length(Metadata)
if(!all(str_detect(names(Metadata),name))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Count")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned, "No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)} # Metadat >1
else {
Metadata$mat <-  dt
names(Metadata)[1] <- name
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c("Count")
attributes(Metadata)$Export <- "Yes"
attributes(Metadata)$Cleaned = c("No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)
} # Metadata = 0
}
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setID.Column ="sample" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot ,
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
colnames(Metadata$Raw.count)[1:5]
CheckMeta(Metadata)
rm(AddExpressionMatrixSC)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setID.Column ="sample" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
colnames(Metadata$Raw.count)[1:5]
gc()
CheckMeta(Metadata)
#Step 5 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
View(cellAnnot)
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Age"="age",
"Sex" = "sex",
"PFSdelay"="PFS_DFS",
"Disease" ="cancer_type",
"OSevent" ="OS",
"PatientSampling" = "site",
"TreatmentInfo" = "site",
"PatientSampling" = "treated_naive",
"pT" = "AJCC_T",
"pN" = "AJCC_N",
"pM" = "AJCC_M",
"Stage" = "AJCC_stage",
"Size" = "size",
"Grade" = "grade") )
SL = addSeveralKeysToLexic(lexic = SL,vector = c("PatientsID" = "sample",
"CellType" = "cell_type"))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = NULL,
SamplesExportname =NULL ,force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["Cells.Annotation"]]
Metadata$Patients.Clinic$Grade
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = NULL,
SamplesExportname =NULL ,force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata$Patients.Clinic$Grade
View(Metadata)
Metadata[["Clinic"]]
Metadata$Patients.Clinic$Grade = gsub("W-MD", "Well-Mildly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("M-PD", "Mildly-Poorly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("WD", "Well differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("MD", "Mildly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("PD", "Poorly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade
gc()
View(Metadata)
Metadata[["Cells.Annotation"]]
# Step 5 : LocalDatabase implementation
ExportTSV(MetaData)
gc()
attributes(Metadata)
# Step 5 : LocalDatabase implementation
MetaData=ExportTSV(Metadata)
attributes(Metadata)
library(PublicDataNorm)
# Step 5 : LocalDatabase implementation
MetaData=ExportTSV(Metadata)
attributes(Metadata)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Metadata-data.csv",
name = "Clinic",
type = "Patients",
setID.Column ="sample" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
colnames(Metadata$Raw.count)[1:5]
gc()
CheckMeta(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = NULL,
SamplesExportname =NULL ,force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata$Patients.Clinic$Grade = gsub("W-MD", "Well-Mildly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("M-PD", "Mildly-Poorly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("WD", "Well differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("MD", "Mildly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("PD", "Poorly differenciated",Metadata$Patients.Clinic$Grade )
gc()
attributes(Metadata)
library(PublicDataNorm)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Metadata-data.csv",
name = "Clinic",
type = "Patients",
setID.Column ="sample" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Metadata-data.csv",
name = "Clinic",
type = "Patients",
setID.Column ="sample" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
project <- "Lin"
path <- "E:/DataBase"# Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Metadata-data.csv",
name = "Clinic",
type = "Patients",
setID.Column ="sample" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
traceback()
Rawpath(Metadata)
#' @param Genes.file an object or a character string name of single cell gene annotation file specific to expression matrix. Not mandatory.
#' @param force.replace set as F. T : replace an already object with the same name
#' @importFrom utils menu
#' @importFrom Matrix readMM
#' @import data.table
#' @import rlang
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddExpressionMatrixSC <- function(Metadata=NULL,
Cell.file=NULL,
Genes.file=NULL,
setID.cellAnnotColumn = NULL,
name,
ExpressionMatrix = NULL,
force.replace=F ) {
Omics.type = "Single.Cell"
path = Rawpath(Metadata)
if(is.null(Metadata)){stop("A Metadata object must be created with CreateDataset() function. See ?CreateDataset.")}
if(is.null(ExpressionMatrix)){stop("ExpressionMatrix must be a character string or an environement object.")}
if(!is.list(Metadata)){stop("Metadata should be a list.")}
if(is.null(attributes(Metadata)$Omics.type)){attributes(Metadata)$Omics.type=Omics.type}
if(!attributes(Metadata)$Omics.type==Omics.type){warning(paste("Omics.type is", Omics.type,"different than attributes(Metadata)$Omics.type",
attributes(Metadata)$Omics.type, "\nWill be replace"))
attributes(Metadata)$Omics.type = Omics.type
}
l <-length(names(Metadata))
if(inherits(ExpressionMatrix, "character")){
lf <- list.files(path)
if(length(lf)>1){print(c(message("There is more than one files in Dir :"),lf))}
if(all(str_detect(lf, ".rds|.txt|.csv|.tsv|.mtx", negate = FALSE)==F)){stop("No '*.rds' or '*.txt' or '*.csv' or '*.mtx' files in set directory. \n change path or add file")}
filepath <- paste(path,ExpressionMatrix,sep="/")
message(paste("Loading", ExpressionMatrix, "file"))
if(str_detect(ExpressionMatrix, ".rds", negate = FALSE)){
dt <- readRDS(filepath)}
else {
if(str_detect(ExpressionMatrix, ".txt", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
}  else {
if(str_detect(ExpressionMatrix, ".csv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
}else {
if(str_detect(ExpressionMatrix, ".tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
} else {
if(str_detect(ExpressionMatrix, ".mtx", negate = FALSE)){
dt <- readMM(filepath)
gc()
#dt = as.matrix(dt)
#gc()
} # mtx
}# tsv
}#csv
}#txt
}#rds
}#ExpressionMatrix caract
else {
if(rlang::inherits_any(ExpressionMatrix, c("data.frame", "matrix", "dgCMatrix" ,"dgTMatrix"))){
dt = ExpressionMatrix
}else { stop("Object set in ExpressionMatrix is not of class 'data.frame', 'matrix', 'dgCMatrix' ,'dgTMatrix'")}}
if(is.null(colnames(dt))){
message(paste(ExpressionMatrix,"has no colnames. A Cell.csv file may be associated in raw data directory."))}
if(!"CellsAnnot" %in% attributes(Metadata)){
if(!is.null(Cell.file)){
if(rlang::inherits_any(Cell.file, c("data.frame", "matrix"))){Cells = Cell.file} else {
if(inherits(Cell.file, "character")){
message(paste("Loading",Cell.file ))
Cells <- data.table::fread(file.path(path,Cell.file))
if("cell_name"%in%colnames(Cells)){
rownames(Cells)  = Cells$cell_name} else {
message("Cell.file has no colnames specified 'cell_name', the first collumn will be used.\n Please check file before adding cell file.")
Cells <- as.data.frame(data.table::fread(file.path(path,Cell.file),header = F))
rownames(Cells) = Cells[,1]}}else {stop("Cell.file is not a character string or an environment object as data.frame or matrix.")}}
if(length(rownames(Cells)==length(colnames(dt)))) {  colnames(dt) = rownames(Cells)} else
{ stop(paste(Cell.file, "has not the same number of cells than column of expression matrix."))
}
if(is.null(setID.cellAnnotColumn)){stop("setID.cellAnnotColumn mus be specify")}
if(!setID.cellAnnotColumn %in%colnames(Cells) ){stop(paste(setID.cellAnnotColumn, "is not found in colnames of Cell.File"))}
Cells$CellsBarcode = Cells[,setID.cellAnnotColumn]
}
}
if(is.null(rownames(dt))){
message(paste(ExpressionMatrix,"has no rownames A Genes.csv file may be associated in raw data directory."))}
if(!is.null(Genes.file)){
if(rlang::inherits_any(Genes.file, c("data.frame", "matrix"))){Genes =Genes.file }else {
if(inherits(Genes.file, "character")){
message(paste("Loading",Genes.file ))
Genes <- as.data.frame(data.table::fread(file.path(path,Genes.file), header = F))}
else {stop("Genes.file is not a character string or an environment object as data.frame or matrix.")}}
if(length(Genes[,1])==nrow(dt)){
rownames(dt) =  Genes[,1]
} else { stop(paste(Genes.file, "has not the same length as rows of expression matrix"))}
}
if(length(Metadata)>=1) {
l = length(Metadata)
if(!all(str_detect(names(Metadata),name))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Count")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned, "No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)} # Metadat >1
else {
Metadata$mat <-  dt
names(Metadata)[1] <- name
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c("Count")
attributes(Metadata)$Export <- "Yes"
attributes(Metadata)$Cleaned = c("No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)
} # Metadata = 0
}
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Metadata-data.csv",
name = "Clinic",
type = "Patients",
setID.Column ="sample" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
traceback()
#' @param Export  TRUE or FALSE. If data to be Exported, set T.
#' @param join c("left_join", "full_join")
#' @param force.replace set as F. T : replace an already object with the same name
#' @importFrom utils menu
#' @import purrr
#' @import dplyr
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddClinicFromFile <- function(Metadata,
ClinicFile = NULL,
setID.Column = NULL,
name= NULL,
type = c("Samples", "Patients", "Cells"),
force.replace=F,
Export = F,
mergeToClinic = NULL,
mergeBy= NULL,
join = c("left_join", "full_join")) {
if(is.null(Metadata)){stop("No meta data object found")}
if(!is.list(Metadata)){stop("Metadata should be a list.")}
if(is.null(ClinicFile)){stop("No set ClinicFile information")}
if(!inherits(ClinicFile,"character")){stop("ClinicFile is not a character string.") }
l <-length(names(Metadata))
filepath <- paste(Rawpath(Metadata),ClinicFile,sep="/")
if(type=="Samples"){ExpressionMatrixIdColumn = "SamplesID"}
if(type=="Patients"){ExpressionMatrixIdColumn = "PatientsID"}
if(type=="Cells"){ExpressionMatrixIdColumn = "CellsBarcode"}
if(length(filepath)>1){
if(is.null(mergeBy)){stop("For merging data from multiple loading, mergeBy='colnames' must be specified")}
clinic <- list()
count <- 0
for (i in filepath) {
if(all(str_detect(i, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
count <- count+1
if(str_detect(i, ".rds", negate = FALSE)){clinic[[count]] <- readRDS(i) }
if(str_detect(i, ".txt|.csv|.tsv", negate = FALSE)){clinic[[count]] <- suppressWarnings(as.data.frame(data.table::fread(i, na.strings = "")))}}
if(join=="full_join"){dt <- clinic %>% purrr::reduce(full_join, by=mergeBy)}
if(join=="left_join"){dt <- clinic %>% purrr::reduce(left_join, by=mergeBy)}}
if(length(filepath)==1){
if(all(str_detect(filepath, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(filepath, ".rds", negate = FALSE)){dt <- readRDS(filepath) }
if(str_detect(filepath, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath, na.strings = "")))
rownames(dt) <-    dt[,1]}
}
if(!is.null(setID.Column)){
if(type=="Samples"){ dt$SamplesID =dt[,setID.Column]}
if(type=="Patients"){dt$PatientsID =dt[,setID.Column]}
if(type=="Cells"){dt$CellsBarcode =dt[,setID.Column]}
}
if (is.null(mergeToClinic)){
if(!all(str_detect(names(Metadata),name)==F)){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt
tt = which(str_detect(names(Metadata), name))
if(!type%in%c("Samples","Patients","Cells")){stop("type must be set to Samples or Patients")}
if(type == "Samples") {attributes(Metadata)$Data.Type[tt] <-  "SamplesAnnot"}
if(type == "Patients") {attributes(Metadata)$Data.Type[tt] <- "Clinic"}
if(type == "Cells") {attributes(Metadata)$Data.Type[tt] <- "CellsAnnot"}
if(Export==T){attributes(Metadata)$Export[tt] <- "Yes" } else {
attributes(Metadata)$Export[tt] <- "No" }
attributes(Metadata)$Cleaned[tt] = "No"
} else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name
if(!type%in%c("Samples","Patients", "Cells")){stop("type must be set to Samples or Patients")}
if(l==0) {   if(type == "Samples") {attributes(Metadata)$Data.Type <-  c("SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c("Clinic")}
if(type == "Cells") {attributes(Metadata)$Data.Type <-  "CellsAnnot"}
if(Export==T){attributes(Metadata)$Export <- c("Yes") } else {attributes(Metadata)$Export <- c("No") }
attributes(Metadata)$Cleaned = "No"
} else {  if(type == "Samples") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinic")}
if(type == "Cells") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"CellsAnnot")}
if(Export==T){attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") } else {attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"No") }
attributes(Metadata)$Cleaned = c( attributes(Metadata)$Cleaned,"No")
}}
} else {
if(!mergeToClinic%in%names(Metadata)){stop(paste("No",mergeToClinic,"found in Meta Object.\n
For merging 1 newly loaded clinical data to an already loaded file in Meta Object, firslty load one.\n
You can list a list of caracter for multiple clinical data to load at once and will be full_join."))}
if(is.null(mergeBy)){stop("For merging data, mergeBy='colnames' must be specified")}
dt <- list(Metadata[[mergeToClinic]], dt)
if(join=="full_join"){
dt <- dt %>% purrr::reduce(full_join, by=mergeBy)
}
if(join=="left_join"){
dt <- dt %>% purrr::reduce(left_join, by=mergeBy)
}
Metadata[[mergeToClinic]] <- dt
}
if(type != "Patients"){type2 = "Samples annotation"}else{type2 = "Patients clinical data"}
if(!ExpressionMatrixIdColumn%in%colnames(dt)){stop(paste(ExpressionMatrixIdColumn, "is not in",type2, ClinicFile , "colnames."))}
return(Metadata)
}
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Metadata-data.csv",
name = "Clinic",
type = "Patients",
setID.Column ="sample" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
traceback()
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Metadata-data.csv",
name = "Clinic",
type = "Patients",
setID.Column ="sample" )
ClinicFile = "Metadata-data.csv"
library(PublicDataNorm)
filepath <- paste(Rawpath(Metadata),ClinicFile,sep="/")
filepath
length(filepath)>1
if(length(filepath)==1){
if(all(str_detect(filepath, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(filepath, ".rds", negate = FALSE)){dt <- readRDS(filepath) }
if(str_detect(filepath, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath, na.strings = "")))
rownames(dt) <-    dt[,1]}
}
"Meta-data.csv"
