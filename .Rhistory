cl_rolled <- as.data.frame(cl_rolled)
rownames(cl_rolled) <- cl_rolled$PatientsID
cl_rolled <-  cl_rolled[,c("PatientsID", cc)]
Metadata$Patient.clinic <- cl_rolled
}
} else {
stop("Choose type = 'Sample Pheno' or 'Patients' clinical data' ")}
return(Metadata)
}
Meta <- CleaningClinic(Metadata = Meta, type = "Sample Pheno", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
Meta <- CleaningClinic(Metadata = Meta, type = "Patients' clinical data", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
Meta[["Sample.pheno"]]
Meta[["Patient.clinic"]]
#'
#' @param Metadata Metadata object
#' @param type "Sample Pheno" or "Patients' clinical data" for building clean clinical data from raw clinical data.
#' @param list.files.path file path to find lexique of colnames
#' @importFrom utils menu
#' @importFrom dyplr summarise
#' @return a data frame of Samples pheno or patients clinical data. If Sample ID and Patients ID are the sames, so Samples.pheno and Patient_clinic are the same data frame
#' @export
#'
#' @examples "none"
CleaningClinic <- function(Metadata, type = c("Sample Pheno", "Patients' clinical data"), Lexical_colnames_path){
cnameClinic <- ColNameClinic(Lexical_colnames_path)
if(all(str_detect(names(Metadata),"clinic"))==T){stop("No clinical data in meta object")}
clinic <- Metadata[which(str_detect(names(Metadata),"clinic"))][[1]]
clcl <-  data.frame(matrix(nrow = nrow(clinic), ncol = length(cnameClinic)))
colnames(clcl) = names(cnameClinic)
cnameClinic <- lapply(cnameClinic, toupper)
for (i in 1:ncol(clinic)) {
pat <- toupper(colnames(clinic)[i])
col <- grep(paste("\\b",pat,"\\b", sep=""), cnameClinic)
if(!length(col)==0){
clcl[,col] <- clinic[,i]
}
}
SamplesOrPatients <- data.table::fread(paste(Lexical_colnames_path,"SamplesOrPatients.txt",sep = "/"))
if(type=="Sample Pheno"){
cc <-  SamplesOrPatients[which(SamplesOrPatients$Type=="Samples.Pheno" | SamplesOrPatients$Type=="Both"),]$Descirption
cc <- cc[!cc%in%("SamplesID")]
if(length(which(duplicated(clcl$Samples)))==0) {
clinic2 <-  clcl[,c("SamplesID", cc)]
rownames(clinic2) <- clinic2$Samples
Metadata$Sample.pheno <- clinic2[colnames(Metadata[which(str_detect(names(Metadata), c("Raw", "matrix")))][[1]]),]
} else {
cl_rolled <- clcl %>%
# create groups by name
group_by(SamplesID) %>%
summarise(across(everything(), ~paste0(unique(na.omit(.x)), collapse = ";")))
cl_rolled <- as.data.frame(cl_rolled)
rownames(cl_rolled) <- cl_rolled$SamplesID
cl_rolled <-  cl_rolled[,c("SamplesID", cc)]
Metadata$Sample.pheno <- cl_rolled
}
} else if(type=="Patients' clinical data")
{
cc <-  SamplesOrPatients[which(SamplesOrPatients$Type=="Patients.Pheno" | SamplesOrPatients$Type=="Both"),]$Descirption
cc <- cc[!cc%in%("PatientsID")]
if(length(which(duplicated(clcl$Patients)))==0) {
clinic2 <-  clcl[,c("PatientsID", cc)]
rownames(clinic2) <- clinic2$Patients
Metadata$Patient.clinic <- clinic2
} else {
cl_rolled <- clcl %>%
# create groups by name
group_by(PatientsID) %>%
summarise(across(everything(), ~paste0(unique(na.omit(.x)), collapse = ";")))
isNA <- which(is.na( cl_rolled$PatientsID))
if(length(isNA)>0){ cl_rolled <- as.data.frame(cl_rolled[-isNA,])  }
cl_rolled <- as.data.frame(cl_rolled)
rownames(cl_rolled) <- cl_rolled$PatientsID
cl_rolled <-  cl_rolled[,c("PatientsID", cc)]
Metadata$Patient.clinic <- cl_rolled
}
} else {
stop("Choose type = 'Sample Pheno' or 'Patients' clinical data' ")}
return(Metadata)
}
Meta <- CleaningClinic(Metadata = Meta, type = "Sample Pheno", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
Meta <- CleaningClinic(Metadata = Meta, type = "Patients' clinical data", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
Meta[["Sample.pheno"]]
Meta <- CleaningClinic(Metadata = Meta, type = "Sample Pheno", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
Meta <- CleaningClinic(Metadata = Meta, type = "Patients' clinical data", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
library(PublicDataNorm)
library(PublicDataNorm)
project <- "Maurer"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching yout own Dir configuratioh
list.files()
list.files.path <- DirCheck(project,path)
paste0(list.files.path$Script,"/Maurer.R")==rstudioapi::getActiveDocumentContext()$path # Has to be TRUE
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
local = T,path = list.files.path$RawDataDump, name.local.file = "MaurerRaw")
head(Meta$MaurerRaw.matrix[,1:5])
Meta[["MaurerRaw.matrix"]] <- Meta[["MaurerRaw.matrix"]][,-1]  # First colonne, geneSymbols drop off.
Meta <- AddClinic(Metadata = Meta, path = list.files.path$RawDataDump, name.local.file = "MaurerRaw.clinic", merge = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample Pheno", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
Meta <- CleaningClinic(Metadata = Meta, type = "Patients' clinical data", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Lexic"  )
CheckMeta(Meta)
Meta <- AddgeneAnnot(Meta = Meta , gtf.file.dir = "~/R/gtf" , gtf.files = "gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
CheckMeta(Meta) # can display number of common genesSymbols frome Raw or Normalized matrix in geneAnnotation file
View(Meta)
keep <- data.frame(var = apply(Meta$MaurerRaw.matrix,1,var),gene = rownames(Meta$MaurerRaw.matrix),row.names = rownames(Meta$MaurerRaw.matrix))
View(keep)
DF <- Meta$MaurerRaw.matrix[rownames(keep[keep$var!=0,]),]
UQnorm = function (rawcounts)  {
log2(1 + (t(t(rawcounts)/apply(rawcounts, 2, function(x) {
quantile(x[which(x > 0)], probs = 0.75)
})) * 1000))
}
DF_UQnorm <- as.data.frame(UQnorm(DF))
Meta$MaurerNormalized.Matrix <- DF_UQnorm
View(Meta)
Meta[["MaurerNormalized.Matrix"]]
CheckMeta(Meta) # can display number of common genesSymbols frome Raw or Normalized matrix in geneAnnotation file
CheckMeta(Meta)
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
for i in listfiles(list.files.path$RawDataDump) {
gzip(i, destname=sprintf("\%s.gz", i), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("\%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("\%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("\%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))}
}
}
}
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
for (i in listfiles(list.files.path$RawDataDump)) {
gzip(i, destname=sprintf("\%s.gz", i), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("\%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("\%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("\%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))}
}
}
}
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
for (i in listfiles(list.files.path$RawDataDump)) {
gzip(i, destname=sprintf("%s.gz", i), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("\s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
}
}
}
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
for (i in listfiles(list.files.path$RawDataDump)) {
gzip(i, destname=sprintf("%s.gz", i), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
for (i in list.files(list.files.path$RawDataDump)) {
gzip(i, destname=sprintf("%s.gz", i), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
usethis::use_package(R.utils)
usethis::use_package("R.utils")
setwd("D:/JR_analytics_Rwork/JRA_U1149_Nicolle/PublicDataNorm")
usethis::use_package("R.utils")
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
for (i in list.files(list.files.path$RawDataDump)) {
gzip(i, destname=sprintf("%s.gz", i), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07, ...)}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
library(R.utils)
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
for (i in list.files(list.files.path$RawDataDump)) {
gzip(i, destname=sprintf("%s.gz", i), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
traceback()
list.files(list.files.path$RawDataDump)
i = "MaurerRaw.clinic.csv"
list.files.path$RawDataDump
paste(list.files.path$RawDataDump,i, collapse = /)
paste(list.files.path$RawDataDump,i, collapse = "/")
paste(c(list.files.path$RawDataDump,i), collapse = "/"
)
filename <- paste(c(list.files.path$RawDataDump,i)
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = paste0(list.files.path$PipelineDump,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
}
}
}
filename <- paste(c(list.files.path$RawDataDump,i))
filename
filename <- paste(c(list.files.path$RawDataDump,i),collapse = "/")
sprintf("%s.gz", filename)
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @import R.utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
for (i in list.files(list.files.path$RawDataDump)) {
filename <- paste(c(list.files.path$RawDataDump,i),collapse = "/")
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)
}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = filename)
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind( MetaData[[i]])
write.csv(z,row.names = F ,file = filename)
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { filename <- paste0(list.files.path$PipelineDump,"/",i,".csv")
z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z,row.names = F ,file = filename)
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){
filename <- paste0(list.files.path$RawDataDump,"/",i,".csv")
write.csv(z,row.names = F ,file = filename)
gzip(filename, destname=sprintf("%s.gz", filename), overwrite=FALSE, remove=TRUE, BFR.SIZE=1e+07)}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
Meta2 <- list()
Meta2 <- AddExpressionMatrix(Metadata = Meta2,
local = T,path = list.files.path$RawDataDump, name.local.file = "MaurerRaw")
View(Meta2)
Meta2[["MaurerRaw.matrix"]]
library(PublicDataNorm)
?remove.files.recursively
??remove.files.recursively
devtools::document()
setwd("D:/JR_analytics_Rwork/JRA_U1149_Nicolle/PublicDataNorm")
devtools::document()
`rm(list = c("ExportCSV"))
rm(list = c("ExportCSV"))
devtools::document()
usethis::use_package("DT", "TCGAbiolinks" , "data.table" , "dplyr", "stringr")
usethis::use_package("DT")
usethis::use_package("data.table")
usethis::use_package("dplyr")
usethis::use_package("stringr")
usethis::use_package("TCGAbiolinks")
utils::globalVariables(c("SamplesID", "PatientsID", "na.omit", "query", "bcr_patient_barcode", "type", "gene_type" ,"gene_names"))
usethis::use_package("stats")
usethis::use_github_action_check_standard()
