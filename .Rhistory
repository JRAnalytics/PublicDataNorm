Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut), Samples120]
Meta$dds <-  Meta$dds[rowSums(counts(Meta$dds) >= 5) >= (ncol(assay(Meta$dd))/2),] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds <-  vst(Meta$dds, blind=FALSE) #Raw counts from LCM RNA-Seq were normalized using the variance stabilizing transformation (VST)"
levels(Meta$dds$Compartment)
Meta$dds$Compartment <- droplevels(Meta$dds$Compartment)
Meta$dds <-  vst(Meta$dds, blind=FALSE) #Raw counts from LCM RNA-Seq were normalized using the variance stabilizing transformation (VST)"
plotPCA(Meta$dds, intgroup=c("Compartment"))
Meta$dds <- DESeq(Meta$dds)
dds
Meta$dds
Meta$Sample.pheno$Samples <- as.factor(   Meta$Sample.pheno$Samples )
Meta$Sample.pheno$Compartment <- as.factor( Meta$Sample.pheno$Compartment )
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix,
colData = Meta$Sample.pheno,
design = ~ Compartment)
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples120],
colData = Meta$Sample.pheno[,Samples120],
design = ~ Compartment)
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples120],
colData = Meta$Sample.pheno[Samples120,],
design = ~ Compartment)
Meta$dds
GeneOut <-  unlist(subset( Meta$geneAnnotation, subset = c(chr=="chrX" |chr=="chrY"))$GeneSymbol)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut), Samples120]
Meta$dds <-  Meta$dds[rowSums(counts(Meta$dds) >= 5) >= (ncol(assay(Meta$dd))/2),] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds <- DESeq(Meta$dds)
plotPCA(vsd, intgroup=c("Compartment"))
plotPCA(    Meta$dds, intgroup=c("Compartment"))
Meta$dds
plotPCA(Meta$dds, intgroup=c("Compartment"))
vst <-  vst(Meta$dds, blind=FALSE) #Raw counts from LCM RNA-Seq were normalized using the variance stabilizing transformation (VST)"
plotPCA(vst, intgroup=c("Compartment"))
View(vst)
res <- results(Meta$dds)
View(res)
res
res <- as.data.frame(results(Meta$dds))
res <- subset(res,subset = c(padj< 0.01 ) )
vst <- assay(vst)
vst <- as.data.frame(assay(vst))
vst <- as.data.frame(assay(vst))
str(vst)
View(vst)
FoldChange_GSEA <- function(data.frame = NULL, pheno = NULL,phenoGpe = NULL, Gpe1= NULL ,
Gpe2 =NULL, annot = annot, subselection = subselection,
cutoff.pval = NULL, cutoff.fc = NULL) {
require(dplyr)
DF=data.frame[,subselection]
annot = annot
pheno = pheno[subselection,]
Gpe1 = Gpe1
Gpe2 = Gpe2
subselection = subselection
cutoff.pval = cutoff.pval
cutoff.fc=cutoff.fc
if (length(Gpe1) > 1) { G1 <- apply(DF[,rownames(pheno[which(pheno[,phenoGpe]==Gpe1[1] | pheno[,phenoGpe]==Gpe1[2] | pheno[,phenoGpe]==Gpe1[3] | pheno[,phenoGpe]==Gpe1[4]),]) ], 1, mean) } else {G1 <- apply(DF[,pheno[,phenoGpe]==Gpe1], 1, mean)}
if (length(Gpe2 )> 1) { G2 <- apply(DF[,rownames(pheno[which(pheno[,phenoGpe]==Gpe2[1] | pheno[,phenoGpe]==Gpe2[2] | pheno[,phenoGpe]==Gpe2[3] | pheno[,phenoGpe]==Gpe2[4]),]) ], 1, mean) } else {G2 <- apply(DF[,pheno[,phenoGpe]==Gpe2], 1, mean)}
foldchange <- as.double(G1 - G2)
tMatrice <- as.data.frame(t(DF))
pvalue<-matrix(1,ncol=1,nrow=nrow(DF))
tvalue <- matrix(1,ncol=1,nrow=nrow(DF))
if (length(Gpe1) > 1) {
for(i in 1:nrow(DF)){
pvalue[i,1]<-wilcox.test(tMatrice[rownames(pheno[which(pheno[,phenoGpe]==Gpe1[1] | pheno[,phenoGpe]==Gpe1[2] | pheno[,phenoGpe]==Gpe1[3] | pheno[,phenoGpe]==Gpe1[4]),]),i],
tMatrice[rownames(pheno[pheno[,phenoGpe]==Gpe2,]),i],
exact = F, correct = F)$p.value
tvalue[i,1] <- t.test(tMatrice[rownames(pheno[which(pheno[,phenoGpe]==Gpe1[1] | pheno[,phenoGpe]==Gpe1[2] | pheno[,phenoGpe]==Gpe1[3] | pheno[,phenoGpe]==Gpe1[4]),]),i],
tMatrice[rownames(pheno[pheno[,phenoGpe]==Gpe2,]),i],
var.equal = TRUE)$statistic
}
}
if (length(Gpe2) > 1) {
for(i in 1:nrow(DF)){
pvalue[i,1]<-wilcox.test(tMatrice[rownames(pheno[pheno[,phenoGpe]==Gpe1,]),i],
tMatrice[rownames(pheno[which(pheno[,phenoGpe]==Gpe2[1] | pheno[,phenoGpe]==Gpe2[2] | pheno[,phenoGpe]==Gpe2[3] | pheno[,phenoGpe]==Gpe2[4]),]),i],
exact = F, correct = F)$p.value
tvalue[i,1] <- t.test(tMatrice[rownames(pheno[pheno[,phenoGpe]==Gpe1,]),i],
tMatrice[rownames(pheno[which(pheno[,phenoGpe]==Gpe2[1] | pheno[,phenoGpe]==Gpe2[2] | pheno[,phenoGpe]==Gpe2[3] | pheno[,phenoGpe]==Gpe2[4]),]),i],
var.equal = TRUE)$statistic
}
} else {
for(i in 1:nrow(DF)){
pvalue[i,1]<-wilcox.test(tMatrice[rownames(pheno[pheno[,phenoGpe]==Gpe1,]),i],
tMatrice[rownames(pheno[pheno[,phenoGpe]==Gpe2,]),i],
exact = F, correct = F)$p.value
tvalue[i,1] <- t.test(tMatrice[rownames(pheno[pheno[,phenoGpe]==Gpe1,]),i],
tMatrice[rownames(pheno[pheno[,phenoGpe]==Gpe2,]),i],
var.equal = TRUE)$statistic
}
}
pvalue <- as.double(pvalue)
tvalue <- as.double(tvalue)
padj <- as.double(p.adjust(pvalue, method="fdr"))
res <- data.frame(cbind("GeneID"=rownames(DF) , "log2FoldChange"= foldchange , "pvalue" = pvalue, "padj" = padj,
"G1" = round(G1,2), "G2" = round(G2,2)))
colnames(res) <- c("GeneID", "log2FoldChange", "pvalue", "padj", paste(paste(Gpe1, collapse = ''), "mean expression"), paste(paste(Gpe2, collapse = ''), "mean expression"))
rownames(res) <- rownames(DF)
res$log2FoldChange <- as.numeric(res$log2FoldChange)
res$pvalue <- as.numeric(res$pvalue)
res$padj <- as.numeric(res$padj)
res$tvlaue <- tvalue
res[, paste(paste(Gpe1, collapse = ''), "mean expression")] <- as.numeric(res[, paste(paste(Gpe1, collapse = ''), "mean expression")])
res[, paste(paste(Gpe2, collapse = ''), "mean expression")] <- as.numeric(res[, paste(paste(Gpe2, collapse = ''), "mean expression")])
res$geneID <- annot[rownames(res),"gene_names"]
res$gene_type <- annot[rownames(res), "gene_type"]
x <- rownames(res)
res <- res %>% mutate(
UCSC.link = paste0(
"HYPERLINK(\"",
annot[rownames(res),"UCSC"],
"\", \"",
rep("UCSC", length(x)),
"\")"
)
)
res <- res %>% mutate(
Ensembl.link = paste0(
"HYPERLINK(\"",
annot[rownames(res),"Ensemble_link"],
"\", \"",
rep("Ensembl", length(x)),
"\")"
)
)
res <- res %>% mutate(
Entrez.link = paste0(
"HYPERLINK(\"",
annot[rownames(res),"Entrez_geneID"],
"\", \"",
rep("Entrez", length(x)),
"\")"
)
)
res[which(is.na(res$geneID)),c("Entrez.link","UCSC.link", "Ensembl.link")] <- "-"
res[which(annot[rownames(res),16]=="-"),c("Entrez.link")] <- "-"
if(is.null(cutoff.pval) | is.null(cutoff.fc)) {
res <- res[order(res$log2FoldChange, decreasing = T),] } else {
if (is.null(cutoff.pval)) {
res <- as.data.frame(res[which(abs(as.numeric(res$log2FoldChange)) > cutoff.fc ),])
res <- res[order(res$log2FoldChange, decreasing = T),]
} else {
if(is.null(cutoff.fc)) {
res <- as.data.frame(res[which(res$pvalue<cutoff.pval ),])
res <- res[order(res$log2FoldChange, decreasing = T),]
} else {  res <- as.data.frame(res[which(res$pvalue<cutoff.pval & abs(as.numeric(res$log2FoldChange)) > cutoff.fc ),])
res <- res[order(res$log2FoldChange, decreasing = T),]
}
}
}
class(res$UCSC.link) <- "formula"
class(res$Entrez.link) <- "formula"
class(res$Ensembl.link) <- "formula"
return(res)
}
Meta$Sample.pheno$Compartment
res <- FoldChange_GSEA(vst,pheno= Meta$Sample.pheno,
subselection = Sample120,
Gpe1 = "stroma", Gpe2 = "epithelium ",
phenoGpe = "Compartment",
annot = Meta$geneAnnotation,
cutoff.pval = NULL,
cutoff.fc = NULL)
res <- FoldChange_GSEA(vst,pheno= Meta$Sample.pheno,
subselection = Samples120,
Gpe1 = "stroma", Gpe2 = "epithelium ",
phenoGpe = "Compartment",
annot = Meta$geneAnnotation,
cutoff.pval = NULL,
cutoff.fc = NULL)
traceback()
View(FoldChange_GSEA)
res <- FoldChange_GSEA(vst,pheno= Meta$Sample.pheno,
subselection = Samples120,
Gpe1 = "stroma", Gpe2 = "epithelium",
phenoGpe = "Compartment",
annot = Meta$geneAnnotation,
cutoff.pval = NULL,
cutoff.fc = NULL)
res
View(res)
summary(subset(res, c(padj< 0.01 & tvlaue > 0) ))
res <- as.data.frame(results(Meta$dds))
res
res <- subset(res,subset = c(padj< 0.01 & log2FoldChange > 0) ) ### 4859 genes   "(t-statistic > 0 and FDR < 0.1, respectively)." DESeq not used for Log2FC.
res <- subset(res,subset = c(padj< 0.01 & stat > 0) ) ### 2481 genes   "(t-statistic > 0 and FDR < 0.1, respectively)." DESeq not used for Log2FC becaus no t-stat.
Samples <- subset( Meta$Sample.pheno, subset = c(TissueSampling=="LCM" ))
Samples
Samples <- subset( Meta$Sample.pheno, subset = c(TissueSampling=="LCM" ))$Samples
Samples
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples],
colData = Meta$Sample.pheno[Samples,],
design = ~ Compartment)
GeneOut <-  unlist(subset( Meta$geneAnnotation, subset = c(chr=="chrX" |chr=="chrY"))$GeneSymbol)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut),]
Meta$dds <-  Meta$dds[rowSums(counts(Meta$dds) >= 5) >= (ncol(assay(Meta$dd))/2),] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds <- DESeq(Meta$dds)
res <- as.data.frame(results(Meta$dds))
res <- subset(res,subset = c(padj< 0.01 & stat > 0) ) ### 2481 genes   "(t-statistic > 0 and FDR < 0.1, respectively)."
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples],
colData = Meta$Sample.pheno[Samples,],
design = ~ Compartment)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut),]
Meta$dds <-  Meta$dds[rowSums(counts(Meta$dds) >= 5),] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds
Meta$dds <- DESeq(Meta$dds)
res <- as.data.frame(results(Meta$dds))
res <- subset(res,subset = c(padj< 0.01 & stat > 0) ) ### 2481 genes   "(t-statistic > 0 and FDR < 0.1, respectively)."
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples120],
colData = Meta$Sample.pheno[Samples120,],
design = ~ Compartment)
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples120],
colData = Meta$Sample.pheno[Samples120,],
design = ~ Compartment)
Meta$dds
GeneOut <-  unlist(subset( Meta$geneAnnotation, subset = c(chr=="chrX" |chr=="chrY"))$GeneSymbol)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut),]
Meta$dds
Meta$dds <-  Meta$dds[rowSums(counts(Meta$dds) >= 5),] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds
Meta$dds <- DESeq(Meta$dds)
res <- as.data.frame(results(Meta$dds))
res <- subset(res,subset = c(padj< 0.01 & stat > 0) ) ### 2481 genes   "(t-statistic > 0 and FDR < 0.1, respectively)."
rowSums(counts(Meta$dds)
)
rowSums(counts(Meta$dds)) >= 5
(rowSums(counts(Meta$dds)) >= 5) > 60
summary((rowSums(counts(Meta$dds)) >= 5) > 60)
summary((rowSums(counts(Meta$dds) >= 5) > 60))
Meta$dds
Meta$dds <-  Meta$dds[(rowSums(counts(Meta$dds)) >= 5) > 60,] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds <- DESeq(Meta$dds)
res <- as.data.frame(results(Meta$dds))
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples120],
colData = Meta$Sample.pheno[Samples120,],
design = ~ Compartment)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut),]
Meta$dds <-  Meta$dds[(rowSums(counts(Meta$dds)) >= 5) > 60,] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds <- DESeq(Meta$dds)
res <- as.data.frame(results(Meta$dds))
res <- subset(res,subset = c(padj< 0.01 & stat > 0) ) ### 2481 genes   "(t-statistic > 0 and FDR < 0.1, respectively)."
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples120],
colData = Meta$Sample.pheno[Samples120,],
design = ~ Compartment)
GeneOut <-  unlist(subset( Meta$geneAnnotation, subset = c(chr=="chrX" |chr=="chrY"))$GeneSymbol)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut),]
Meta$dds
Meta$dds <-  Meta$dds[(rowSums(counts(Meta$dds)) >= 5) > 60,] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples120],
colData = Meta$Sample.pheno[Samples120,],
design = ~ Compartment)
GeneOut <-  unlist(subset( Meta$geneAnnotation, subset = c(chr=="chrX" |chr=="chrY"))$GeneSymbol)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut),]
Meta$dds <-  Meta$dds[rowSums(counts(Meta$dds) >= 5) > 60,] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds
summary(rowSums(counts(Meta$dds) >= 5) > 60)
Meta$dds <- DESeq(Meta$dds)
res <- as.data.frame(results(Meta$dds))
res <- subset(res,subset = c(padj< 0.01 & stat > 0) ) ### 2481 genes   "(t-statistic > 0 and FDR < 0.1, respectively)."
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,],
colData = Meta$Sample.pheno[,],
design = ~ Compartment)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut),]
Meta$dds <-  Meta$dds[rowSums(counts(Meta$dds) > 5) > 60,] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds
Meta$dds <- DESeq(Meta$dds)
res <- as.data.frame(results(Meta$dds, contrast = contrast=c("Compartment","stroma","epithelium")))
res <- as.data.frame(results(Meta$dds, contrast=c("Compartment","stroma","epithelium")))
res <- subset(res,subset = c(padj< 0.01 & stat > 0) ) ### 2481 genes   "(t-statistic > 0 and FDR < 0.1, respectively)."
Meta$dds <- DESeq(Meta$dds)!
res <- as.data.frame(results(Meta$dds[,Samples120], contrast=c("Compartment","stroma","epithelium")))
res <- (results(Meta$dds[,Samples120], contrast=c("Compartment","stroma","epithelium"))
)
sizeFactors(Meta$dds)
SF <- sizeFactors(Meta$dds)
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples120],
colData = Meta$Sample.pheno[,Samples120],
design = ~ Compartment)
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,Samples120],
colData = Meta$Sample.pheno[Samples120,],
design = ~ Compartment)
GeneOut <-  unlist(subset( Meta$geneAnnotation, subset = c(chr=="chrX" |chr=="chrY"))$GeneSymbol)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut),]
Meta$dds <-  Meta$dds[rowSums(counts(Meta$dds) > 5) > 60,] # after filtering out genes with fewer than 5 reads in 50%
SF[colnames(Meta$dds)]
sizeFactors(Meta$dds) <-SF[colnames(Meta$dds)]
Meta$dds <- DESeq(Meta$dds)!
res <- as.data.frame(results(Meta$dds[,Samples120], contrast=c("Compartment","stroma","epithelium")))
Meta$dds <- DESeq(Meta$dds)!
res <- results(Meta$dds[,Samples120], contrast=c("Compartment","stroma","epithelium"))
Meta$dds <- DESeq(Meta$dds)!
res <- results(Meta$dds[,Samples120], contrast=c("Compartment","stroma","epithelium"))
Meta$dds <- DESeq(Meta$dds)
res <- results(Meta$dds[,Samples120], contrast=c("Compartment","stroma","epithelium"))
res <- subset(res,subset = c(padj< 0.01 & stat > 0) ) ### 2481 genes si subset 120 échantillons . 3884 si non subset et contrast   "(t-statistic > 0 and FDR < 0.1, respectively)."
res <- as.data.frame(results(Meta$dds[,Samples120], contrast=c("Compartment","stroma","epithelium")))
res <- subset(res,subset = c(padj< 0.01 & stat > 0) ) ### 2481 genes si subset 120 échantillons . 3884 si non subset et contrast   "(t-statistic > 0 and FDR < 0.1, respectively)."
library(PublicDataNorm)
library(PublicDataNorm)
library(stringr)
library(DESeq2)
setwd("D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/Script/Maurer")
project <- "Maurer"
list.files.path <- DirCheck(project)
list.files.path # 6 directory has been created
for (i in list.files.path) {
message(paste(i, "------------dir exsist--------------",dir.exists(i)))
}
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
local = T,path = list.files.path$`Raw genomic`, name.local.file = "MaurerRaw")
Meta[["MaurerRaw.matrix"]] <- Meta[["MaurerRaw.matrix"]][,-1]  # First colonne, geneSymbols drop off.
Meta <- AddClinic(Metadata = Meta, path = list.files.path$`Raw clinic`, name.local.file = "RawMaurer.clinic", merge = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample Pheno", list.files.path = list.files.path )
Meta <- CleaningClinic(Metadata = Meta, type = "Patients' clinical data", list.files.path = list.files.path )
View(Meta)
CheckMeta(Meta)
Meta <- AddExpressionMatrix(Metadata = Meta, local = T,query = NULL, name.local.file = paste("Normalized",project,"matrix", sep = "." ),
path = list.files.path$Processed)
Meta <- AddgeneAnnot(Meta = Meta , gtf.file.dir = "~/R/gtf" , gtf.files = "gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
GeneOut <-  unlist(subset( Meta$geneAnnotation, subset = c(chr=="chrX" |chr=="chrY"))$GeneSymbol)
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,],
colData = Meta$Sample.pheno[,],
design = ~ Compartment)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut),]
Meta$dds <-  Meta$dds[rowSums(counts(Meta$dds) > 5) > 60,] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds <- DESeq(Meta$dds)
vst <-  vst(Meta$dds, blind=FALSE) #Raw counts from LCM RNA-Seq were normalized using the variance stabilizing transformation (VST)"
vst <-assay(vst)
Meta$Maurer.Normalized.Matrix <- as.data.frame(vst)
CheckMeta(Meta)
list.files.path
names(list.files.path)
is.list(list.files.path)
View(Meta)
i = "geneAnnotation"
str_detect(toupper(i), "ANNOT")
View(Meta)
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
local = T,path = list.files.path$`Raw genomic`, name.local.file = "MaurerRaw")
Meta[["MaurerRaw.matrix"]] <- Meta[["MaurerRaw.matrix"]][,-1]  # First colonne, geneSymbols drop off.
Meta <- AddClinic(Metadata = Meta, path = list.files.path$`Raw clinic`, name.local.file = "MaurerRaw.clinic", merge = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample Pheno", list.files.path = list.files.path )
Meta <- CleaningClinic(Metadata = Meta, type = "Patients' clinical data", list.files.path = list.files.path )
Meta$MaurerNormalized.Matrix <- as.data.frame(vst)
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
name <- names(MetaData)
for (i in name) {
if (!tr_detect(toupper(i), "ANNOT")) {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]])
if(str_detect(toupper(i), "RAW.MATRIX")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$`Raw genomic`,i,".csv"))}
if(str_detect(toupper(i), "RAW.CLINIC")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$`Raw clinic`,i,".csv"))}
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$Processed,i,".csv"))}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$Processed,i,".csv"))}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$Processed,i,".csv"))}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$References,i,".csv"))}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]])
if(str_detect(toupper(i), "RAW.MATRIX")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$`Raw genomic`,i,".csv"))}
if(str_detect(toupper(i), "RAW.CLINIC")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$`Raw clinic`,i,".csv"))}
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$Processed,i,".csv"))}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$Processed,i,".csv"))}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$Processed,i,".csv"))}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$References,i,".csv"))}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
list.files.path$`Raw genomic`
str_detect(toupper(i), "GENEANNOTATION")
str_detect(toupper(i), "ANNOT")
View(Meta)
Meta <- AddgeneAnnot(Meta = Meta , gtf.file.dir = "~/R/gtf" , gtf.files = "gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]])
if(str_detect(toupper(i), "RAW.MATRIX")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$`Raw genomic`,"/",i,".csv"))}
if(str_detect(toupper(i), "RAW.CLINIC")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$`Raw clinic`,"/",i,".csv"))}
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$Processed,"/",i,".csv"))}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$Processed,"/",i,".csv"))}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) {  write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$Processed,"/",i,".csv"))}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
#' ExportCSV Export MetaData inside object into ".csv" files
#'
#' @param MetaData
#'
#' @return ".csv" files into working directory
#' @export
#' @import utils
#' @examples "non"
ExportCSV <- function (MetaData, list.files.path){
if(is.null(MetaData)){stop("Need a MetaData List file")}
if(!is.list(MetaData)){stop("Need a MetaData List file")}
if(is.null(list.files.path)){stop("Need a list file path for saving data")}
if(!is.list(list.files.path)){stop(paste("list.files.path must be a list of file path whith Script, Raw genomic, Raw clinic, Processed and References directories in Parent Directory." ))}
name <- names(MetaData)
for (i in name) {
if (!str_detect(toupper(i), "ANNOT")) {
if(str_detect(toupper(i), "RAW.MATRIX")) {   z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$`Raw genomic`,"/",i,".csv"))}
if(str_detect(toupper(i), "RAW.CLINIC")) {  write.csv(z, sep = ",",row.names = T ,file = paste0(list.files.path$`Raw clinic`,"/",i,".csv"))}
if(str_detect(toupper(i), "SAMPLE.PHENO")) {  write.csv(z, sep = ",",row.names = T ,file = paste0(list.files.path$Processed,"/",i,".csv"))}
if(str_detect(toupper(i), "PATIENT.CLINIC")) {  write.csv(z, sep = ",",row.names = T ,file = paste0(list.files.path$Processed,"/",i,".csv"))}
if(str_detect(toupper(i), "NORMALIZED.MATRIX")) { z <- cbind("GeneSymbol" = rownames(MetaData[[i]]), MetaData[[i]])
write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$Processed,"/",i,".csv"))}
} else {
z <- cbind("rownames" = rownames(MetaData[[i]]), MetaData[[i]][,colnames(MetaData[[i]])!="attributes"])
if (str_detect(toupper(i), "GENEANNOTATION")){write.csv(z, sep = ",",row.names = F ,file = paste0(list.files.path$References,"/",i,".csv"))}
}
}
}
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
ncol(Meta$dds)
Meta$dds
View(Meta)
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,],
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,],
colData = Meta$Sample.pheno[,],design = ~Compartment)
Meta$dds <- DESeqDataSetFromMatrix(countData = Meta$MaurerRaw.matrix[,],
colData = Meta$Sample.pheno[,],design = ~Compartment)
Meta$dds <-   Meta$dds[setdiff(rownames(Meta$dds), GeneOut),]
Meta$dds
Meta$dds <-  Meta$dds[rowSums(counts(Meta$dds) > 5) > (ncol(Meta$dds)/2),] # after filtering out genes with fewer than 5 reads in 50%
Meta$dds
Meta$dds <- DESeq(Meta$dds)
vst <-  vst(Meta$dds, blind=FALSE) #Raw counts from LCM RNA-Seq were normalized using the variance stabilizing transformation (VST)"
vst <-assay(vst)
Meta$MaurerNormalized.Matrix <- as.data.frame(vst)
ExportCSV(MetaData = Meta, list.files.path = list.files.path )
rowSums(counts(Meta$dds) > 5)
rowSums(counts(Meta$dds)
)
(ncol(Meta$dds)/2)
rowSums(counts(Meta$dds) > 5) > (ncol(Meta$dds)/2)
summary(rowSums(counts(Meta$dds) > 5) > (ncol(Meta$dds)/2))
library(PublicDataNorm)
library(stringr)
list.files.path <- DirCheck(project)
devoff()
dev.off()
write.table(t(as.data.frame(ltest)),append = T, file = zz,col.names = F,  sep = " : ", quote = F)+
closeAllConnections()
write.table(t(as.data.frame(ltest)),append = T, file = zz,col.names = F,  sep = " : ", quote = F)+
closeAllConnections()
closeAllConnections()
list.files.path
rm(list.files.path)
