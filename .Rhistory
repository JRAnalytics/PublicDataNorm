Files = c(FilesmetaGZIP$Files, Filesmeta$Files)
Samples = unlist(lapply(str_split(Files,"-"),"[[",1))
Samples
splitFiles
Files
str_split(Files,"-")
splitFiles
Files
splitFiles[[i]][1]
splitFiles =   str_split(Files,"-")
i=1
splitFiles[[i]][1]
Samples[i]
Files = c(FilesmetaGZIP$Files, Filesmeta$Files)
splitFiles =   str_split(Files,"-")
Files = unlist(lapply(splitFiles, function(x) paste(x[1:2], collapse = "-")))
Files
for (i in Files) {dir.create(file.path(Rawpath(Metadata),i))}
for (i in Files ) {
path2 = file.path(Rawpath(Metadata),i)
for (j in list.files(path2)){
if(str_detect(j,"barcode")){file.rename(file.path(path2,j),file.path(path2,"barcodes.tsv.gz") ) }
if(str_detect(j,"genes")){file.rename(file.path(path2,j),file.path(path2,"features.tsv.gz") ) }
if(str_detect(j,"mtx")){file.rename(file.path(path2,j),file.path(path2,"matrix.mtx.gz") ) }
}}
for (i in Files ) {
path2 = file.path(Rawpath(Metadata),i)
for (j in list.files(path2)){
if(str_detect(j,"barcode")){file.rename(file.path(path2,j),file.path(path2,"barcodes.tsv.gz") ) }
if(str_detect(j,"features")){file.rename(file.path(path2,j),file.path(path2,"features.tsv.gz") ) }
if(str_detect(j,"mtx")){file.rename(file.path(path2,j),file.path(path2,"matrix.mtx.gz") ) }
}}
library(synapser)
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
library(synapser)
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
remotes::install_github('rstudio/reticulate@v1.28')
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"))
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"),dependencies = T)
install.packages("reticulate")
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"),dependencies = T)
install.packages("synapser", repos = c("http://ran.synapse.org", "http://cran.fhcrc.org"),dependencies = T)
install.packages("PythonEmbedInR", repos=c("http://cran.fhcrc.org", "http://ran.synapse.org"))
install.packages("synapser")
install.packages("synapser", repos=c("http://staging-ran.synapse.org"))
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(Matrix)
project <- "HTAN"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Filesmeta <- read.delim(file.path(Rawpath(Metadata),"Filesmeta.tsv"))
# Filesmeta$HTAN.Participant.ID = paste0("HTA12_",unlist(lapply(stringr::str_split(Filesmeta$Biospecimen, "_"),"[[",2)))
Filesmeta$Files = tolower(unlist(lapply(stringr::str_split(Filesmeta$Filename, "/"),"[[",2)))
FilesmetaGZIP <- read.delim(file.path(Rawpath(Metadata),"FilesmetaGZIP.tsv"))
FilesmetaGZIP$Files = tolower(unlist(lapply(stringr::str_split(FilesmetaGZIP$Filename, "/"),"[[",2)))
SamplesAnnot <- read.delim(file.path(Rawpath(Metadata),"SamplesAnnot.tsv"))
rownames(SamplesAnnot) = SamplesAnnot$HTAN.Biospecimen.ID
PublishedSamples <- read.delim(file.path(Rawpath(Metadata),"PublihedSampleAnnotTable1.txt"))
rownames(PublishedSamples) = PublishedSamples$Sample
PublishedClinic <- read.delim(file.path(Rawpath(Metadata),"PublishedClinicTable1.csv"),sep = ';')
rownames(PublishedClinic) = PublishedClinic$Patient_ID
PublishedClinic$Patient_ID
summary(PublishedSamples$Sample %in% PublishedClinic$Patient_ID)
PublishedSamples$Sample
Files = c(FilesmetaGZIP$Files, Filesmeta$Files)
Samples = unlist(lapply(str_split(Files,"-"),"[[",1))
Files = unlist(lapply(splitFiles, function(x) paste(x[1:2], collapse = "-")))
splitFiles =   str_split(Files,"-")
Files
str_detect(list.files(Rawpath(Metadata)),"ht185p1-s1h2")
Files
Files = unlist(lapply(splitFiles, function(x) paste(x[1:2], collapse = "-")))
Files
library(Seurat)
data <- Read10X(data.dir = file.path(Rawpath(Metadata),Files[1]))
colnames(data)= paste0(Files[1],"_",colnames(data))
View(data)
data[["Gene Expression"]]
data[["Peaks"]]
class(data)
if(inherits(data, "list")){data = data$`Gene Expression`}
colnames(data)= paste0(Files[1],"_",colnames(data))
fused = CreateSeuratObject(counts = data, project = Files[1])
for (i in Files[-1]) {path3 = file.path(Rawpath(Metadata),i)
if(!str_detect(i,"ADJ5|ADJ4")){ #adj5 & 4 are corrupted!!! no data in .mtx (size in kb and not in Mb for instance)
data <- Read10X(data.dir = file.path(Rawpath(Metadata),i))
if(inherits(data, "list")){data = data$`Gene Expression`}
data <- CreateSeuratObject(counts = data, project = i)
colnames(data)= paste0(i,"_",colnames(data))
fused <- merge(fused, y = data, add.cell.ids = NULL)}
}
length(Files)
length(unique(Files))
rm(fused)
rm(data)
gc()
str_detect(list.files(Rawpath(Metadata)),"ht185p1-s1h2")
list.files(Rawpath(Metadata))
str_detect(list.files(Rawpath(Metadata)),"ht185p1")
Samples
lapply(list.files(Rawpath(Metadata),function()x str_detect(samples,x)))
lapply(list.files(Rawpath(Metadata),function(x) str_detect(samples,x)))
lapply(list.files(Rawpath(Metadata)),function(x) str_detect(samples,x))
lapply(list.files(Rawpath(Metadata)),function(x) str_detect(Samples,x))
Samples
lapply(list.files(Rawpath(Metadata)),function(x) str_detect(unique(Samples),x))
lapply(list.files(Rawpath(Metadata)),function(x) str_detect(x, unique(Samples)))
lapply(list.files(Rawpath(Metadata)),function(x) summary(str_detect(x, unique(Samples))))
which(lapply(list.files(Rawpath(Metadata)),function(x) summary(str_detect(x, unique(Samples))))==T)
unique(Samples)[1]
str_detect(list.files(Rawpath(Metadata)), unique(Samples)[1])
str_detect(list.files(Rawpath(Metadata)), unique(Samples))
lapply(list.files(Rawpath(Metadata)),function(x) which(str_detect(x, unique(Samples))==T))
unlist(lapply(list.files(Rawpath(Metadata)),function(x) which(str_detect(x, unique(Samples))==T)))
unique(unlist(lapply(list.files(Rawpath(Metadata)),function(x) which(str_detect(x, unique(Samples))==T))))
Samples[unique(unlist(lapply(list.files(Rawpath(Metadata)),function(x) which(str_detect(x, unique(Samples))==T))))]
unique(Samples)[unique(unlist(lapply(list.files(Rawpath(Metadata)),function(x) which(str_detect(x, unique(Samples))==T))))]
View(PublishedSamples)
PublishedSamples$Sample
PublishedSamples$Case
Samples
unique(Samples) %in% PublishedSamples$Case
unique(Samples) %in% tolower(PublishedSamples$Case)
starget = unique(Samples)[unique(unlist(lapply(list.files(Rawpath(Metadata)),function(x) which(str_detect(x, unique(Samples))==T))))]
starget %in% tolower(PublishedSamples$Case)
starget[starget %in% tolower(PublishedSamples$Case)]
tolower(PublishedSamples$Case)[!tolower(PublishedSamples$Case) %in%starget]
View(PublishedSamples)
Files
splitFiles
Files = unlist(lapply(splitFiles, function(x) paste(x[1:2], collapse = "-")))
Files
Files["ht055p-s1pag" ]
Files[Files=="ht055p-s1pag" ]
Files[Files=="ht055p-s1pag" ] = "ht055p1-s1pag"
Files[str_detect(Files,"ht056p") ]
Files[str_detect(Files,"ht056p") ] = gsub("ht056p","ht056p1", Files[str_detect(Files,"ht056p") ])
Samples = unlist(lapply(str_split(Files,"-"),"[[",1))
Samples
str_detect(list.files(Rawpath(Metadata)), unique(Samples)[1])
starget = unique(Samples)[unique(unlist(lapply(list.files(Rawpath(Metadata)),function(x) which(str_detect(x, unique(Samples))==T))))]
starget[starget %in% tolower(PublishedSamples$Case)]
tolower(PublishedSamples$Case)[!tolower(PublishedSamples$Case) %in%starget]
unique(tolower(PublishedSamples$Case))
Files
ftarget = Files[str_detect(starget,Files)]
unique(Files)[unique(unlist(lapply(list.files(Rawpath(Metadata)),function(x) which(str_detect(x, unique(starget))==T))))]
unique(list.files(Rawpath(Metadata))[unique(unlist(lapply(list.files(Rawpath(Metadata)),function(x) which(str_detect(x, unique(starget))==T))))]
Files
unique(Files)[unique(unlist(lapply(Files,function(x) which(str_detect(x, unique(starget))==T))))]
str_detect(list.files(Rawpath(Metadata)), unique(Samples)[1])
starget
starget[starget %in% tolower(PublishedSamples$Case)]
tolower(PublishedSamples$Case)[!tolower(PublishedSamples$Case) %in%starget]
starget = starget[starget %in% tolower(PublishedSamples$Case)]
starget
unique(list.files(Rawpath(Metadata))[unique(unlist(lapply(list.files(Rawpath(Metadata),function(x) which(str_detect(x, unique(starget))==T))))]
unique(list.files(Rawpath(Metadata)))[unique(unlist(lapply(list.files(Rawpath(Metadata)),function(x) which(str_detect(x, unique(starget))==T))))]
unique(list.files(Rawpath(Metadata)))
unique(starget)[unique(unlist(lapply(unique(starget)),function(x) which(str_detect(x, list.files(Rawpath(Metadata)))==T))))]
unique(starget)[unlist(lapply(unique(starget),function(x) which(str_detect(x, list.files(Rawpath(Metadata)))==T)))]
unique(starget)[unlist(lapply(unique(starget),function(x) which(str_detect( list.files(Rawpath(Metadata)), x)==T)))]
str_detect(list.files(Rawpath(Metadata)),unique(starget)[1])
unlist(lapply(unique(starget),function(x) which(str_detect( list.files(Rawpath(Metadata)), x)==T)))
lapply(unique(starget),function(x) str_detect( list.files(Rawpath(Metadata)), x))
lapply(unique(starget),function(x) summary(str_detect( list.files(Rawpath(Metadata)), x)))
lapply(unique(starget),function(x) which(str_detect( list.files(Rawpath(Metadata)), x)==T))
unlist(lapply(unique(starget),function(x) which(str_detect( list.files(Rawpath(Metadata)), x)==T)))
list.files(Rawpath(Metadata)[unlist(lapply(unique(starget),function(x) which(str_detect( list.files(Rawpath(Metadata)), x)==T)))]
list.files(Rawpath(Metadata))[unlist(lapply(unique(starget),function(x) which(str_detect( list.files(Rawpath(Metadata)), x)==T)))]
ftarget = list.files(Rawpath(Metadata))[unlist(lapply(unique(starget),function(x) which(str_detect( list.files(Rawpath(Metadata)), x)==T)))]
data <- Read10X(data.dir = file.path(Rawpath(Metadata),ftarget[1]))
if(inherits(data, "list")){data = data$`Gene Expression`}
colnames(data)= paste0(ftarget[1],"_",colnames(data))
fused = CreateSeuratObject(counts = data, project = ftarget[1])
View(SamplesAnnot)
gc()
tot = length(ftarget)
follow = 0
for (i in ftarget[-1]) {
follow = follow+1
message(paste("adding Samples", ftarget,":",follow,"/",tot))
data <- Read10X(data.dir = file.path(Rawpath(Metadata),i))
if(inherits(data, "list")){data = data$`Gene Expression`}
data <- CreateSeuratObject(counts = data, project = i)
colnames(data)= paste0(i,"_",colnames(data))
fused <- merge(fused, y = data, add.cell.ids = NULL)
gc()
}
tot = length(ftarget)
follow = 0
for (i in ftarget[-1]) {
follow = follow+1
message(paste("adding Samples", i,":",follow,"/",tot))
data <- Read10X(data.dir = file.path(Rawpath(Metadata),i))
if(inherits(data, "list")){data = data$`Gene Expression`}
data <- CreateSeuratObject(counts = data, project = i)
colnames(data)= paste0(i,"_",colnames(data))
fused <- merge(fused, y = data, add.cell.ids = NULL)
gc()
}
ftarget[-1:-3]
ftarget[-1:-4]
follow = 3
for (i in ftarget[-1:-4]) {
follow = follow+1
message(paste("adding Samples", i,":",follow,"/",tot))
data <- Read10X(data.dir = file.path(Rawpath(Metadata),i))
if(inherits(data, "list")){data = data$`Gene Expression`}
data <- CreateSeuratObject(counts = data, project = i)
colnames(data)= paste0(i,"_",colnames(data))
fused <- merge(fused, y = data, add.cell.ids = NULL)
gc()
}
follow = 3
for (i in ftarget[-1:-4]) {
follow = follow+1
message(paste("adding Samples", i,":",follow,"/",tot))
data <- Read10X(data.dir = file.path(Rawpath(Metadata),i))
if(inherits(data, "list")){data = data$`Gene Expression`}
data <- CreateSeuratObject(counts = data, project = i)
colnames(data)= paste0(i,"_",colnames(data))
fused <- merge(fused, y = data, add.cell.ids = NULL)
gc()
}
gc()
colnames(fused)[1:5]
colnames(fused)[(ncol(fused)-5):ncol(fused)]
unique(sapply(X = strsplit(colnames(fused), split = "_"), FUN = "[", 1))
table(fused$orig.ident)
fused <- JoinLayers(fused)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(GEOquery)
library(Matrix)
project <- "Storrs"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Clinic=getGEO('GSE242230',GSEMatrix=TRUE)[["GSE242230_series_matrix.txt.gz"]]@phenoData@data
View(Clinic)
download.file("https://zenodo.org/records/8301823/files/metadata.txt.gz?download=1",  file.path(Rawpath(Metadata),"metadata.txt.gz"))
download.file("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE212966&format=file",
file.path(Rawpath(Metadata),"GSE242230_RAW.tar")) # By hand Not working in my network
untar(tarfile = file.path(Rawpath(Metadata),"GSE242230_RAW.tar"),
exdir = Rawpath(Metadata), list = F)
untar(tarfile = file.path(Rawpath(Metadata),"GSE242230_RAW.tar"),
exdir = Rawpath(Metadata), list = F)
samplesAnnot = fread(  file.path(Rawpath(Metadata),"metadata.txt.gz"))
samplesAnnot = data.table::fread(  file.path(Rawpath(Metadata),"metadata.txt.gz"))
View(samplesAnnot)
cellsannot = as.data.frame(data.table::fread(  file.path(Rawpath(Metadata),"metadata.txt.gz")))
View(cellsannot)
rm(samplesAnnot)
View(Clinic)
Clinic$PatientsID = unlist(lapply(str_split(Clinic$title, ","), "[[", 1))
rownames(Clinic) = Clinic$PatientsID
View(Clinic)
Clinic$PatientsID %in%cellsannot$sample_id
Clinic$PatientsID %in% unique(cellsannot$sample_id)
summary(Clinic$PatientsID %in% unique(cellsannot$sample_id))
summary(unique(cellsannot$sample_id) %in% Clinic$PatientsID )
rownames(Clinic)
for (i in Clinic$PatientsID ) {dir.create(file.path(Rawpath(Metadata),i))}
for (i in Clinic$PatientsID ) {
path2 = file.path(Rawpath(Metadata),i)
for (j in list.files(path2)){
if(str_detect(j,"barcode")){file.rename(file.path(path2,j),file.path(path2,"barcodes.tsv.gz") ) }
if(str_detect(j,"genes")){file.rename(file.path(path2,j),file.path(path2,"features.tsv.gz") ) }
if(str_detect(j,"mtx")){file.rename(file.path(path2,j),file.path(path2,"matrix.mtx.gz") ) }
}}
Clinic$PatientsID
list.files(path2)
for (i in Clinic$PatientsID ) {
path2 = file.path(Rawpath(Metadata),i)
for (j in list.files(path2)){
if(str_detect(j,"barcode")){file.rename(file.path(path2,j),file.path(path2,"barcodes.tsv.gz") ) }
if(str_detect(j,"genes")){file.rename(file.path(path2,j),file.path(path2,"features.tsv.gz") ) }
if(str_detect(j,"mtx")){file.rename(file.path(path2,j),file.path(path2,"matrix.mtx.gz") ) }
}}
for (i in Clinic$PatientsID ) {
path2 = file.path(Rawpath(Metadata),i)
for (j in list.files(path2)){
if(str_detect(j,"barcode")){file.rename(file.path(path2,j),file.path(path2,"barcodes.tsv.gz") ) }
if(str_detect(j,"features")){file.rename(file.path(path2,j),file.path(path2,"features.tsv.gz") ) }
if(str_detect(j,"mtx")){file.rename(file.path(path2,j),file.path(path2,"matrix.mtx.gz") ) }
}}
gc()
data <- Read10X(data.dir = file.path(Rawpath(Metadata),Clinic$PatientsID[1]))
colnames(data)= paste0(Clinic$PatientsID[1],"_",colnames(data))
colnames(data)
file.path(Rawpath(Metadata),Clinic$PatientsID[1])
data <- Read10X(data.dir = file.path(Rawpath(Metadata),Clinic$PatientsID[1]))
library(Seurat)
data <- Read10X(data.dir = file.path(Rawpath(Metadata),Clinic$PatientsID[1]))
colnames(data)
colnames(data)= paste0(Clinic$PatientsID[1],"_",colnames(data))
fused = CreateSeuratObject(counts = data, project = Clinic$PatientsID[1])
Clinic$PatientsID[-1]
for (i in Clinic$PatientsID[-1]) {
data <- Read10X(data.dir = file.path(Rawpath(Metadata),i))
data <- CreateSeuratObject(counts = data, project = i)
colnames(data)= paste0(i,"_",colnames(data))
fused <- merge(fused, y = data, add.cell.ids = NULL)
}
gc()
fused <- JoinLayers(fused)
colnames(fused)[1:5]
View(cellsannot)
colnames(fused)[(ncol(fused)-5):ncol(fused)]
unique(sapply(X = strsplit(colnames(fused), split = "_"), FUN = "[", 1))
summary(colnames(fused) %in% unique(cellsannot$cell_id))
cells = cellsannot$cell_id[cellsannot$cell_id %in% colnames(fused)]
unique(sapply(X = strsplit(cells, split = "_"), FUN = "[", 1))
summary(unique(sapply(X = strsplit(cells, split = "_"), FUN = "[", 1) ) %in% unique(cellsannot$sample_id))
count = fused@assays$RNA$counts[,cells]
View(cellsannot)
View(Clinic)
View(cellsannot)
rownames(cellsannot) = cellsannot$cell_id
View(cellsannot)
head(count)[,1:5]
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = Clinic,
Export = F,
setSamplesID.Column = "SampleID",
setPatientID.Column = "PatientID",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixSC(
ExpressionMatrix = count,
Cell.file = cellsannot[colnames(count),],
setID.cellAnnotColumn = "cell_id",
Genes.file = NULL,
name = "rawcount")
View(Clinic)
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = Clinic,
Export = F,
setSamplesID.Column = "PatientsID",
setPatientID.Column = "PatientsID",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixSC(
ExpressionMatrix = count,
Cell.file = cellsannot[colnames(count),],
setID.cellAnnotColumn = "cell_id",
Genes.file = NULL,
name = "rawcount")
View(Metadata)
Metadata[["CellsAnnot"]]
CheckMeta(Metadata)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Clinic)
PL
colnames(Clinic)
"Stage"="ajcc stage:ch1" )
PL = addSeveralKeysToLexic(lexic = PL,vector = c("OSevent"="vital status_(1_dead,_0_alive):ch1",
"OSdelay"="survival time_(days):ch1",
"Stage"="ajcc stage:ch1" ))
colnames(Metadata$CellsAnnot)
CL
colnames(Metadata$CellsAnnot)
View(cellsannot)
View(cellsannot[cells,])
summary(as.factor(cellsannot[cells,]$cell_type))
summary(as.factor(cellsannot[cells,]$cell_type_specific))
unique(as.factor(cellsannot[cells,]$cell_type_specific))
cellsannot[which(cellsannot$cell_type==""),]
cellsannot[which(cellsannot$cell_type==""),]$cell_type
cellsannot[which(cellsannot$cell_type==""),]$cell_type=NA
cellsannot[which(cellsannot$cell_type_specific==""),]$cell_type_specific=NA
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = Clinic,
Export = F,
setSamplesID.Column = "PatientsID",
setPatientID.Column = "PatientsID",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixSC(
ExpressionMatrix = count,
Cell.file = cellsannot[colnames(count),],
setID.cellAnnotColumn = "cell_id",
Genes.file = NULL,
name = "rawcount")
unique(as.factor(cellsannot[cells,]$cell_type_specific)
)
summary(as.factor(cellsannot[cells,]$cell_type_specific))
SL = addSeveralKeysToLexic(lexic = SL,vector = c("PatientsID"="PatientID",
"SamplesID"="CellsID",
"SamplesOrigin"="tissue",
"SamplePathologicalState"="tissue",
"HadTreatment"="Treatment") )
colnames(Metadata$CellsAnnot)
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType"="cell_type_specific" ))
colnames(Clinic)
PL = addSeveralKeysToLexic(lexic = PL,vector = c("OSevent"="vital status_(1_dead,_0_alive):ch1",
"OSdelay"="survival time_(days):ch1",
"Stage"="ajcc stage:ch1" ))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["Patients.Clinic"]]
Metadata[["Cells.Annotation"]]
Metadata[["SamplesAnnot"]]
Metadata[["Patients.Clinic"]]
gc()
Metadata = ExportTSV(Metadata)
gc()
attributes(Metadata)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(GEOquery)
library(Matrix)
project <- "Storrs"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Clinic=getGEO('GSE242230',GSEMatrix=TRUE)[["GSE242230_series_matrix.txt.gz"]]@phenoData@data
Clinic$PatientsID = unlist(lapply(str_split(Clinic$title, ","), "[[", 1))
rownames(Clinic) = Clinic$PatientsID
cellsannot = as.data.frame(data.table::fread(  file.path(Rawpath(Metadata),"metadata.txt.gz")))
rownames(cellsannot) = cellsannot$cell_id
cellsannot[which(cellsannot$cell_type==""),]$cell_type=NA
cellsannot[which(cellsannot$cell_type_specific==""),]$cell_type_specific=NA
summary(Clinic$PatientsID %in% unique(cellsannot$sample_id))
summary(unique(cellsannot$sample_id) %in% Clinic$PatientsID )
library(Seurat)
data <- Read10X(data.dir = file.path(Rawpath(Metadata),Clinic$PatientsID[1]))
colnames(data)= paste0(Clinic$PatientsID[1],"_",colnames(data))
fused = CreateSeuratObject(counts = data, project = Clinic$PatientsID[1])
for (i in Clinic$PatientsID[-1]) {
data <- Read10X(data.dir = file.path(Rawpath(Metadata),i))
data <- CreateSeuratObject(counts = data, project = i)
colnames(data)= paste0(i,"_",colnames(data))
fused <- merge(fused, y = data, add.cell.ids = NULL)
}
fused <- JoinLayers(fused)
rm(data)
cells = cellsannot$cell_id[cellsannot$cell_id %in% colnames(fused)]
count = fused@assays$RNA$counts[,cells]
rm(fused)
gc()
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = Clinic,
Export = F,
setSamplesID.Column = "PatientsID",
setPatientID.Column = "PatientsID",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixSC(
ExpressionMatrix = count,
Cell.file = cellsannot[colnames(count),],
setID.cellAnnotColumn = "cell_id",
Genes.file = NULL,
name = "rawcount")
Metadata$Clinic
Metadata$Clinic$Disease   = "Pancreatic ductal adenocarcinoma"
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Clinic)
SL = addSeveralKeysToLexic(lexic = SL,vector = c("PatientsID"="PatientID",
"SamplesID"="CellsID",
"SamplesOrigin"="tissue",
"SamplePathologicalState"="tissue",
"HadTreatment"="Treatment") )
colnames(Metadata$CellsAnnot)
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType"="cell_type_specific" ))
colnames(Clinic)
PL = addSeveralKeysToLexic(lexic = PL,vector = c("OSevent"="vital status_(1_dead,_0_alive):ch1",
"OSdelay"="survival time_(days):ch1",
"Stage"="ajcc stage:ch1" ))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["SamplesAnnot"]]
?system
