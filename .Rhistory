"DFS_Cens" = DFS_Cens,
"AdjXRT" = AdjXRT,
"AdjCTX" = AdjCTX))
Metadata$raw.clinic$Location=NULL
LexicData(list.files.path, replaceLexic = T) # load PatientLexic and SampelsLexic from 02Processes.
project <- "Raghavan"
path <- "E:/DataBase"# Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path) # if all are TRUE ; next step can be done
Cell.annot = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"complete_MetaData_70170cells_scp.csv")))
Cell.annot = Cell.annot[-1,]
Cell.annot = subset(Cell.annot, donor_ID!="PANFR0580") #PAN NET
Cell.annot$NAME = gsub("_","-", Cell.annot$NAME)
counts = as.data.frame(read.csv(file.path(Rawpath(Metadata), "Biopsy_RawDGE_23042cells.csv")))
rownames(counts) = counts$X
counts$X = NULL
count2 = as.data.frame(read.csv(file.path(Rawpath(Metadata), "Biopsy473_RawDGE_1370cells.csv")))
rownames(count2) = count2$X
count2$X = NULL
genes = intersect(rownames(counts),rownames(count2)) ## pas le même nombre de gènes!
fullcount = cbind(counts[genes,], count2[genes,])
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromObject(
object = Cell.annot,
name = "CellsAnnot",
type = "Cells",Export = F,
setSamplesID.Column = "donor_ID",
setPatientID.Column = "donor_ID",
setCellsBarcode.Column ="NAME") %>%
AddClinicFromFile(
ClinicFile = "Data.clinic.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="PatientID",
setSamplesID.Column = "PatientID" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = fullcount,
Cell.file =NULL ,
Genes.file =NULL,
name = "Raw.count.Biopsy",
force.replace = F)
traceback()
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromObject(
object = Cell.annot,
name = "CellsAnnot",
type = "Cells",Export = F,
setSamplesID.Column = "donor_ID",
setPatientID.Column = "donor_ID",
setCellsBarcode.Column ="NAME")
traceback()
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromObject(
object = Cell.annot,
name = "CellsAnnot",
type = "Cells",Export = F,
setSamplesID.Column = "donor_ID",
setPatientID.Column = "donor_ID",
setCellsBarcode.Column ="NAME")
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromObject(
object = Cell.annot,
name = "CellsAnnot",
type = "Cells",Export = F,
setSamplesID.Column = "donor_ID",
setPatientID.Column = "donor_ID",
setCellsBarcode.Column ="NAME") %>%
AddClinicFromFile(
ClinicFile = "Data.clinic.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="PatientID",
setSamplesID.Column = "PatientID" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = fullcount,
Cell.file =NULL ,
Genes.file =NULL,
name = "Raw.count.Biopsy",
force.replace = F)
CheckMeta(Metadata)
head(Metadata[["Raw.count.Biopsy"]][1:5])
summary(Metadata$CellsAnnot$NAME %in% colnames(Metadata$Raw.count.Biopsy))
summary(colnames(Metadata$Raw.count.Biopsy) %in% Metadata$CellsAnnot$NAME )
colnames(Metadata$Raw.count.Biopsy)
Metadata$CellsAnnot$NAME
summary(Metadata$CellsAnnot$NAME %in% colnames(Metadata$Raw.count.Biopsy))
summary(colnames(Metadata$Raw.count.Biopsy) %in% Metadata$CellsAnnot$NAME )
colnames(Metadata$Raw.count.Biopsy)[!colnames(Metadata$Raw.count.Biopsy) %in% Metadata$CellsAnnot$NAME]
#Step 5 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
#Step 5 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
SL = addSeveralKeysToLexic(lexic = SL,vector = c("SamplesID"= "biosample_id",
"SamplePathologicalState" = "Histology",
"SpecimenOrgan" = "Site.of.biopsy",
"Treatment.Before.Biopsy" = "Metastatic.treatments.prior.to.biopsy",
"Treatment.of.primary.disease" = "Treatment.of.primary.disease") )
CL = addSeveralKeysToLexic(lexic = CL,vector = c("Cell_type" = "cluster",
"malignant" = "Malgignant",
"SamplesID"= "biosample_id",
"SamplePathologicalState" = "disease__ontology_label",
"Cell.type" = "Coarse_Cell_Annotations",
"SpecimenOrgan" = "organ__ontology_label",
"PatientSampling" = "sample.type",
"CellsID" = "NAME") )
CL$SpecimenOrgan = c("SpecimenOrgan" ,"organ__ontology_label")
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Sex"="Gender",
"SamplesID" = "donor_ID",
"TreatmentInfo"="treatment:ch1",
"PatientSampling" ="Site.of.biopsy",
"OSevent" ="Patient.status",
"OSdelay" = "Survival.time.from.initial.diagnosis.days") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
PatientLog(Metadata) # If dulicated in  Clean.Calledcolumn : then change the lexic to match your best choice
SampleLog(Metadata)
CellLog(Metadata)
View(Metadata$SamplesAnnot)
Metadata$Raw.count.Biopsy = Metadata$Raw.count.Biopsy[,rownames(Metadata$Cells.Annotation),]
CheckMeta(Metadata)
Metadata$Cells.Annotation$Treatment.at.primary.disease = Metadata$Clinic[Metadata$Cells.Annotation$PatientsID,"Treatment.of.primary.disease"]
Metadata$Cells.Annotation$Treatment.before.biopsy = Metadata$Clinic[Metadata$Cells.Annotation$PatientsID,"Metastatic.treatments.prior.to.biopsy"]
Metadata$Cells.Annotation$Treatment.at.primary.disease = Metadata$Clinic[Metadata$Cells.Annotation$patientsID,"Treatment.of.primary.disease"]
Metadata$Cells.Annotation$Treatment.before.biopsy = Metadata$Clinic[Metadata$Cells.Annotation$patientsID,"Metastatic.treatments.prior.to.biopsy"]
gc()
Metadata = ExportTSV(Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "Seq-Well array" ,
Run.spec = NA,
First.Author = "Raghavan S.",
DOI = "10.1016/j.cell.2021.11.017",
Comment = NA,
User = "JR-Analytics")
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "Lin"
path <- "E:/DataBase"# Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)
cellAnnot = as.data.frame(data.table::fread(file = file.path(Rawpath(Metadata),"Cells.csv")))
cellAnnot$cell_name = gsub("[[:punct:] ]+","-",cellAnnot$cell_name)
rownames(cellAnnot) =cellAnnot$cell_name
str(Charac.to.Num(cellAnnot))
str(cellAnnot)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setSamplesID.Column = "sample",
setPatientID.Column ="patient" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
colnames(Metadata$Raw.count)[1:5]
gc()
CheckMeta(Metadata)
colnames(Metadata$Raw.count)[1:5]
gc()
CheckMeta(Metadata)
head(Metadata$CellsAnnot)
#Step 5 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
CL = addSeveralKeysToLexic(lexic = CL,vector = c("PatientsID" = "sample",
"CellType" = "cell_type"))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Age"="age",
"Sex" = "sex",
"PFSdelay"="PFS_DFS",
"Disease" ="cancer_type",
"OSevent" ="OS",
"PatientSampling" = "site",
"TreatmentInfo" = "site",
"PatientSampling" = "treated_naive",
"pT" = "AJCC_T",
"pN" = "AJCC_N",
"pM" = "AJCC_M",
"Stage" = "AJCC_stage",
"Size" = "size",
"Grade" = "grade") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
CellsLexic = CL,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata$Patients.Clinic$Grade = gsub("W-MD", "Well-Mildly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("M-PD", "Mildly-Poorly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("WD", "Well differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("MD", "Mildly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("PD", "Poorly differenciated",Metadata$Patients.Clinic$Grade )
CheckMeta(Metadata)
gc()
# Step 5 : LocalDatabase implementation
MetaData=ExportTSV(Metadata)
gc()
attributes(Metadata)
AddLocalDatabase(Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x V2 HiSeq4000" ,
Run.spec = "",
First.Author = "Lin W.",
DOI = "10.1186/s13073-020-00776-9",
Comment = NA,
User = "JR-Analytics")
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(GEOquery)
library(Matrix)
require("hdf5r")
project <- "Carpenter"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Metadata = VersionCheck(Metadata, path = path) # Will check if other version exist in path files
library(Seurat)
tumor <- Read10X(data.dir = file.path(Rawpath(Metadata),"tumor_samples"),gene.column = 1,cell.column = 1)
donor = Read10X(data.dir = file.path(Rawpath(Metadata),"donor_samples"),gene.column = 1,cell.column = 1)
tumor = CreateSeuratObject(counts = tumor,"tumor_samples")
donor = CreateSeuratObject(counts = donor,"donor_samples")
fused = merge(x = tumor, y =donor  )
fused[["RNA"]] <- JoinLayers(fused[["RNA"]])
Layers(fused[["RNA"]])
Layers(fused)
View(fused)
Layers(fused[["counts"]])
fused[["counts"]] <- JoinLayers(fused[["counts"]])
fused
View(fused)
count = GetAssayData(object = fused, layer = "counts")
ncol(count)
fused = JoinLayers(fused)
count = GetAssayData(object = fused, layer = "counts")
ncol(count)
fused
?CreateSeuratObject
tumor = CreateSeuratObject(counts = tumor,assay = "tumor_samples")
donor = CreateSeuratObject(counts = donor,assay = "donor_samples")
tumor = CreateSeuratObject(counts = tumor,project =  "tumor_samples")
donor = CreateSeuratObject(counts = donor,project = "donor_samples")
tumor <- Read10X(data.dir = file.path(Rawpath(Metadata),"tumor_samples"),gene.column = 1,cell.column = 1)
donor = Read10X(data.dir = file.path(Rawpath(Metadata),"donor_samples"),gene.column = 1,cell.column = 1)
tumor = CreateSeuratObject(counts = tumor,assay = "tumor_samples")
donor = CreateSeuratObject(counts = donor,assay = "donor_samples")
tumor <- Read10X(data.dir = file.path(Rawpath(Metadata),"tumor_samples"),gene.column = 1,cell.column = 1)
donor = Read10X(data.dir = file.path(Rawpath(Metadata),"donor_samples"),gene.column = 1,cell.column = 1)
tumor = CreateSeuratObject(counts = tumor,assay = "RNA")
donor = CreateSeuratObject(counts = donor,assay = "RNA")
fused = merge(x = tumor, y =donor  )
fused = JoinLayers(fused)
fused
count = GetAssayData(object = fused, layer = "counts")
ncol(count)
#load clinic and metadata
Clinic=getGEO('GSE229413',GSEMatrix=TRUE)[["GSE229413_series_matrix.txt.gz"]]@phenoData@data
Clinic$SamplesID = rownames(Clinic)
publishedClinic = as.data.frame(data.table::fread(  file.path(Rawpath(Metadata),"PublishedClinicCarpenter.csv")))
cellsannot = as.data.frame(data.table::fread(  file.path(Rawpath(Metadata),"donor_samples","metadata.txt")))
cellsannot = rbind(cellsannot, as.data.frame(data.table::fread(  file.path(Rawpath(Metadata),"tumor_samples","metadata.txt"))))
colnames(cellsannot)[1]= 'barcodes'
rownames(cellsannot) = cellsannot$barcodes
unique(Clinic$title)
unique(cellsannot$patient_id)
Clinic$PatientsID=NA
for (i in unique(cellsannot$patient_id)){
pos=  which(grepl(i,unique(Clinic$title)))
if(!is_empty(pos)){
Clinic[pos,]$PatientsID = i}
}
summary(Clinic$PatientsID %in% unique(cellsannot$patient_id))
unique(cellsannot$patient_id)[!unique(cellsannot$patient_id) %in% Clinic$PatientsID]
summary(colnames(fused) %in% cellsannot$barcodes)
summary(cellsannot$barcodes %in% colnames(donor))
colnames(donor)[(ncol(donor)-5):ncol(donor)]
cellsannot = cellsannot[colnames(count),]
View(cellsannot)
View(publishedClinic)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "Peng"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files(Rawpath(Meta))
Meta = CreateDataset(project, path) # if all are TRUE ; next step can be done
Meta =CreateDataset(project, path) %>%
AddClinicFromFile(ClinicFile = "Meta-data.csv",
name = "Raw.clinic",
setSamplesID.Column = "sample",
setPatientID.Column = "sample" ,
type = "Patients" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count")
gc()
rownames(Meta$CellsAnnot) =Meta$CellsAnnot$cell_name
rownames(Meta$CellsAnnot)[1:5]
head(Meta$CellsAnnot)
head(Meta$geneAnnot)
rownames(Meta$Raw.clinic) = paste0(Meta$Raw.clinic[,2],"_") # pour compter n cellules dans les colnames(Count) par partient
attributes(Meta)
CheckMeta(Meta)
#Step 5 : Cleaning clinical data
PL = CreateLexic(Meta,type = "PatientsLexic")
PL
#Step 5 : Cleaning clinical data
PL = CreateLexic(Meta,type = "PatientsLexic")
PL
View(Meta)
colnames(Meta$CellsAnnot)
head(Meta$Raw.clinic)
head(Meta$SamplesAnnot)
CL <- addSeveralKeysToLexic( CL, vector = c("PatientsID"="sample",
"SamplesID"="sample",
"Tumoral.Cells"="malignant",
"Cell.type "="cell_type",
"Seurat.Cluster" = "subclone") )
#Step 5 : Cleaning clinical data
PL = CreateLexic(Meta,type = "PatientsLexic")
SL = CreateLexic(Meta,type = "SamplesLexic")
CL = CreateLexic(Meta,type = "CellsLexic")
colnames(Meta$CellsAnnot)
head(Meta$Raw.clinic)
head(Meta$SamplesAnnot)
CL <- addSeveralKeysToLexic( CL, vector = c("PatientsID"="sample",
"SamplesID"="sample",
"Tumoral.Cells"="malignant",
"Cell.type "="cell_type",
"Seurat.Cluster" = "subclone") )
SL <- addSeveralKeysToLexic( SL, vector = c("PatientsID"="sample",
"SamplesID"="sample",
"SamplePathologicalState"="histology",
"HadTreatment"="treated_naive") )
PL <- addSeveralKeysToLexic(lexic = PL, vector = c("PatientsID"="patient"
,"Age"="age"
,"Sex"="sex"
,"PFSdelay"="PFS_DFS"
,"Disease"="cancer_type"
,"OSevent"="OS"
,"PatientSampling"="site"
,"TreatmentInfo"="treated_naive"
,"pT"="AJCC_T"
,"pN"="AJCC_N"
,"pM"="AJCC_M"
,"Stage"="AJCC_stage"
,"Size"="size"
,"Grade"="grade"))
PL
#Step 5 : Cleaning clinical data
PL = CreateLexic(Meta,type = "PatientsLexic")
SL = CreateLexic(Meta,type = "SamplesLexic")
CL = CreateLexic(Meta,type = "CellsLexic")
colnames(Meta$CellsAnnot)
head(Meta$Raw.clinic)
head(Meta$SamplesAnnot)
CL <- addSeveralKeysToLexic( CL, vector = c("patientsID"="sample",
"samplesID"="sample",
"tumoral.Cells"="malignant",
"cell.type "="cell_type",
"seurat.Cluster" = "subclone") )
SL <- addSeveralKeysToLexic( SL, vector = c("patientsID"="sample",
"samplesID"="sample",
"samplePathologicalState"="histology",
"hadTreatment"="treated_naive") )
PL <- addSeveralKeysToLexic(lexic = PL, vector = c("patientsID"="patient"
,"age"="age"
,"sex"="sex"
,"PFSdelay"="PFS_DFS"
,"disease"="cancer_type"
,"OSevent"="OS"
,"patientSampling"="site"
,"treatmentInfo"="treated_naive"
,"pT"="AJCC_T"
,"pN"="AJCC_N"
,"pM"="AJCC_M"
,"stage"="AJCC_stage"
,"size"="size"
,"grade"="grade"))
View(PL)
Meta = CleaningData(Meta,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Raw.clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Raw.clinic",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Meta)
Meta[["SamplesAnnot"]]
Meta[["Patients.Clinic"]]
Meta$Patients.Clinic$grade = gsub("W-MD", "Well-Mildly differenciated",Meta$Patients.Clinic$grade )
Meta$Patients.Clinic$grade = gsub("M-PD", "Mildly-Poorly differenciated",Meta$Patients.Clinic$grade )
Meta$Patients.Clinic$grade = gsub("WD", "Well differenciated",Meta$Patients.Clinic$grade )
Meta$Patients.Clinic$grade = gsub("MD", "Mildly differenciated",Meta$Patients.Clinic$grade )
Meta$Patients.Clinic$grade = gsub("PD", "Poorly differenciated",Meta$Patients.Clinic$grade )
head(Meta$Cells.Annotation)
head(Meta$SamplesAnnot)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "Moncoda"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path) # if all are TRUE ; next step can be done
# step 4 load data :
cellAnnot = as.data.frame(data.table::fread(file = file.path(Rawpath(Metadata),"Cells.csv")))
rownames(cellAnnot) =cellAnnot$cell_name
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(ClinicFile = "Meta-data_Moncada2020_Pancreas.csv",
name = "Clinic",
type = "Patients",
setSamplesID.Column = "sample",
setPatientID.Column ="patient" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "rawcount",
force.replace = F)
CheckMeta(Metadata)
View(cellAnnot)
Metadata$Clinic[,2]
rownames(Metadata$Clinic)
rownames(Metadata$Clinic) = Metadata$Clinic[,2]
colnames(Metadata$rawcount)[1:5]
rownames(Metadata$CellsAnnot) = Metadata$CellsAnnot$cell_name
attributes(Metadata)
CheckMeta(Metadata)
head(Metadata$CellsAnnot)
#Step 5 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
#Step 6 : Cleaning clinical data
PL = addSeveralKeysToLexic(lexic = PL,vector = c("patientsID"="patient",
"age"="age",
"sex" = "sex",
"PFSdelay"="PFS_DFS",
"disease" ="cancer_type",
"OSevent" ="OS",
"patientSampling" = "site",
"treatmentInfo" =  "treated_naive",
"size" = "size",
"grade" = "grade") )
SL <- addSeveralKeysToLexic( SL, vector = c("patientsID"="sample",
"samplesID"="sample",
"samplePathologicalState"="histology",
"hadTreatment"="treated_naive") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
View(Metadata)
Metadata[["Patients.Clinic"]]
Metadata[["Patients.Clinic"]]
