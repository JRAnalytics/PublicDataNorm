Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
x <-  as.data.frame(data.table::fread(fp))
fp <- paste(c(list.files.path$Parent,"DataBaseSummary.txt"), collapse = "/")
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
x$Version[x$Project==project]
x$Version[x$Project==project]
version
version
!all(x$Version[x$Project==project]%in%version)
x$Version[!x$Version[x$Project==project]%in%version]
is.na(version)
!is.na(version)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
!all(x$Version[x$Project==project]%in%version)
x$Version
x$Project==project
View(x)
!all(x$Version[x$Project==project]%in%version)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
#' @param First.Author Defaul = NA
#' @param DOI doi of article if exist. Defaul = NA
#' @param project project name
#' @param Comment specify a comment for this export
#' @param User User who export the cleaned Meta object
#' @return a .text tab delimited database summary
#' @import data.table
#' @export
#'
#' @examples "non"
CheckLocalDatabase <- function(Meta,
Local.Data.base.Path,
Normalization.Method = NA,
Technology = NA,
Platform = NA,
Run.spec=NA ,
First.Author = NA,
DOI = NA,
project = NA,
Comment = NA,
User= NA){
Databasename = "DataBaseSummary.txt"
lf <- list.files(Local.Data.base.Path)
if(is.null(attributes(Meta)$Version)){ Version = "V1"} else {   Version <- attributes(Meta)$Version }
NBS <- which(attributes(Meta)$Data.Type=="Samples.Clinical.data" & attributes(Meta)$Raw.data=="No")
NBP <- which(attributes(Meta)$Data.Type=="Patient.Clinical.data" & attributes(Meta)$Raw.data=="No")
if(length(NBS)==0){ Nsamples=0 } else{
Nsamples <- nrow(Meta[[NBS]])}
if(length(NBP)==0){ Npatient = Nsamples}else{
Npatient <- nrow(Meta[[NBP]])}
if(length(which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="Yes" ))==0){ RawGenes = 0} else {
NB.raw.mat<- which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="Yes" )
RawGenes <- nrow(Meta[[NB.raw.mat[1]]])}
if(length(which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="No" ))==0){NormGenes=0}else{
NB.norm.mat <- which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="No")
NormGenes <- nrow(Meta[[NB.norm.mat[1]]])}
if(all(is.na(Meta[[NBS]]$SamplePathologicalState))){tumor <- nrow(Meta[[NBS]]) } else {
tumor <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"TUM|PRIMARY")))
if(tumor==0 & !all(is.na(Meta[[NBS]]$SamplePathologicalState))) {
normal <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"NORM|HEAL")))
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
na <- length(which(is.na(Meta[[NBS]]$SamplePathologicalState)))
tumor = nrow(Meta[[NBS]])-normal-met-na
}
}
if(all(is.na(Meta[[NBS]]$SamplePathologicalState))){normal <- 0 } else {
normal<- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"NORM|HEAL")))
if(normal==0 & !all(is.na(Meta[[NBS]]$SamplePathologicalState))) {
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
na <- length(which(is.na(Meta[[NBS]]$SamplePathologicalState)))
normal = nrow(Meta[[NBS]])-tumor-met-na
}
}
if(length(NBP)>0){ TTT<- Meta[[NBP]] %>% subset(TreatmentInfo=="Yes")%>%nrow()
} else { TTT <- 0 }
if( TTT==0  ){
TTTinfo <- "No"
TTTtype <- NA
} else {
TTTinfo <- "Yes"
TTTtype <- paste(unique(Meta[[NBP]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType"  , "Treatment.RT"    )]),collapse = ",")
TTTtype <- paste(unique(Meta[[NBP]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType" ,  "Treatment.RT"    )]),collapse = ",")
}
if(length(NBP)>0){
if(all(is.na(Meta[[NBP]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
if(all(is.na(Meta[[NBP]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" } }
else {
OSinfo <- "No"
PFSinfo <- "No" }
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
dt <- data.frame("Project" = project,
"Version" = Version,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.TumoralSamples" = tumor,
"N.NormalSamples" = normal,
"N.Metastasis" = met,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Type" = TTTtype,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = Normalization.Method,
"Technology" = Technology,
"Platform" = Platform,
"Run.spec"=Run.spec ,
"First.Author" = First.Author,
"Article.DOI" = DOI,
"Comment" = Comment,
"User"= User)
message("Adding to data bases : ")
fp <- paste(c(Local.Data.base.Path,Databasename), collapse = "/")
if(file.exists(fp)){
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
if(length(x$Project[x$Project==project])!=0){
if(!all((x$Project[x$Project==project]==project & x$Version[x$Project==project]==attributes(Meta)$Version)==F)){
message(paste(project,"already existing in database. Reactualising database"))
proj <- which(x$Project==project)
row <- which(x$Version[proj]==attributes(Meta)$Version)
x[row,] <- dt
} else { x <- rbind(x,dt)
print(dt)
}}
if(length(x$Project[x$Project==project])==0){ x <- rbind(x,dt)
print(dt)
}
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
if(!all(x$Version[x$Project==project]%in%version)){
outV <- x$Version[!x$Version[x$Project==project]%in%version]
message(paste("Project",outV  ,"version is missing in 04VerifiedDataset. Removing from DataBaseSummary.txt"))
x <- x[-which(!x$Version[x$Project==project]%in%version),]
}
x <- x[order(x$Project,x$Version,decreasing = F),]
write.table(x,fp,row.names = F, sep = "\t",dec = "." )
} else {
print(dt)
write.table(dt,fp,row.names = F, sep = "\t",dec = "." )
}
}
library(PublicDataNorm)
project <- "Maurer"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
library(GEOquery)
Sys.setenv(VROOM_CONNECTION_SIZE=1500072)
gse <- GEOquery::getGEO("GSE93326", GSEMatrix = TRUE, getGPL = FALSE)
clinic = as.data.frame(gse[["GSE93326-GPL11154_series_matrix.txt.gz"]]@phenoData@data)
clinic <- subset(clinic, clinic$`compartment:ch1`=="Bulk") #Bulk samples are not explain in published cliniccal data
# Step 3.1 : Build meta object from 01RawData folder.
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
Raw = T, # True pour Raw data. F pour normalisÃ©e
local = T,path = list.files.path$Project.RawData,
name.local.file ="MaurerRaw.matrix.csv.gz",
name = "rawcount",
force.replace = F
)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
head(Meta$rawcount.matrix[,1:5])
Meta$rawcount.matrix$GeneSymbol <- NULL  # First colonne, geneSymbols drop off.
###create LexicCLinic and SamplesOrPAtient objects to add or replace colnames of clinical data.
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Raw.clinic",
force.replace = T,type = "Samples",
Raw =T,
merge = F,
mergeBy = "PatientID",join = "left_join",
name.local.file = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"))
dt <- data.frame("CUMC_SampleID" =clinic$title ,"PatientID" = clinic$`patient id:ch1`, "Compartment" = clinic$`compartment:ch1`)
Meta$Raw.clinic <- full_join(Meta$Raw.clinic, dt)
attributes(Meta)
LexicData(list.files.path)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", list.files.path = list.files.path, project = project, ForceCleaning = T)
View(Meta$Raw.clinic)
View(Meta$Sample.pheno)
View(Meta$Patient.clinic)
SamplesLexic$SamplesID <- c(SamplesLexic$SamplesID ,"CUMC_SampleID")
PatientLexic$SamplesID <- c(PatientLexic$SamplesID ,"CUMC_SampleID")
SamplesLexic$SampleType <- c(SamplesLexic$SampleType ,"Compartment")
list.files.path <- DirCheck(project,path)
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
Raw = T, # True pour Raw data. F pour normalisÃ©e
local = T,path = list.files.path$Project.RawData,
name.local.file ="MaurerRaw.matrix.csv.gz",
name = "rawcount",
force.replace = F
)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
head(Meta$rawcount.matrix[,1:5])
Meta$rawcount.matrix$GeneSymbol <- NULL  # First colonne, geneSymbols drop off.
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Raw.clinic",
force.replace = T,type = "Samples",
Raw =T,
merge = F,
mergeBy = "PatientID",join = "left_join",
name.local.file = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"))
dt <- data.frame("CUMC_SampleID" =clinic$title ,"PatientID" = clinic$`patient id:ch1`, "Compartment" = clinic$`compartment:ch1`)
Meta$Raw.clinic <- full_join(Meta$Raw.clinic, dt)
attributes(Meta)
LexicData(list.files.path)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", list.files.path = list.files.path, project = project, ForceCleaning = T)
View(Meta$Raw.clinic)
SamplesLexic$SamplesID <- c(SamplesLexic$SamplesID ,"CUMC_SampleID")
PatientLexic$SamplesID <- c(PatientLexic$SamplesID ,"CUMC_SampleID")
SamplesLexic$SampleType <- c(SamplesLexic$SampleType ,"Compartment")
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", list.files.path = list.files.path, project = project, ForceCleaning = T)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
project <- "Moffit"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path) # if all are TRUE ; next step can be done
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
Raw = F, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file ="Moffit.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F)
head(Meta$Normalized.expression.matrix[,1:5])
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multiple functions
head(Meta$Normalized.expression.matrix[,1:5])
rownames(Meta$Normalized.expression.matrix) <- Meta$Normalized.expression.matrix$V1
Meta$Normalized.expression.matrix$V1 <- NULL
head(Meta$Normalized.expression.matrix[,1:5])
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "raw.clinic",
type = "Samples",
force.replace = T,
merge = F,
name.local.file = "Moffit.SamplesAnnotation.txt.gz")
attributes(Meta)
CheckMeta(Meta)
head(Meta$raw.clinic)
LexicData(list.files.path) # load PatientLexic and SampelsLexic from 02Processes.
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", list.files.path = list.files.path, project = project, ForceCleaning = T)
cc <- na.omit(CheckCleaning(Meta))
attributes(Meta)
str(Meta$Patient.clinic)
Meta$Patient.clinic$OSdelay <- as.numeric(Meta$Patient.clinic$OSdelay)
Meta$Patient.clinic$OSevent <- as.numeric(Meta$Patient.clinic$OSevent)
PatientLexic$PatientsID <- c(PatientLexic$PatientsID,"title")
PatientLexic$Tumoral.Subtypes <- c(PatientLexic$Tumoral.Subtypes,"tumor_subtype_0na_1classical_2basal_ch2") # High and low risk. Important data to parse
SamplesLexic$Tumoral.Subtypes <- c("Tumoral.Subtypes","tumor_subtype_0na_1classical_2basal_ch2")
PatientLexic$Stromal.Subtypes<- c("Stromal.Subtypes","stroma_subtype_0na_1low_2normal_3activated_ch2") # High and low risk. Important data to parse
SamplesLexic$Stromal.Subtypes <- c("Stromal.Subtypes","stroma_subtype_0na_1low_2normal_3activated_ch2")
PatientLexic$PatientSampling <- c("PatientSampling" , "cell_line/tissue_ch2")
PatientLexic$SamplesInfo <- c(PatientLexic$SamplesInfo,"tissue_type_ch2")
SamplesLexic$SamplesInfo[SamplesLexic$SamplesInfo=="cell_line/tissue_ch2"] <- c("tissue_type_ch2")
SamplesLexic$SamplePathologicalState <- c("SamplePathologicalState", "tissue_type_ch2")
patient <- unlist(lapply(strsplit(Meta$raw.clinic$title,"-"),"[[",1))
all(duplicated(patient))==F # no duplicates of patients
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", list.files.path = list.files.path, project = project, ForceCleaning = T)
Meta$Sample.pheno$SampleType <- ifelse(is.na(Meta$Sample.pheno$SamplePathologicalState),yes = "Cell.lines",no = "Tissue")
Meta$Patient.clinic$Tumoral.Subtypes <- ifelse(Meta$Patient.clinic$Tumoral.Subtypes==2, yes = "Basal",
ifelse(Meta$Patient.clinic$Tumoral.Subtypes==1,"Classic", NA))
Meta$Sample.pheno$Tumoral.Subtypes <- ifelse(Meta$Sample.pheno$Tumoral.Subtypes==2, yes = "Basal",
ifelse(Meta$Sample.pheno$Tumoral.Subtypes==1,"Classic", NA))
Meta$Sample.pheno$Stromal.Subtypes <- ifelse(Meta$Sample.pheno$Stromal.Subtypes==2, yes = "Normal",
ifelse(Meta$Sample.pheno$Stromal.Subtypes==1,"Low",
ifelse(Meta$Sample.pheno$Stromal.Subtypes==3,"Activated", NA)))
Meta$Patient.clinic$Stromal.Subtypes <- ifelse(Meta$Patient.clinic$Stromal.Subtypes==2, yes = "Normal",
ifelse(Meta$Patient.clinic$Stromal.Subtypes==1,"Low",
ifelse(Meta$Patient.clinic$Stromal.Subtypes==3,"Activated", NA)))
Meta$Sample.pheno$Organ.Of.Prelevement <- Meta$Sample.pheno$TissueSampling
Meta$Patient.clinic$Organ.Of.Prelevement <- Meta$Patient.clinic$PatientSampling
Meta$Patient.clinic$PatientSampling <- ifelse(is.na(Meta$Patient.clinic$SamplesInfo),yes = "Cell.lines",no = "Tissue")
Meta$Patient.clinic <- subset(Meta$Patient.clinic,PatientSampling!="Cell.lines" )
# Step 4 : Check Metadata Raw build
CheckMeta(Meta)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "Microarray",
Platform = "Agilent" ,
Run.spec = "whole-genome 4x44K DNA",
First.Author = "Moffit R.A.",
DOI = "10.1038/ng.3398.",
project = project,
Comment = "17 Cell lines",
User = "JR-Analytics")
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "Microarray",
Platform = "Agilent" ,
Run.spec = "whole-genome 4x44K DNA",
First.Author = "Moffit R.A.",
DOI = "10.1038/ng.3398.",
project = project,
Comment = "17 Cell lines",
User = "JR-Analytics")
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "Microarray",
Platform = "Agilent" ,
Run.spec = "whole-genome 4x44K DNA",
First.Author = "Moffit R.A.",
DOI = "10.1038/ng.3398.",
project = project,
Comment = "17 Cell lines",
User = "JR-Analytics")
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "Microarray",
Platform = "Agilent" ,
Run.spec = "whole-genome 4x44K DNA",
First.Author = "Moffit R.A.",
DOI = "10.1038/ng.3398.",
project = project,
Comment = "17 Cell lines",
User = "JR-Analytics")
project <- "Maurer"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files.path <- DirCheck(project,path)
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
Raw = T, # True pour Raw data. F pour normalisÃ©e
local = T,path = list.files.path$Project.RawData,
name.local.file ="MaurerRaw.matrix.csv.gz",
name = "rawcount",
force.replace = F
)
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multipe functions
head(Meta$rawcount.matrix[,1:5])
Meta$rawcount.matrix$GeneSymbol <- NULL  # First colonne, geneSymbols drop off.
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "Raw.clinic",
force.replace = T,type = "Samples",
Raw =T,
merge = F,
mergeBy = "PatientID",join = "left_join",
name.local.file = c("Maurer.supTableS2.Patient.clinic.txt", "Maurer.supTableS25.Samples.RNAseq.txt"))
dt <- data.frame("CUMC_SampleID" =clinic$title ,"PatientID" = clinic$`patient id:ch1`, "Compartment" = clinic$`compartment:ch1`)
Meta$Raw.clinic <- full_join(Meta$Raw.clinic, dt)
attributes(Meta)
LexicData(list.files.path)
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", list.files.path = list.files.path, project = project, ForceCleaning = T)
SamplesLexic$SamplesID <- c(SamplesLexic$SamplesID ,"CUMC_SampleID")
PatientLexic$SamplesID <- c(PatientLexic$SamplesID ,"CUMC_SampleID")
SamplesLexic$SampleType <- c(SamplesLexic$SampleType ,"Compartment")
CheckMeta(Meta)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "RNAseq",
Platform = "Illumina" ,
Run.spec = "Single-end 100b, Illumina HiSeq 2000",
First.Author = "Maurer Carlo",
DOI = "10.1136/gutjnl-2018-317706.",
project = project,Comment = NA,
User = "JR-Analytics")
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
fp <- paste(c(list.files.path$Parent,"DataBaseSummary.txt"), collapse = "/")
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
version
is.na(version)
all(is.na(version))
!all(is.na(version))
library(PublicDataNorm)
library(PublicDataNorm)
