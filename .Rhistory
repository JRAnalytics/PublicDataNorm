OriItem = names(Lexic)[unlist(lapply(OriItem, function(x) which(str_detect(x, names(Lexic)))))]
Dupinitem = names(Lexic)[unlist(lapply(names(dupInLexic), function(x) which(str_detect(x, names(Lexic)))))]
if(length(dupInLexic)>0){
message(paste0("column target '",dupInLexic,"' from Lexic's '", OriItem, "' is duplicated in '", Dupinitem,"'\n" ))
}
}
CheckLexicDups(Lexic)
duplicated(toupper(names(Lexic)))
all(DupItems==F)
DupItems = duplicated(toupper(names(Lexic)))
all(DupItems==F)
!all(DupItems==F)
DupItems[1] = TRUE
!all(DupItems==F)
if(!all(DupItems==F)){
DupItems = names(Lexic)[which(DupItems)]
message(paste("Duplicated Items",DupItems,"in lexic"))}
if(!all(DupItems==F)){
DupItems = names(Lexic)[which(DupItems)]
message(paste("Duplicated Items '",DupItems,"' in lexic"))}
DupItems = duplicated(toupper(names(Lexic)))
if(!all(DupItems==F)){
DupItems = names(Lexic)[which(DupItems)]
message(paste("Duplicated Items '",DupItems,"' in lexic"))}
DupItems = duplicated(toupper(names(Lexic)))
if(!all(DupItems==F)){
DupItems = names(Lexic)[which(DupItems)]
message(paste("Duplicated Items '",DupItems,"' in lexic"))}
#' CheckLexicDups
#'
#' @param Lexic Lexic to check if duplicated values (Targeted column) are in the lexic items.
#'
#' @return nothing
#' @export
#'
#' @examples "non"
CheckLexicDups = function(Lexic) {
DupItems = duplicated(toupper(names(Lexic)))
if(!all(DupItems==F)){
DupItems = names(Lexic)[which(DupItems)]
message(paste("Duplicated Items '",DupItems,"' in lexic"))}
dupInItems = unlist(lapply(Lexic, function(x){x = x %>% duplicated() %>% which()}))
if(length(dupInItems)>1){
dupInItemsTargets = names(Lexic)[unlist(lapply(names(dupInItems), function(x) which(str_detect(x, names(Lexic)))))]
dt = data.frame("Position" =dupInItems ,"LexicItem" =dupInItemsTargets, "Dup" = NA)
for (i in rownames(dt)){
dt[i,]$Dup = Lexic[[ dt[i,]$LexicItem ]][ dt[i,]$Position]
}
dt$DupDup = paste0(dt$LexicItem,dt$Dup)
dt = dt[-which(duplicated(dt$DupDup)),]
message(c(paste0("Duplicated column target(s) '",dt$Dup,"' in '", dt$LexicItem,"'.\n")))}
if(length(dupInItems)==1){
dupInItemsTargets = Lexic[[names(dupInItems)]][dupInItems]
names(dupInItemsTargets) = names(dupInItems)
message(c(paste0("Duplicated column target(s) '",dupInItemsTargets,"' in '", names(dupInItems),"'.\n")))
}
lexiceclate = unlist(lapply(Lexic, function(x){x = x}))
dupInLexic= lexiceclate[which(duplicated(lexiceclate))]
if(length(dupInItems)==1){
dupInLexic = dupInLexic[dupInLexic!=dupInItemsTargets]}
if(length(dupInItems)>1){dupInLexic = dupInLexic[dupInLexic!=dt$Dup]}
NamesdupInLexic = names(lexiceclate)[lexiceclate %in% dupInLexic]
OriItem = NamesdupInLexic[ !NamesdupInLexic %in%  names(dupInLexic)]
OriItem = names(Lexic)[unlist(lapply(OriItem, function(x) which(str_detect(x, names(Lexic)))))]
Dupinitem = names(Lexic)[unlist(lapply(names(dupInLexic), function(x) which(str_detect(x, names(Lexic)))))]
if(length(dupInLexic)>0){
message(paste0("column target '",dupInLexic,"' from Lexic's '", OriItem, "' is duplicated in '", Dupinitem,"'\n" ))
}
}
CheckLexicDups(Lexic)
exists("SL")
rm(SL)
exists("SL")
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
PL<- lapply(x, `[`, -1)
attr(PL, "Lexic") = "Yes"
attr(PL, "Name") = "PatientsLexic"
return(PL)} else {    PL <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(PL) <- sapply(PL, `[[`, 1)
PL<- lapply(PL, `[`, -1)
attr(PL, "Lexic") = "Yes"
attr(PL, "Name") = "PatientsLexic"
return(PL)  }}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
} else {
SL <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
SL <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
} else {
SL <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)}
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
}}
if(exists("SL")){"YEs!"}
# DupItems = duplicated(toupper(names(Lexic)))
# if(!all(DupItems==F)){
#
#   DupItems = names(Lexic)[which(DupItems)]
#
#   message(paste("Duplicated Items '",DupItems,"' in lexic"))}
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
PL<- lapply(x, `[`, -1)
attr(PL, "Lexic") = "Yes"
attr(PL, "Name") = "PatientsLexic"
return(PL)} else {    PL <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(PL) <- sapply(PL, `[[`, 1)
PL<- lapply(PL, `[`, -1)
attr(PL, "Lexic") = "Yes"
attr(PL, "Name") = "PatientsLexic"
return(PL)  }}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
} else {
SL <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
SL <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
} else {
SL <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)}
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
}}
DupItems = duplicated(toupper(names(SL)))
if(!all(DupItems==F)){
DupItems = names(SL)[which(DupItems)]
stop(paste("Duplicated Items '",DupItems,"' in lexic"))}
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
PL = CreateLexic(Metadata,type = "PatientsLexic")
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "PatientsLexic"
return(SL)} else {    SL <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "PatientsLexic"
return(SL)  }}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
} else {
SL <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
SL <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
} else {
SL <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)}
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
}}
DupItems = duplicated(toupper(names(SL)))
if(!all(DupItems==F)){
DupItems = names(SL)[which(DupItems)]
stop(paste("Duplicated Items '",DupItems,"' in lexic"))}
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "PatientsLexic"
return(SL)} else {    SL <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "PatientsLexic"
return(SL)  }}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
} else {
SL <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "SamplesLexic"
return(SL)
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
SL <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
} else {
SL <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)}
attr(SL, "Lexic") = "Yes"
attr(SL, "Name") = "CellsLexic"
return(SL)
}}
DupItems = duplicated(toupper(names(SL)))
message("OK")
if(!all(DupItems==F)){
DupItems = names(SL)[which(DupItems)]
stop(paste("Duplicated Items '",DupItems,"' in lexic"))}
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
rm(CL, SL, PL)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
names(SL)
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "PatientsLexic"
return(Lexic)} else {    Lexic <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "PatientsLexic"
return(Lexic)  }}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "SamplesLexic"
return(Lexic)
} else {
Lexic <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "SamplesLexic"
return(Lexic)
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "CellsLexic"
return(Lexic)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
Lexic <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
} else {
Lexic <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)}
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "CellsLexic"
return(Lexic)
}}
DupItems = duplicated(toupper(names(Lexic)))
message("OK")
if(!all(DupItems==F)){
DupItems = names(Lexic)[which(DupItems)]
stop(paste("Duplicated Items '",DupItems,"' in lexic"))}
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
CreateLexic <- function(Metadata=NULL, type = c("SamplesLexic","PatientsLexic","CellsLexic")){
if(is.null(Metadata)){stop("Metadata is null.")}
if(!is.list(Metadata)){stop("Metadata must be a list created from CreateMetadata() function.")}
if(is.null(attributes(Metadata)$File.path) | is.null(attributes(Metadata)$Project)){stop("No attributes found in Metadata. Create one with CreateMetadata()")}
if(is.null(attributes(Metadata)$Omics.type)){stop("No Omics.type attributes found in Metadata. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic", "CellsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Metadata)$File.path
project =  attributes(Metadata)$Project
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "PatientsLexic"
} else {    Lexic <- scan(paste(Refpath(Metadata),"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "PatientsLexic"
}}
if(type=="SamplesLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "SamplesLexic"
} else {
Lexic <- scan(paste(Refpath(Metadata),"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "SamplesLexic"
}
}
if(type=="CellsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
Lexic<- lapply(x, `[`, -1)
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "CellsLexic"
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".CellsLexic.txt"))){
Lexic <- scan(paste0(list.files.path$Project.Processes,"/",project,".CellsLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)
} else {
Lexic <- scan(paste(Refpath(Metadata),"CellsLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(Lexic) <- sapply(Lexic, `[[`, 1)
Lexic<- lapply(Lexic, `[`, -1)}
attr(Lexic, "Lexic") = "Yes"
attr(Lexic, "Name") = "CellsLexic"
}}
DupItems = duplicated(toupper(names(Lexic)))
message("OK")
if(!all(DupItems==F)){
DupItems = names(Lexic)[which(DupItems)]
stop(paste("Duplicated Items '",DupItems,"' in lexic"))}
return(Lexic)
}
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
rm(CL, SL, PL)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
SamplesLog()
SamplesLog(Metadata*)
SamplesLog(Metadata)
SampleLog(Metadata)
PatientLog(Metadata)
View(PatientLog(Metadata))
