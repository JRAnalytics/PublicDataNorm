library(Matrix)
# Step 1 : Create project folders in other sub dir in Parent folder.
project <- "Chen"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Clinic=getGEO('GSE212966',GSEMatrix=TRUE)[["GSE212966_series_matrix.txt.gz"]]@phenoData@data
Clinic$SampleID = unlist(lapply(str_split(Clinic$title, ","), "[[", 1))
rownames(Clinic) = Clinic$SampleID
Clinic$PatientID =  as.character(gsub("\\D","",Clinic$SampleID))
gc()
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(Matrix)
library(GEOquery)
project <- "Zhang"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path) # if all are TRUE ; next step can be done
Clinic=getGEO('GSE197177',GSEMatrix=TRUE)[["GSE197177_series_matrix.txt.gz"]]@phenoData@data
rownames(Clinic) = Clinic$title
project <- "Schlesinger"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path)
list.files(Rawpath(Metadata))
Metadata = AddExpressionMatrixSC(Metadata = Metadata,
ExpressionMatrix ="GSM4293555_Human.csv.gz" ,
Cell.file = NULL ,
Genes.file =NULL,
name = "rawcount")
View(Metadata)
Metadata[["rawcount"]]
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "Moncoda"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
list.files(path)
Metadata <- CreateDataset(project,path) # if all are TRUE ; next step can be done
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data_Moncada2020_Pancreas.csv",
name = "Clinic",
type = "Patients",
setID.Column ="patient" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
Metadata <- CreateDataset(project,path)
Metadata =  AddClinicFromFile(Metadata = Metadata,
ClinicFile = "Meta-data_Moncada2020_Pancreas.csv",
name = "Clinic",
type = "Patients",
setID.Column ="patient" )
traceback()
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setID.Column ="patient" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
clinic = data.table::fread(file.path(Rawpath(Metadata),"Meta-data_Moncada2020_Pancreas.csv" ))
View(clinic)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = clinic,
name = "Clinic",
type = "Patients",
setID.Column ="patient" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
View(clinic)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = clinic,
name = "Clinic",
type = "Patients",
setSamplesID.Column = "sample" ,
setPatientID.Column ="patient" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data_Moncada2020_Pancreas.csv",
name = "Clinic",
type = "Patients",
setSamplesID.Column = "sample" ,
setPatientID.Column ="patient" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
View(Metadata)
gc()
Metadata$Clinic$V1
Metadata$Clinic$V1=NULL
rownames(Metadata$Clinic) = Metadata$Clinic$PatientsID
CheckMeta(Metadata)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Metadata$Clinic)
View(Metadata)
Metadata[["CellsAnnot"]]
View(Metadata)
Metadata[["Clinic"]]
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType" = "cell_type",
"CellSubtype"="cell_subtype",
"MalignantCells"= "malignant" ))
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType" = "cell_type",
"CellSubtype"="cell_subtype",
"MalignantCells"= "malignant" ))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Disease" ="cancer_type",
"TreatmentInfo"="treated_naive",
"PatientSampling"="site"))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = NULL,
SamplesAnnotToClean = NULL,
SamplesExportname =NULL ,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = NULL,
SamplesAnnotToClean = NULL,
SamplesExportname =NULL ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = NULL,
SamplesAnnotToClean = NULL,
SamplesExportname =NULL ,
FilterSP = T, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F,force.replace =T  #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = NULL,
SamplesAnnotToClean = NULL,
SamplesExportname =NULL ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F,force.replace =T  #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["Patients.Clinic"]]
Metadata[["Cells.Annotation"]]
gc()
CheckMeta(Metadata)
SL = CreateLexic(Metadata,type = "SamplesLexic")
colnames(Metadata$Clinic)
View(clinic)
SL = addSeveralKeysToLexic(lexic = SL,vector = c("SamplePathologicalState"="histology",
"HadTreatment"="post_sampling_rx_exposed") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SampleAnnot" ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F,force.replace =T  #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["SampleAnnot"]]
CheckMeta(Metadata)
head(Metadata$CellsAnnot)
head(Metadata$count[,1:5])
head(Metadata$Cells.Annotation)
Metadata$CellsAnnot$PatientsID = gsub("_","-",Metadata$CellsAnnot$sample)
head(Metadata$Cells.Annotation)
head(Metadata$CellsAnnot)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SampleAnnot" ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F,force.replace =T  #will subset expression matrices and gene annotation with common genes
)
CheckMeta(Metadata)
View(Metadata)
Metadata[["Patients.Clinic"]]
Metadata$Clinic$PatientsID
Metadata$Clinic$PatientsID = gsub("_","-",Metadata$Clinic$PatientsID)
Metadata$Clinic$SamplesID = gsub("_","-",Metadata$Clinic$SamplesID)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SampleAnnot" ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F,force.replace =T  #will subset expression matrices and gene annotation with common genes
)
gc()
CheckMeta(Metadata)
Metadata[["Patients.Clinic"]]
head(Metadata$Cells.Annotation)
Metadata = ExportTSV(Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "inDrop" ,
Run.spec = NA,
First.Author = "Moncoda R.",
DOI = "10.1038/s41587-019-0392-8",
Comment = "16 human pancreatic ductal adenocarcinoma (PDAC) samples.
The original published dataset contains 24 samples â€“
8 were excluded here due to insufficient copy number alteration (CNA) signal.
Cells with fewer than 1000 genes detected were excluded.",
User = "JR-Analytics")
project <- "Werba"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Clinic=getGEO('GSE205013',GSEMatrix=TRUE)[["GSE205013_series_matrix.txt.gz"]]@phenoData@data
for(i in Clinic$title){
Metadata <- CreateDataset(project,path)
files = list.files(Rawpath(Metadata))[str_detect(list.files(Rawpath(Metadata)), i)]
Metadata = AddExpressionMatrixSC(Metadata = Metadata,
ExpressionMatrix = files[str_detect(files, ".mtx")],
Cell.file = files[str_detect(files, "barcode")] ,
setID.cellAnnotColumn = 1,
Genes.file = files[str_detect(files, "features")],
name = "count")
gc()
colnames(Metadata$count) = paste0(i,"_",colnames(Metadata$count))
if(!exists("test")){
test =Matrix::Matrix(Metadata$count)
cells = data.frame("cell_barcode" = paste0(i,"_",Metadata$CellsAnnot[,1]))
} else {
test = cbind(test, Matrix::Matrix(Metadata$count))
cells =rbind(cells, data.frame("cell_barcode" =paste0(i,"_",Metadata$CellsAnnot[,1])))}
rm(Metadata,i,files)
gc()
}
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = as.data.frame(Clinic),
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "PatientID",
name ="raw.Clinic" ,
type ="Patients") %>%
AddExpressionMatrixSC(
ExpressionMatrix = test,
Cell.file = cells,
setID.cellAnnotColumn = "cell_barcode",
Genes.file = "GSM6204121_P13_features.tsv.gz",
name = "rawcount")
View(Clinic)
View(Clinic)
View(cells)
Metadata <- CreateDataset(project,path) %>%
AddClinicFromObject(object = as.data.frame(Clinic),
Export = F,
setSamplesID.Column = "title",
setPatientID.Column = "title",
name ="raw.Clinic" ,
type ="Patients") %>%
AddExpressionMatrixSC(
ExpressionMatrix = test,
Cell.file = cells,
setID.cellAnnotColumn = "cell_barcode",
Genes.file = "GSM6204121_P13_features.tsv.gz",
name = "rawcount")
CheckMeta(Metadata)
rm(test,cells)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
Metadata$CellsAnnot$PatientID
unlist(lapply(str_split(Metadata$CellsAnnot$Cells, "_"),"[[",1))
unlist(lapply(str_split(Metadata$CellsAnnot$Cells, "-"),"[[",1))
unlist(lapply(str_split(Metadata$raw.Clinic $title, "_"),"[[",1))
Metadata$CellsAnnot$PatientID = unlist(lapply(str_split(Metadata$CellsAnnot$Cells, "-"),"[[",1))
Metadata$raw.Clinic$PatientID = unlist(lapply(str_split(Metadata$raw.Clinic $title, "-"),"[[",1))
colnames(Metadata$CellsAnnot)
View(Clinic)
View(Metadata)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="raw.Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
force.replace = T,
SamplesAnnotToClean = "raw.Clinic",
SamplesExportname =NULL ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="raw.Clinic",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
force.replace = T,
SamplesAnnotToClean = "raw.Clinic",
SamplesExportname ="SamplesAnnot" ,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
Metadata[["SamplesAnnot"]]
Metadata[["SamplesAnnot"]]
Metadata$Patients.Clinic
Metadata$Cells.Annotation
CheckMeta(Metadata)
if(attributes(Metadata)$Omics.type=="Single.Cell"){
c= NULL
if("Clinic" %in%attributes(Metadata)$Data.Type){
c <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="Yes")
if(is.null(c)){stop("A Patients' Clinical data must be loaded. Set type = 'Patients'")}
if(length(c2)>0){c=c2}
PpID <- unique(Metadata[[c[1]]][,"PatientsID"])
PsID = Metadata[[c[1]]][,"SamplesID"]
PsID = unique(unlist(strsplit(PsID, ";")))
}
if("SamplesAnnot" %in%attributes(Metadata)$Data.Type ){
s <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
s2 <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(s2)>0){s=s2}
SsID <- unique(Metadata[[s[1]]][,"SamplesID"])
SpID <- unique(Metadata[[s[1]]][,"PatientsID"])
}
if("CellsAnnot" %in%attributes(Metadata)$Data.Type){
cellannot <- which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned=="No")
cellannot2 <- which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(cellannot2)>0){cellannot=cellannot2}
cellID <- Metadata[[cellannot[1]]][,"CellsBarcode"]
}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
for (i in c(c,s)){
message(paste0("PatientsID from '", names(Metadata)[i],"', in CellsAnnotation object"))
tot=0
for (z in unique(Metadata[[i]][,"PatientsID"])) {
t = summary(str_detect(pattern = paste0('[a-zA-Z]',z,"-"), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
message("Total = " , tot,"/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")}
if(length(ccc)>0){ p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")}else{
p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
}
if(length(p)>0){
for (i in p){
message(paste0("SamplesID from '", names(Metadata)[i],"', in CellsAnnotation object :"))
tot=0
for (z in Metadata[[i]][,"SamplesID"]) {
t = summary(str_detect(pattern = paste0(z,"-"), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
message("Total = " , tot, "/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")
}
}
}
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
(c,s)
c(c,s)
i = 5
message(paste0("PatientsID from '", names(Metadata)[i],"', in CellsAnnotation object"))
unique(Metadata[[i]][,"PatientsID"])
paste0('[a-zA-Z]',z,"-")
cellID
str_detect(pattern = paste0('[a-zA-Z]',z,"-"), cellID)
summary(str_detect(pattern = paste0('[a-zA-Z]',z,"-"), cellID))
str_detect(pattern = paste0('[a-zA-Z]'),z)
if(attributes(Metadata)$Omics.type=="Single.Cell"){
for (i in c(c,s)){
message(paste0("PatientsID from '", names(Metadata)[i],"', in CellsAnnotation object"))
tot=0
for (z in unique(Metadata[[i]][,"PatientsID"])) {
if(str_detect(pattern = paste0('[a-zA-Z]'),z)){ pattern = paste0(z,"-")}else {  paste0('[a-zA-Z]',z,"-")}
t = summary(str_detect(pattern = pattern, cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
message("Total = " , tot,"/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")}
if(length(ccc)>0){ p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")}else{
p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
}
if(length(p)>0){
for (i in p){
message(paste0("SamplesID from '", names(Metadata)[i],"', in CellsAnnotation object :"))
tot=0
for (z in Metadata[[i]][,"SamplesID"]) {
t = summary(str_detect(pattern = paste0(z,"-"), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
message("Total = " , tot, "/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")
}
}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
for (i in c(c,s)){
message(paste0("PatientsID from '", names(Metadata)[i],"', in CellsAnnotation object"))
tot=0
for (z in unique(Metadata[[i]][,"PatientsID"])) {
if(str_detect(pattern = paste0('[a-zA-Z]'),z)){ pattern = paste0(z,"-")}else {  paste0('[a-zA-Z]',z,"-")}
t = summary(str_detect(pattern = pattern, cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
message("Total = " , tot,"/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")}
if(length(ccc)>0){ p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")}else{
p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
}
if(length(p)>0){
for (i in p){
message(paste0("SamplesID from '", names(Metadata)[i],"', in CellsAnnotation object :"))
tot=0
for (z in Metadata[[i]][,"SamplesID"]) {
if(str_detect(pattern = paste0('[a-zA-Z]'),z)){ pattern = paste0(z,"-")}else {  paste0('[a-zA-Z]',z,"-")}
t = summary(str_detect(pattern = pattern, cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
message("Total = " , tot, "/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")
}
}
}
Metadata$
CheckMeta(Metadata)
CheckMeta(Metadata)
Metadata$Patients.Clinic$PatientSampling = Metadata$Patients.Clinic[Metadata$Patients.Clinic$PatientsID,]$PatientSampling
Metadata$Cells.Annotation$HadTreatment = Metadata$Patients.Clinic[Metadata$Cells.Annotation$PatientsID,]$HadTreatment
Metadata$Cells.Annotation$SamplePathologicalState  = Metadata$Patients.Clinic[Metadata$Cells.Annotation$PatientsID,]$SamplePathologicalState
Metadata$Cells.Annotation$PatientSampling = Metadata$Patients.Clinic[Metadata$Cells.Annotation$PatientsID,]$PatientSampling
Metadata$Patients.Clinic$Disease   = "Pancreatic ductal adenocarcinoma"
Metadata$Patients.Clinic$SpecimenOrgan = ifelse(str_detect(Metadata$Patients.Clinic$SamplePathologicalState, "liver"), "Liver", "Pancreas")
Metadata$Cells.Annotation$SpecimenOrgan = Metadata$Patients.Clinic[Metadata$Cells.Annotation$PatientsID,]$SpecimenOrgan
CheckMeta(Metadata)
Metadata= ExportTSV(Metadata = Metadata)
gc()
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "" ,
Run.spec = NA,
First.Author = "Werba G.",
DOI = "10.1038/s41467-023-36296-4",
Comment = NA,
User = "JR-Analytics")
