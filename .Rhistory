Sequençing.LengthPer.pb = NA,
Sequençing.Run = NA,
Sequençing.Platform = NA ,
First.Author = NA,
DOI = NA,
project = NA){
lf <- list.files(Local.Data.base.Path)
if(length(names(Meta)[(str_detect(names(Meta), "Sample"))])==0){ Nsamples=0 } else{
Nsamples <- nrow(Meta[[which(str_detect(names(Meta), "Sample"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Patient"))])==0){ Npatient = Nsamples}else{
Npatient <- nrow(Meta[[which(str_detect(names(Meta), "Patient"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Raw.matrix"))])==0){ RawGenes = 0}else{
RawGenes <- nrow(Meta[[which(str_detect(names(Meta), "Raw.matrix"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Normalized"))])==0){NormGenes=0}else{
NormGenes <- nrow(Meta[[which(str_detect(names(Meta), "Normalized"))]])}
tumor <- Meta[[which(str_detect(names(Meta), "Sample"))]] %>% subset(SamplePathologicalState=="Tumor")%>%nrow()
normal<- Meta[[which(str_detect(names(Meta), "Sample"))]] %>% subset(SamplePathologicalState=="Normal")%>%nrow()
if(length(which(str_detect(names(Meta), "Patient")))>0 ){ TTT<- Meta[[which(str_detect(names(Meta), "Patient"))]] %>% subset(TreatmentInfo=="Yes")%>%nrow()
colNamesPatientsClinic <- colnames(Meta[[which(str_detect(names(Meta), "Patient"))]]) } else { TTT==0 }
if( TTT==0  ){
TTTinfo <- "No"
TTTtype <- NA
} else {
TTTinfo <- "Yes"
TTTtype <- paste(unique(Meta[[which(str_detect(names(Meta), "Patient"))]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType"  , "Treatment.RT"    )]),collapse = ",")
TTTtype <- paste(unique(Meta[[which(str_detect(names(Meta), "Patient"))]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType" ,  "Treatment.RT"    )]),collapse = ",")
}
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" }
dt <- data.frame("Project" = project,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.TumoralSamples" = tumor,
"N.NormalSamples" = normal,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Type" = TTTtype,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = Normalization.Method,
"Sequençing.DeepenessPerMillionReads" = Sequençing.DeepenessPerMillionReads,
"Sequençing.LengthPer.pb" = Sequençing.LengthPer.pb,
"Sequençing.Run" = Sequençing.Run,
"Sequençing.Platform" =Sequençing.Platform ,
"First.Author" = First.Author,
"Article.DOI" = DOI,
row.names = project)
message("Adding to data bases : ")
print(dt)
fp <- paste(c(Local.Data.base.Path,Databasename), collapse = "/")
if(file.exists(fp)){
x <-  as.data.frame(fread(fp))
rownames(x) <- x$Project
if(project%in%rownames(x)){
message(paste(project,"already existing in database. Reactualising database"))
x[project,] <- dt
} else { x <- rbind(x,dt) }
write.table(x,fp,row.names = F, sep = "\t",dec = "." )
} else {
write.table(dt,fp,row.names = F, sep = "\t",dec = "." )
}
}
#Step 8 :
CheckLocalDatabase(Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = "Microarray",
Sequençing.Platform = "Illumina HG-U133_Plus_2" ,
First.Author = "	Gao H",
DOI = "10.1038/nm.3954",
project = project)
traceback()
length(which(str_detect(names(Meta), "Patient")))>0
#' @param Sequençing.LengthPer.pb Defaul = NA
#' @param Sequençing.Platform Defaul = NA
#' @param First.Author Defaul = NA
#' @param DOI doi of article if exist. Defaul = NA
#' @param project project name
#' @return a .text tab delimited database summary
#' @import data.table
#' @export
#'
#' @examples "non"
CheckLocalDatabase <- function(Local.Data.base.Path,
Databasename = "DataBaseSummary.txt",
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = NA,
Sequençing.Platform = NA ,
First.Author = NA,
DOI = NA,
project = NA){
lf <- list.files(Local.Data.base.Path)
if(length(names(Meta)[(str_detect(names(Meta), "Sample"))])==0){ Nsamples=0 } else{
Nsamples <- nrow(Meta[[which(str_detect(names(Meta), "Sample"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Patient"))])==0){ Npatient = Nsamples}else{
Npatient <- nrow(Meta[[which(str_detect(names(Meta), "Patient"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Raw.matrix"))])==0){ RawGenes = 0}else{
RawGenes <- nrow(Meta[[which(str_detect(names(Meta), "Raw.matrix"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Normalized"))])==0){NormGenes=0}else{
NormGenes <- nrow(Meta[[which(str_detect(names(Meta), "Normalized"))]])}
tumor <- Meta[[which(str_detect(names(Meta), "Sample"))]] %>% subset(SamplePathologicalState=="Tumor")%>%nrow()
normal<- Meta[[which(str_detect(names(Meta), "Sample"))]] %>% subset(SamplePathologicalState=="Normal")%>%nrow()
if(length(which(str_detect(names(Meta), "Patient")))>0){ TTT<- Meta[[which(str_detect(names(Meta), "Patient"))]] %>% subset(TreatmentInfo=="Yes")%>%nrow()
colNamesPatientsClinic <- colnames(Meta[[which(str_detect(names(Meta), "Patient"))]]) }
if(length(which(str_detect(names(Meta), "Patient")))==0){ TTT==0 }
if( TTT==0  ){
TTTinfo <- "No"
TTTtype <- NA
} else {
TTTinfo <- "Yes"
TTTtype <- paste(unique(Meta[[which(str_detect(names(Meta), "Patient"))]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType"  , "Treatment.RT"    )]),collapse = ",")
TTTtype <- paste(unique(Meta[[which(str_detect(names(Meta), "Patient"))]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType" ,  "Treatment.RT"    )]),collapse = ",")
}
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" }
dt <- data.frame("Project" = project,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.TumoralSamples" = tumor,
"N.NormalSamples" = normal,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Type" = TTTtype,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = Normalization.Method,
"Sequençing.DeepenessPerMillionReads" = Sequençing.DeepenessPerMillionReads,
"Sequençing.LengthPer.pb" = Sequençing.LengthPer.pb,
"Sequençing.Run" = Sequençing.Run,
"Sequençing.Platform" =Sequençing.Platform ,
"First.Author" = First.Author,
"Article.DOI" = DOI,
row.names = project)
message("Adding to data bases : ")
print(dt)
fp <- paste(c(Local.Data.base.Path,Databasename), collapse = "/")
if(file.exists(fp)){
x <-  as.data.frame(fread(fp))
rownames(x) <- x$Project
if(project%in%rownames(x)){
message(paste(project,"already existing in database. Reactualising database"))
x[project,] <- dt
} else { x <- rbind(x,dt) }
write.table(x,fp,row.names = F, sep = "\t",dec = "." )
} else {
write.table(dt,fp,row.names = F, sep = "\t",dec = "." )
}
}
#Step 8 :
CheckLocalDatabase(Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = "Microarray",
Sequençing.Platform = "Illumina HG-U133_Plus_2" ,
First.Author = "	Gao H",
DOI = "10.1038/nm.3954",
project = project)
#' @param Sequençing.LengthPer.pb Defaul = NA
#' @param Sequençing.Platform Defaul = NA
#' @param First.Author Defaul = NA
#' @param DOI doi of article if exist. Defaul = NA
#' @param project project name
#' @return a .text tab delimited database summary
#' @import data.table
#' @export
#'
#' @examples "non"
CheckLocalDatabase <- function(Local.Data.base.Path,
Databasename = "DataBaseSummary.txt",
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = NA,
Sequençing.Platform = NA ,
First.Author = NA,
DOI = NA,
project = NA){
lf <- list.files(Local.Data.base.Path)
if(length(names(Meta)[(str_detect(names(Meta), "Sample"))])==0){ Nsamples=0 } else{
Nsamples <- nrow(Meta[[which(str_detect(names(Meta), "Sample"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Patient"))])==0){ Npatient = Nsamples}else{
Npatient <- nrow(Meta[[which(str_detect(names(Meta), "Patient"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Raw.matrix"))])==0){ RawGenes = 0}else{
RawGenes <- nrow(Meta[[which(str_detect(names(Meta), "Raw.matrix"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Normalized"))])==0){NormGenes=0}else{
NormGenes <- nrow(Meta[[which(str_detect(names(Meta), "Normalized"))]])}
tumor <- Meta[[which(str_detect(names(Meta), "Sample"))]] %>% subset(SamplePathologicalState=="Tumor")%>%nrow()
normal<- Meta[[which(str_detect(names(Meta), "Sample"))]] %>% subset(SamplePathologicalState=="Normal")%>%nrow()
if(length(which(str_detect(names(Meta), "Patient")))>0){ TTT<- Meta[[which(str_detect(names(Meta), "Patient"))]] %>% subset(TreatmentInfo=="Yes")%>%nrow()
colNamesPatientsClinic <- colnames(Meta[[which(str_detect(names(Meta), "Patient"))]]) } else { TTT=0 }
if( TTT==0  ){
TTTinfo <- "No"
TTTtype <- NA
} else {
TTTinfo <- "Yes"
TTTtype <- paste(unique(Meta[[which(str_detect(names(Meta), "Patient"))]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType"  , "Treatment.RT"    )]),collapse = ",")
TTTtype <- paste(unique(Meta[[which(str_detect(names(Meta), "Patient"))]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType" ,  "Treatment.RT"    )]),collapse = ",")
}
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" }
dt <- data.frame("Project" = project,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.TumoralSamples" = tumor,
"N.NormalSamples" = normal,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Type" = TTTtype,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = Normalization.Method,
"Sequençing.DeepenessPerMillionReads" = Sequençing.DeepenessPerMillionReads,
"Sequençing.LengthPer.pb" = Sequençing.LengthPer.pb,
"Sequençing.Run" = Sequençing.Run,
"Sequençing.Platform" =Sequençing.Platform ,
"First.Author" = First.Author,
"Article.DOI" = DOI,
row.names = project)
message("Adding to data bases : ")
print(dt)
fp <- paste(c(Local.Data.base.Path,Databasename), collapse = "/")
if(file.exists(fp)){
x <-  as.data.frame(fread(fp))
rownames(x) <- x$Project
if(project%in%rownames(x)){
message(paste(project,"already existing in database. Reactualising database"))
x[project,] <- dt
} else { x <- rbind(x,dt) }
write.table(x,fp,row.names = F, sep = "\t",dec = "." )
} else {
write.table(dt,fp,row.names = F, sep = "\t",dec = "." )
}
}
#Step 8 :
CheckLocalDatabase(Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = "Microarray",
Sequençing.Platform = "Illumina HG-U133_Plus_2" ,
First.Author = "	Gao H",
DOI = "10.1038/nm.3954",
project = project)
traceback()
#' @param Sequençing.LengthPer.pb Defaul = NA
#' @param Sequençing.Platform Defaul = NA
#' @param First.Author Defaul = NA
#' @param DOI doi of article if exist. Defaul = NA
#' @param project project name
#' @return a .text tab delimited database summary
#' @import data.table
#' @export
#'
#' @examples "non"
CheckLocalDatabase <- function(Local.Data.base.Path,
Databasename = "DataBaseSummary.txt",
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = NA,
Sequençing.Platform = NA ,
First.Author = NA,
DOI = NA,
project = NA){
lf <- list.files(Local.Data.base.Path)
if(length(names(Meta)[(str_detect(names(Meta), "Sample"))])==0){ Nsamples=0 } else{
Nsamples <- nrow(Meta[[which(str_detect(names(Meta), "Sample"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Patient"))])==0){ Npatient = Nsamples}else{
Npatient <- nrow(Meta[[which(str_detect(names(Meta), "Patient"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Raw.matrix"))])==0){ RawGenes = 0}else{
RawGenes <- nrow(Meta[[which(str_detect(names(Meta), "Raw.matrix"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Normalized"))])==0){NormGenes=0}else{
NormGenes <- nrow(Meta[[which(str_detect(names(Meta), "Normalized"))]])}
tumor <- Meta[[which(str_detect(names(Meta), "Sample"))]] %>% subset(SamplePathologicalState=="Tumor")%>%nrow()
normal<- Meta[[which(str_detect(names(Meta), "Sample"))]] %>% subset(SamplePathologicalState=="Normal")%>%nrow()
if(length(which(str_detect(names(Meta), "Patient")))>0){ TTT<- Meta[[which(str_detect(names(Meta), "Patient"))]] %>% subset(TreatmentInfo=="Yes")%>%nrow()
} else { TTT <- 0 }
if( TTT==0  ){
TTTinfo <- "No"
TTTtype <- NA
} else {
TTTinfo <- "Yes"
TTTtype <- paste(unique(Meta[[which(str_detect(names(Meta), "Patient"))]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType"  , "Treatment.RT"    )]),collapse = ",")
TTTtype <- paste(unique(Meta[[which(str_detect(names(Meta), "Patient"))]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType" ,  "Treatment.RT"    )]),collapse = ",")
}
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" }
dt <- data.frame("Project" = project,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.TumoralSamples" = tumor,
"N.NormalSamples" = normal,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Type" = TTTtype,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = Normalization.Method,
"Sequençing.DeepenessPerMillionReads" = Sequençing.DeepenessPerMillionReads,
"Sequençing.LengthPer.pb" = Sequençing.LengthPer.pb,
"Sequençing.Run" = Sequençing.Run,
"Sequençing.Platform" =Sequençing.Platform ,
"First.Author" = First.Author,
"Article.DOI" = DOI,
row.names = project)
message("Adding to data bases : ")
print(dt)
fp <- paste(c(Local.Data.base.Path,Databasename), collapse = "/")
if(file.exists(fp)){
x <-  as.data.frame(fread(fp))
rownames(x) <- x$Project
if(project%in%rownames(x)){
message(paste(project,"already existing in database. Reactualising database"))
x[project,] <- dt
} else { x <- rbind(x,dt) }
write.table(x,fp,row.names = F, sep = "\t",dec = "." )
} else {
write.table(dt,fp,row.names = F, sep = "\t",dec = "." )
}
}
#Step 8 :
CheckLocalDatabase(Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = "Microarray",
Sequençing.Platform = "Illumina HG-U133_Plus_2" ,
First.Author = "	Gao H",
DOI = "10.1038/nm.3954",
project = project)
all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]
)
#' @param Sequençing.LengthPer.pb Defaul = NA
#' @param Sequençing.Platform Defaul = NA
#' @param First.Author Defaul = NA
#' @param DOI doi of article if exist. Defaul = NA
#' @param project project name
#' @return a .text tab delimited database summary
#' @import data.table
#' @export
#'
#' @examples "non"
CheckLocalDatabase <- function(Local.Data.base.Path,
Databasename = "DataBaseSummary.txt",
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = NA,
Sequençing.Platform = NA ,
First.Author = NA,
DOI = NA,
project = NA){
lf <- list.files(Local.Data.base.Path)
if(length(names(Meta)[(str_detect(names(Meta), "Sample"))])==0){ Nsamples=0 } else{
Nsamples <- nrow(Meta[[which(str_detect(names(Meta), "Sample"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Patient"))])==0){ Npatient = Nsamples}else{
Npatient <- nrow(Meta[[which(str_detect(names(Meta), "Patient"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Raw.matrix"))])==0){ RawGenes = 0}else{
RawGenes <- nrow(Meta[[which(str_detect(names(Meta), "Raw.matrix"))]])}
if(length(names(Meta)[(str_detect(names(Meta), "Normalized"))])==0){NormGenes=0}else{
NormGenes <- nrow(Meta[[which(str_detect(names(Meta), "Normalized"))]])}
tumor <- Meta[[which(str_detect(names(Meta), "Sample"))]] %>% subset(SamplePathologicalState=="Tumor")%>%nrow()
normal<- Meta[[which(str_detect(names(Meta), "Sample"))]] %>% subset(SamplePathologicalState=="Normal")%>%nrow()
if(length(which(str_detect(names(Meta), "Patient")))>0){ TTT<- Meta[[which(str_detect(names(Meta), "Patient"))]] %>% subset(TreatmentInfo=="Yes")%>%nrow()
} else { TTT <- 0 }
if( TTT==0  ){
TTTinfo <- "No"
TTTtype <- NA
} else {
TTTinfo <- "Yes"
TTTtype <- paste(unique(Meta[[which(str_detect(names(Meta), "Patient"))]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType"  , "Treatment.RT"    )]),collapse = ",")
TTTtype <- paste(unique(Meta[[which(str_detect(names(Meta), "Patient"))]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType" ,  "Treatment.RT"    )]),collapse = ",")
}
if(length(which(str_detect(names(Meta), "Patient")))>0){
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
if(all(is.na(Meta[[which(str_detect(names(Meta), "Patient"))]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" } }
else {
OSinfo <- "No"
PFSinfo <- "No" }
dt <- data.frame("Project" = project,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.TumoralSamples" = tumor,
"N.NormalSamples" = normal,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Type" = TTTtype,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = Normalization.Method,
"Sequençing.DeepenessPerMillionReads" = Sequençing.DeepenessPerMillionReads,
"Sequençing.LengthPer.pb" = Sequençing.LengthPer.pb,
"Sequençing.Run" = Sequençing.Run,
"Sequençing.Platform" =Sequençing.Platform ,
"First.Author" = First.Author,
"Article.DOI" = DOI,
row.names = project)
message("Adding to data bases : ")
print(dt)
fp <- paste(c(Local.Data.base.Path,Databasename), collapse = "/")
if(file.exists(fp)){
x <-  as.data.frame(fread(fp))
rownames(x) <- x$Project
if(project%in%rownames(x)){
message(paste(project,"already existing in database. Reactualising database"))
x[project,] <- dt
} else { x <- rbind(x,dt) }
write.table(x,fp,row.names = F, sep = "\t",dec = "." )
} else {
write.table(dt,fp,row.names = F, sep = "\t",dec = "." )
}
}
#Step 8 :
CheckLocalDatabase(Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = "Microarray",
Sequençing.Platform = "Illumina HG-U133_Plus_2" ,
First.Author = "	Gao H",
DOI = "10.1038/nm.3954",
project = project)
#Step 8 :
CheckLocalDatabase(Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = "Microarray",
Sequençing.Platform = "Illumina HG-U133_Plus_2" ,
First.Author = "Gao H",
DOI = "10.1038/nm.3954",
project = project)
Meta[[which(str_detect(names(Meta), "Sample"))]]
Meta$Sample.pheno$SamplePathologicalState <- "Tumor"
#Step 8 :
CheckLocalDatabase(Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Sequençing.DeepenessPerMillionReads= NA,
Sequençing.LengthPer.pb = NA,
Sequençing.Run = "Microarray",
Sequençing.Platform = "Illumina HG-U133_Plus_2" ,
First.Author = "Gao H",
DOI = "10.1038/nm.3954",
project = project)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
Meta$Gao.PublishedNormalized.matrix <- Meta$Gao.PublishedNormalized.matrix.matrix
Meta$Gao.PublishedNormalized.matrix.matrix <- NULL
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
library(PublicDataNorm)
library(PublicDataNorm)
library(stringr)
library(data.table)
project <- "ICGC.BTCA.JP"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path)
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
local = T,path = list.files.path$Project.RawData, name.local.file = "ICGC.BTCA.JP.RawCount")
list.files.path$Project.RawData
project <- "Gao.PDX"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
list.files.path <- DirCheck(project,path)
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
local = T,path = list.files.path$Project.RawData, name.local.file = "Gao.PublishedNormalized.matrix")
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
local = T,path = list.files.path$Project.RawData, name.local.file = "Gao.PublishedNormalized.matrix")
head(Meta[[1]][,1:5])
Meta[[1]] <- Meta[[1]][,-1]  # First colonne, geneSymbols drop off.
Meta <- AddClinic(Metadata = Meta, path = list.files.path$Project.RawData, name.local.file = "Gao.raw.clinic", merge = F)
View(Meta)
Meta[["Gao.raw.clinic"]]
Meta <- CleaningClinic(Metadata = Meta, type = "Sample Pheno", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/05Lexic")
CheckMeta(Meta)
Meta[["Sample.pheno"]]
CheckMeta(Meta)
Meta[["Gao.raw.clinic"]]
colnames(Meta$Gao.PublishedNormalized.matrix.matrix)
CheckMeta(Meta)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients' clinical data", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/05Lexic")
Meta[["Patient.clinic"]]
Meta$Gao.raw.clinic$PatientID <- Meta$Gao.raw.clinic$SamplesID
Meta <- CleaningClinic(Metadata = Meta, type = "Patients' clinical data", Lexical_colnames_path = "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent/05Lexic")
Meta[["Patient.clinic"]]
CheckMeta(Meta)
Meta$geneAnnotation <- fread(paste0(list.files.path$References,"/HG-U133_Plus_2.Affymetrix.Porbes.Annot.txt"),header = T)
rownames(Meta$geneAnnotation) <- Meta$geneAnnotation$ID
head(Meta$geneAnnotation)
CheckMeta(Meta) # can display number of common genesSymbols frome Raw or Normalized matrix in geneAnnotation file
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
GSEA <- readRDS("D:/JR_analytics_Rwork/JRA_U1149_Frendi/shiny/R/data/GSEA__Ac.Fat_OB_vs_ACOBNOB.rds")
View(GSEA)
GSEA[["C2 all"]]
View(GSEA$`C2 all`)
View(GSEA$`C2 KEGG`)
