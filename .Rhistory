if(!is.null(Cell.file)){
if(rlang::inherits_any(Cell.file, c("data.frame", "matrix"))){Cells = Cell.file} else {
if(inherits(Cell.file, "character")){
message(paste("Loading",Cell.file ))
Cells <- as.data.frame(data.table::fread(file.path(path,Cell.file)))
if("cell_name"%in%colnames(Cells)){
rownames(Cells)  = Cells$cell_name} else {
message("Cell.file has no colnames specified 'cell_name', the first collumn will be used.\n Please check file before adding cell file.")
Cells <- as.data.frame(data.table::fread(file.path(path,Cell.file),header = F))
rownames(Cells) = Cells[,1]}}else {stop("Cell.file is not a character string or an environment object as data.frame or matrix.")}}
if(!length(rownames(Cells))==length(colnames(dt))) {
message(paste("Cell.file has not the same number of cells than column of expression matrix."))
}
if(is.null(setID.cellAnnotColumn)){stop("setID.cellAnnotColumn mus be specify")}
if(inherits(setID.cellAnnotColumn,"character")){
if(!setID.cellAnnotColumn %in%colnames(Cells) ){stop(paste(setID.cellAnnotColumn, "is not found in colnames of Cell.File"))}
Cells$CellsBarcode = Cells[,setID.cellAnnotColumn]
Cells$CellsBarcode = gsub("[[:punct:]]","-", Cells$CellsBarcode)
}
if(inherits(setID.cellAnnotColumn,"numeric")){Cells$CellsBarcode = Cells[,setID.cellAnnotColumn]
Cells$CellsBarcode = gsub("[[:punct:]]","-", Cells$CellsBarcode)
}
if(is.null(colnames(dt))){
message(paste(ExpressionMatrix,"has no colnames. A Cell.csv file may be associated in raw data directory."))
if(length(rownames(Cells))==dim(dt)[2]){
message("Fetching from file.")
colnames(dt) = Cells$CellsBarcode}
}
} else {  colnames(dt) = gsub("_","-", colnames(dt))}
} else{ colnames(dt) = gsub("_","-", colnames(dt))}
if(is.null(rownames(dt))){
message(paste(ExpressionMatrix,"has no rownames A Genes.csv file may be associated in raw data directory."))}
if(!is.null(Genes.file)){
if(rlang::inherits_any(Genes.file, c("data.frame", "matrix"))){Genes =Genes.file }else {
if(inherits(Genes.file, "character")){
message(paste("Loading",Genes.file ))
Genes <- as.data.frame(data.table::fread(file.path(path,Genes.file), header = F))}
else {stop("Genes.file is not a character string or an environment object as data.frame or matrix.")}}
if(length(Genes[,1])==nrow(dt)){
rownames(dt) =  Genes[,1]
} else { stop(paste(Genes.file, "has not the same length as rows of expression matrix"))}
}
if(length(Metadata)>=1) {
l = length(Metadata)
if(!all(str_detect(names(Metadata),name))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Count")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned, "No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)} # Metadat >1
else {
Metadata$mat <-  dt
names(Metadata)[1] <- name
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c("Count")
attributes(Metadata)$Export <- "Yes"
attributes(Metadata)$Cleaned = c("No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)
} # Metadata = 0
}
Metadata =CreateDataset(project, path) %>%
AddClinicFromObject(object = clinicData,
Export = F,
setSamplesID.Column = "Patients",
setPatientID.Column = "Patients",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixSC(ExpressionMatrix = "count-matrix.txt",
Cell.file = cellAnnot,
setID.cellAnnotColumn = "cell_name",
Genes.file = NULL,
name = "rawCount")
head(Metadata$rawCount[,1:5])
Cells$CellsBarcode
#' @param force.replace set as F. T : replace an already object with the same name
#' @param setID.cellAnnotColumn  a character string or numeric : column in CellAnnot to fetch colnames from Count matrix.
#' @importFrom utils menu
#' @importFrom Matrix readMM
#' @import data.table
#' @import rlang
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddExpressionMatrixSC <- function(Metadata=NULL,
Cell.file=NULL,
Genes.file=NULL,
setID.cellAnnotColumn = NULL,
name,
ExpressionMatrix = NULL,
force.replace=F ) {
Omics.type = "Single.Cell"
path = Rawpath(Metadata)
if(is.null(Metadata)){stop("A Metadata object must be created with CreateDataset() function. See ?CreateDataset.")}
if(is.null(ExpressionMatrix)){stop("ExpressionMatrix must be a character string or an environement object.")}
if(!is.list(Metadata)){stop("Metadata should be a list.")}
if(is.null(attributes(Metadata)$Omics.type)){attributes(Metadata)$Omics.type=Omics.type}
if(!attributes(Metadata)$Omics.type==Omics.type){warning(paste("Omics.type is", Omics.type,"different than attributes(Metadata)$Omics.type",
attributes(Metadata)$Omics.type, "\nWill be replace"))
attributes(Metadata)$Omics.type = Omics.type
}
l <-length(names(Metadata))
if(inherits(ExpressionMatrix, "character")){
lf <- list.files(path)
if(length(lf)>1){print(c(message("There is more than one files in Dir :"),lf))}
if(all(str_detect(lf, ".rds|.txt|.csv|.tsv|.mtx", negate = FALSE)==F)){stop("No '*.rds' or '*.txt' or '*.csv' or '*.mtx' files in set directory. \n change path or add file")}
filepath <- paste(path,ExpressionMatrix,sep="/")
message(paste("Loading", ExpressionMatrix, "file"))
if(str_detect(ExpressionMatrix, ".rds", negate = FALSE)){
dt <- readRDS(filepath)}
else {
if(str_detect(ExpressionMatrix, ".txt", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
}  else {
if(str_detect(ExpressionMatrix, ".csv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
}else {
if(str_detect(ExpressionMatrix, ".tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath)))
if(length(dt[,1])!=length(unique( dt[,1]))) { } else {  rownames(dt) <- dt[,1]}
} else {
if(str_detect(ExpressionMatrix, ".mtx", negate = FALSE)){
dt <- readMM(filepath)
gc()
#dt = as.matrix(dt)
#gc()
} # mtx
}# tsv
}#csv
}#txt
}#rds
}#ExpressionMatrix caract
else {
if(rlang::inherits_any(ExpressionMatrix, c("data.frame", "matrix", "dgCMatrix" ,"dgTMatrix"))){
dt = ExpressionMatrix
}else { stop("Object set in ExpressionMatrix is not of class 'data.frame', 'matrix', 'dgCMatrix' ,'dgTMatrix'")}}
if("V1" %in% colnames(dt) ){dt$V1 = NULL}
if(!"CellsAnnot" %in% attributes(Metadata)$Data.Type){
if(!is.null(Cell.file)){
if(rlang::inherits_any(Cell.file, c("data.frame", "matrix"))){Cells = Cell.file} else {
if(inherits(Cell.file, "character")){
message(paste("Loading",Cell.file ))
Cells <- as.data.frame(data.table::fread(file.path(path,Cell.file)))
if("cell_name"%in%colnames(Cells)){
rownames(Cells)  = Cells$cell_name} else {
message("Cell.file has no colnames specified 'cell_name', the first collumn will be used.\n Please check file before adding cell file.")
Cells <- as.data.frame(data.table::fread(file.path(path,Cell.file),header = F))
rownames(Cells) = Cells[,1]}}else {stop("Cell.file is not a character string or an environment object as data.frame or matrix.")}}
if(!length(rownames(Cells))==length(colnames(dt))) {
message(paste("Cell.file has not the same number of cells than column of expression matrix."))
}
if(is.null(setID.cellAnnotColumn)){stop("setID.cellAnnotColumn mus be specify")}
if(inherits(setID.cellAnnotColumn,"character")){
if(!setID.cellAnnotColumn %in%colnames(Cells) ){stop(paste(setID.cellAnnotColumn, "is not found in colnames of Cell.File"))}
Cells$CellsBarcode = Cells[,setID.cellAnnotColumn]
Cells$CellsBarcode = gsub("[[:punct:]]","-", Cells$CellsBarcode)
}
if(inherits(setID.cellAnnotColumn,"numeric")){Cells$CellsBarcode = Cells[,setID.cellAnnotColumn]
Cells$CellsBarcode = gsub("[[:punct:]]","-", Cells$CellsBarcode)
}
if(is.null(colnames(dt))){
message(paste(ExpressionMatrix,"has no colnames. A Cell.csv file may be associated in raw data directory."))
if(length(rownames(Cells))==dim(dt)[2]){
message("Fetching from file.")
colnames(dt) = Cells$CellsBarcode}
} else {  colnames(dt) = gsub("_","-", colnames(dt))}
}} else{ colnames(dt) = gsub("_","-", colnames(dt))}
if(is.null(rownames(dt))){
message(paste(ExpressionMatrix,"has no rownames A Genes.csv file may be associated in raw data directory."))}
if(!is.null(Genes.file)){
if(rlang::inherits_any(Genes.file, c("data.frame", "matrix"))){Genes =Genes.file }else {
if(inherits(Genes.file, "character")){
message(paste("Loading",Genes.file ))
Genes <- as.data.frame(data.table::fread(file.path(path,Genes.file), header = F))}
else {stop("Genes.file is not a character string or an environment object as data.frame or matrix.")}}
if(length(Genes[,1])==nrow(dt)){
rownames(dt) =  Genes[,1]
} else { stop(paste(Genes.file, "has not the same length as rows of expression matrix"))}
}
if(length(Metadata)>=1) {
l = length(Metadata)
if(!all(str_detect(names(Metadata),name))==F){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt    } else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name}
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type, "Count")
attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned, "No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)} # Metadat >1
else {
Metadata$mat <-  dt
names(Metadata)[1] <- name
if(length(attributes(Metadata)$Data.Type)<length(Metadata)){
attributes(Metadata)$Data.Type <-  c("Count")
attributes(Metadata)$Export <- "Yes"
attributes(Metadata)$Cleaned = c("No")}
if(!is.null(Cell.file)){
Metadata$CellsAnnot = Cells
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "CellsAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "No")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
if(!is.null(Genes.file)){
Metadata$geneAnnotation = Genes
attributes(Metadata)$Data.Type = c(attributes(Metadata)$Data.Type, "geneAnnot")
attributes(Metadata)$Export = c(attributes(Metadata)$Export, "Yes")
attributes(Metadata)$Cleaned = c(attributes(Metadata)$Cleaned,"No")
}
return(Metadata)
} # Metadata = 0
}
Metadata =CreateDataset(project, path) %>%
AddClinicFromObject(object = clinicData,
Export = F,
setSamplesID.Column = "Patients",
setPatientID.Column = "Patients",
name ="Clinic" ,
type ="Patients") %>%
AddExpressionMatrixSC(ExpressionMatrix = "count-matrix.txt",
Cell.file = cellAnnot,
setID.cellAnnotColumn = "cell_name",
Genes.file = NULL,
name = "rawCount")
head(Metadata$rawCount[,1:5])
CheckMeta(Metadata)
#Step 5 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Metadata$Clinic)
CL <- addSeveralKeysToLexic(CL, vector = c("patientsID"="sample",
"samplesID"="sample",
"patientSampling"="site",
"samplePathologicalState"="histology",
"hadTreatment"="treated_naive",
"treatmentInfo"="treated_naive",
"publishedClassL2" = "cell_subtype",
"publishedCyclePhase"="cell_cycle_phase",
#                                        "publishedSeuratCluster" = "subclone"
"publishedCluster"="cluster") )
SL <- addSeveralKeysToLexic( SL, vector = c("patientsID"="sample",
"samplesID"="cell.name",
"tumorType"="sample_primary_met",
"patientSampling" = "Procedure",
"hadTreatment"="treated_naive",
"samplePathologicalState"="pathologic_diagnoses",
"nCells"="n_cells",
"surgeryType"= "Procedure",
"histology"="histology") )
PL = addSeveralKeysToLexic(lexic = PL,vector = c("patientsID"="Patient",
"age"="Age(y/o)",
"sex"="Gender",
"disease" ="pathologic_diagnoses",
"grade" ="pathologic_diagnoses",
"tumorLocalisation"="Location",
"hadTreatment"="treated_naive",
"treatmentInfo"="treated_naive",
"size"="Maximum Diameter(mm)",
"pT" = "TNM Classification",
"pN" = "TNM Classification",
"pM" = "TNM Classification",
"stage" ="Staging",
"surgeryType"= "Procedure",
"diabetesMellitus"="Diabetes Mellitus",
"perineuralInvasion" = "perineural invasion",
"vascularInvasion" = "vascular invasion",
"peripancreaticInfiltarion" = "peripancreatic infiltarion",
"note"="note") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
CellsLexic = CL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Clinic",
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
head(Metadata$Patients.Clinic)
head(Metadata$SamplesAnnot)
head(Metadata$Cells.Annotation)
head(Metadata$Patients.Clinic)
Metadata$Patients.Clinic$disease= gsub("PDAC", "PDAC",Metadata$Patients.Clinic$disease)
Metadata$Patients.Clinic$disease <- gsub(".*PDAC.*", "PDAC", Metadata$Patients.Clinic$disease)
Metadata$Patients.Clinic$disease <- gsub(" ", "_",sub(".*/", "", Metadata$Patients.Clinic$disease))
Metadata$Patients.Clinic$grade = gsub("well-moderately differentiated PDAC", "well_mildly_differenciated",Metadata$Patients.Clinic$grade )
Metadata$Patients.Clinic$grade = gsub("moderately-poorly differentiated PDAC", "mildly_poorly_differenciated",Metadata$Patients.Clinic$grade )
Metadata$Patients.Clinic$grade = gsub("well differentiated PDAC", "well_differenciated",Metadata$Patients.Clinic$grade )
Metadata$Patients.Clinic$grade = gsub("moderately differentiated PDAC", "mildly_differenciated",Metadata$Patients.Clinic$grade )
Metadata$Patients.Clinic$grade = gsub("poorly differentiated PDAC", "poorly_differenciated",Metadata$Patients.Clinic$grade )
Metadata$Patients.Clinic$grade <- gsub(".*normal.*", "normal",Metadata$Patients.Clinic$grade)
Metadata$Patients.Clinic$tumorLocalisation=tolower(gsub(" ", "_", Metadata$Patients.Clinic$tumorLocalisation))
Metadata$Patients.Clinic$hadTreatment <- gsub(".*NAIVE*", "FALSE",Metadata$Patients.Clinic$hadTreatment)
Metadata$Patients.Clinic$treatmentInfo=tolower(Metadata$Patients.Clinic$treatmentInfo)
Metadata$Patients.Clinic$pT <- sub("N.*", "", Metadata$Patients.Clinic$pT)
Metadata$Patients.Clinic$pN <- sub(".*(N[0-9]).*", "\\1",Metadata$Patients.Clinic$pN)
Metadata$Patients.Clinic$pM <- sub(".*(M[0-9]).*", "\\1",Metadata$Patients.Clinic$pM)
Metadata$Patients.Clinic$surgeryType = gsub("PPPD", "pylorus_preserved_pancreatoduodenectomy", Metadata$Patients.Clinic$surgeryType )
Metadata$Patients.Clinic$surgeryType = gsub("LDP", "laparoscopic_distal_pancreatectomy", Metadata$Patients.Clinic$surgeryType )
Metadata$Patients.Clinic$surgeryType = gsub("ODP", "open_distal_pancreatectomy", Metadata$Patients.Clinic$surgeryType )
Metadata$Patients.Clinic$surgeryType = gsub("LPD", "laparoscopic_pancreatoduodenectomy", Metadata$Patients.Clinic$surgeryType )
Metadata$Patients.Clinic$surgeryType = gsub("PD", "pancreatoduodenectomy", Metadata$Patients.Clinic$surgeryType )
cols <- c("diabetesMellitus","perineuralInvasion", "vascularInvasion", "peripancreaticInfiltarion")
Metadata$Patients.Clinic[cols] <- lapply(Metadata$Patients.Clinic[cols], function(x) replace(x, x == "Y", "yes"))
Metadata$Patients.Clinic[cols] <- lapply(Metadata$Patients.Clinic[cols], function(x) replace(x, x == "N", "no"))
head(Metadata$SamplesAnnot)
Metadata$SamplesAnnot$patientSampling="surgery"
Metadata$SamplesAnnot$surgeryType = gsub("PPPD", "pylorus_preserved_pancreatoduodenectomy", Metadata$SamplesAnnot$surgeryType )
Metadata$SamplesAnnot$surgeryType = gsub("LDP", "laparoscopic_distal_pancreatectomy", Metadata$SamplesAnnot$surgeryType )
Metadata$SamplesAnnot$surgeryType = gsub("ODP", "open_distal_pancreatectomy", Metadata$SamplesAnnot$surgeryType )
Metadata$SamplesAnnot$surgeryType = gsub("LPD", "laparoscopic_pancreatoduodenectomy", Metadata$SamplesAnnot$surgeryType )
Metadata$SamplesAnnot$surgeryType = gsub("PD", "pancreatoduodenectomy", Metadata$SamplesAnnot$surgeryType )
Metadata$SamplesAnnot$specimenOrgan="pancreas"
Metadata$SamplesAnnot$specimenConservation="fresh"
Metadata$SamplesAnnot$hadTreatment <- gsub(".*NAIVE*", "FALSE",Metadata$SamplesAnnot$hadTreatment)
Metadata$SamplesAnnot$technology="10x"
Metadata$SamplesAnnot$tumorType=tolower(Metadata$SamplesAnnot$tumorType)
Metadata$SamplesAnnot$samplePathologicalState <- case_when(
grepl("PDAC", Metadata$SamplesAnnot$samplePathologicalState) ~ "tumor",
grepl("normal pancreas", Metadata$SamplesAnnot$samplePathologicalState) ~ "normal",
TRUE ~ NA_character_
)
head(Metadata$Cells.Annotation)
indices=match(Metadata$Cells.Annotation$patientsID, Metadata$SamplesAnnot$patientsID)
Metadata$Cells.Annotation$patientSampling=Metadata$SamplesAnnot$patientSampling[indices]
Metadata$Cells.Annotation$specimenOrgan=Metadata$SamplesAnnot$specimenOrgan[indices]
Metadata$Cells.Annotation$specimenConservation=Metadata$SamplesAnnot$specimenConservation[indices]
Metadata$Cells.Annotation$samplePathologicalState=Metadata$SamplesAnnot$samplePathologicalState[indices]
Metadata$Cells.Annotation$hadTreatment=Metadata$SamplesAnnot$hadTreatment[indices]
Metadata$Cells.Annotation$specimenSampling=Metadata$SamplesAnnot$specimenSampling[indices]
Metadata$Cells.Annotation$traitementInfo<- ifelse(Metadata$Cells.Annotation$hadTreatment == FALSE, "naive", NA)
gc()
project <- "Lin"
path <- "E:/DataBase"# Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)
cellAnnot = as.data.frame(data.table::fread(file = file.path(Rawpath(Metadata),"Cells.csv")))
cellAnnot$cell_name = gsub("[[:punct:] ]+","-",cellAnnot$cell_name)
rownames(cellAnnot) =cellAnnot$cell_name
str(Charac.to.Num(cellAnnot))
str(cellAnnot)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setSamplesID.Column = "sample",
setPatientID.Column ="patient" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
library(Matrix)
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setSamplesID.Column = "sample",
setPatientID.Column ="patient" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
colnames(Metadata$Raw.count)[1:5]
CheckMeta(Metadata)
#Step 5 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
CL = addSeveralKeysToLexic(lexic = CL,vector = c("patientsID" = "sample",
"cellType" = "cell_type"))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("age"="age",
"sex" = "sex",
"PFSdelay"="PFS_DFS",
"disease" ="cancer_type",
"OSevent" ="OS",
"patientSampling" = "site",
"treatmentInfo" = "site",
"patientSampling" = "treated_naive",
"pT" = "AJCC_T",
"pN" = "AJCC_N",
"pM" = "AJCC_M",
"stage" = "AJCC_stage",
"size" = "size",
"grade" = "grade") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
CellsLexic = CL,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = "Clinic", #no samples annot present, just set to the same PatientAnnot name
SamplesExportname ="SamplesAnnot" ,
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
View(Metadata)
project <- "Lee"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Clinic=getGEO('GSE132465',GSEMatrix=TRUE)[["GSE132465_series_matrix.txt.gz"]]@phenoData@data
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(GEOquery)
library(Matrix)
Clinic=getGEO('GSE132465',GSEMatrix=TRUE)[["GSE132465_series_matrix.txt.gz"]]@phenoData@data
Metadata <- CreateDataset(project,"E:/DataBase") %>%
AddClinicFromObject(object = Clinic,
name = "rawsam",
type = "Patients",#alway set to this
setSamplesID.Column="title",
setPatientID.Column="patient_id:ch1",
force.replace = T)%>%
AddExpressionMatrixSC(ExpressionMatrix ="GSE132465_GEO_processed_CRC_10X_natural_log_TPM_matrix.txt.gz" ,
Cell.file = as.data.frame(data.table::fread(file.path(Rawpath(Metadata),"GSE132465_GEO_processed_CRC_10X_cell_annotation.txt.gz"))),
Genes.file =NULL ,
setID.cellAnnotColumn = "Index" ,
name = "TPM")
gc()
head(Metadata$TPM)[,1:5]
Metadata$TPM$Index=NULL
CheckMeta(Metadata)
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Clinic)
SL = addSeveralKeysToLexic(lexic = SL,vector = c("stage"="tumor stage:ch1",
"samplePathologicalState"="pathologic:ch1",
"tissue"="tissue type:ch1",
"region" = "region:ch1") )
PL = addSeveralKeysToLexic(lexic = PL,vector = c("stage"="tumor stage:ch1",
"samplePathologicalState"="pathologic:ch1",
"tissue"="tissue type:ch1",
"region" = "region:ch1") )
colnames(Metadata$CellsAnnot)
head(Metadata$CellsAnnot)
CL = addSeveralKeysToLexic(lexic = CL,vector = c("patientsID"="Patient",
"cell-Subtype"="Cell_subtype",
"samplePathologicalState"="Class" ))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="rawsam",
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
SamplesAnnotToClean = "rawsam",
SamplesExportname ="SamplesAnnot",
CellsLexic = CL,
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
CheckMeta(Metadata)
View(Metadata)
Metadata[["Cells.Annotation"]]
