setSamplesID.Column = "sample" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
CheckMeta(Metadata)
Metadata$Clinic$PatientsID
CheckMeta(Metadata)
#Step 3 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType" = "cell_type" ))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Disease" ="cancer_type "))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
gc()
CheckMeta(Metadata)
Metadata$SamplesAnnot$SamplesID
View(Metadata)
Metadata[["SamplesAnnot"]]
#' CheckMeta : Checking samples accors Metadata files
#'
#' @param Metadata a Metadata list
#'
#' @return none
#' @export
#'
#' @examples "none"
CheckMeta <- function(Metadata) {
if(is.null(Metadata)){stop("Need a Metadata List file")}
if(!is.list(Metadata)){stop("Need a Metadata List file")}
if(is.null(attributes(Metadata)$Omics.type)){attributes(Metadata)$Omics.type="NotDefine"}
if("CellsAnnot"%in%attributes(Metadata)$Data.Type){attributes(Metadata)$Omics.type="Single.Cell"}
l <-length(names(Metadata))
MetaDataN <- names(Metadata)
m <- which(attributes(Metadata)$Data.Type=="Count")
g =  which(attributes(Metadata)$Data.Type=="geneAnnot")[1]
if(!is.na(g)){geneAnnot = as.matrix(Metadata[[g]])}
if(attributes(Metadata)$Omics.type!="Single.Cell"){
c <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="Yes")
if(length(c2)>0){c=c2}
if(length(c)==0){stop("A Patients' Clinical data must be loaded.")}
PpID <- unique(Metadata[[c[1]]][,"PatientsID"])
PsID = Metadata[[c[1]]][,"SamplesID"]
PsID = unique(unlist(strsplit(PsID, ";")))
s <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
s2 <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(is_empty(s)){  s = NULL}
if(length(s2)>0){s=s2}
SsID <- unique(Metadata[[s[1]]][,"SamplesID"])
SpID <- unique(Metadata[[s[1]]][,"PatientsID"])
if(length(s)!=0){
if(attributes(Metadata)$Data.Type[s[1]]=="SamplesAnnot"){sID <- Metadata[[s[1]]][,"SamplesID"] }}
if(length(c)!=0){
if(attributes(Metadata)$Data.Type[c[1]]=="Clinic"){pID <- Metadata[[c[1]]][,"PatientsID"] }}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
c= NULL
if("Clinic" %in%attributes(Metadata)$Data.Type){
c <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="No")
c2 <- which(attributes(Metadata)$Data.Type=="Clinic" & attributes(Metadata)$Cleaned=="Yes")
if(length(c2)>0){c=c2}
if(length(c)==0){stop("A Patients' Clinical data must be loaded")}
PpID <- unique(Metadata[[c[1]]][,"PatientsID"])
PsID = Metadata[[c[1]]][,"SamplesID"]
PsID = unique(unlist(strsplit(PsID, ";")))
}
if("SamplesAnnot" %in%attributes(Metadata)$Data.Type ){
s <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
s2 <- which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(s2)>0){s=s2}
SsID <- unique(Metadata[[s[1]]][,"SamplesID"])
SpID <- unique(Metadata[[s[1]]][,"PatientsID"])
}else{s=NULL}
if("CellsAnnot" %in%attributes(Metadata)$Data.Type){
cellannot <- which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned=="No")
cellannot2 <- which(attributes(Metadata)$Data.Type=="CellsAnnot" & attributes(Metadata)$Cleaned=="Yes")
if(length(cellannot2)>0){cellannot=cellannot2}
cellID <- Metadata[[cellannot[1]]][,"CellsBarcode"]
}
}
if(attributes(Metadata)$Omics.type!="Single.Cell"){
message("-------------------------")
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
if(length(ccc)>0){  message(paste("Checking SamplesID in Cleaned Metadata sub-objects from", names(Metadata)[s2[1]]))}else {
message(paste("Checking SamplesID in Metadata sub-objects from", names(Metadata)[s[1]])) }
message("-------------------------")
for (i in m){
if(length(s)>0 & length(c)<1 | length(c)>0 & length(s)>0 ){
if(all(SsID %in% colnames(Metadata[[i]]))==T) {   message(paste(MetaDataN[i]), " colnames : PASS") } else {
message(paste(MetaDataN[i]), " colnames : FAIL")
if(summary(PsID %in% colnames(Metadata[[i]]))["TRUE"]==ncol(Metadata[[i]]) ){message(paste("All samples from", MetaDataN[i],"are found in Samples or clinical annotation file."))}
message(paste("Samples not found in ", MetaDataN[i]," : "), paste0(na.omit(SsID[!SsID%in%colnames(Metadata[[i]])]),collapse = "; "))}
}
if(length(c)>0 & length(s)<1  ){
if(all(PsID %in% colnames(Metadata[[i]]))==T) {   message(paste(MetaDataN[i]), " colnames : PASS") } else {
message(paste(MetaDataN[i]), " colnames : FAIL")
if(summary(PsID %in% colnames(Metadata[[i]]))["TRUE"]==ncol(Metadata[[i]]) ){message(paste("All samples from", MetaDataN[i],"are found in Samples or clinical annotation file."))}
message(paste("Samples not found in ", MetaDataN[i]," : "), paste0(na.omit(PsID[!PsID%in%colnames(Metadata[[i]])]),collapse = "; "))}
}
}
}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
message("-------------------------")
ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")
if(length(ccc)>0 ){  message(paste("Checking  Cells barcodes and Samples/Patients correspondances in cleaned Metadata sub-objects from", names(Metadata)[c2[1]]))}else {
message(paste("Checking Cells barcodes and Samples/Patients correspondances in Metadata sub-objects from", names(Metadata)[c[1]]))}
message("-------------------------")
for (i in m){
if(all(cellID %in% colnames(Metadata[[i]]))==T) {   message(paste("All Cells barcodes in",MetaDataN[i], "colnames : PASS")) } else {
message(paste(MetaDataN[i]), " colnames : FAIL")
if(length(!cellID%in%colnames(Metadata[[i]]))>10){
mismatch = na.omit(cellID[!cellID%in%colnames(Metadata[[i]])])[1:10]
ext = paste("\n showing ten of",length(cellID[!cellID%in%colnames(Metadata[[i]])]), "not found") }else {
mismatch=na.omit(cellID[!cellID%in%colnames(Metadata[[i]])])
ext = ""}
message(paste("Cells barcodes not found in ", MetaDataN[i]," : "), paste0(mismatch,collapse = "; "),ext)}
}
}
if(!is.na(g)){
message("-------------------------")
message("Checking Matrices probes")
message("-------------------------")
for (i in m){
gene = rownames(Metadata[[i]])
sel = which(geneAnnot %in% gene)
col = which(apply(geneAnnot, 2, function(x) which(x %in% geneAnnot[sel[1]]))>0)[1]
if(all(str_detect(gene, "ENSG")==T)) { message(paste(names(Metadata[i]), " gene probes as ENSEMBL"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(is.numeric(as.numeric(gene))))  { message(paste(names(Metadata[i]), " gene probes as ENTREZ gene id"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(str_detect(gene, "ILMN_")==T)) { message(paste(names(Metadata[i]), " gene probes as Illumina Bead Array Probes"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else{
if(all(str_detect(gene, "_at")==T)) { message(paste(names(Metadata[i]), " gene probes as Illumina Microarray Probes"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(length(which(gene%in%geneAnnot$GeneSymbol))>1)   {
message(paste(names(Metadata[i]), " gene probes as genes Symbols"))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
} else {
if(all(gene%in%geneAnnot)) { message(paste(names(Metadata[i]), " gene probes manualy entered from published data."))
suma <- summary(gene%in%geneAnnot[,col])
if(length(suma)==3) {  names(suma) <- c("Mode", "Gene not found", "Found")  }
if(length(suma)==2 & names(suma)[2]=="TRUE") {  names(suma) <- c("Mode", "Found") }
if(length(suma)==2 & names(suma)[2]=="FALSE") {  names(suma) <- c("Mode", "Gene not found") }
print(suma)
}
}}}}}}}
message("-------------------------")
if(length(c)>0){ccc = which(attributes(Metadata)$Cleaned=="Yes"& attributes(Metadata)$Data.Type!="geneAnnot")}
mm =  which(attributes(Metadata)$Data.Type=="Count")
if(length(ccc)>0){  message(paste("Checking Common Patients from", names(Metadata)[c[1]] ,"in other Cleaned Samples or Patients annotations data."))
}else {
message(paste("Checking Common Patients from", names(Metadata)[c[1]] ,"in other Samples or Patients annotations data."))}
message("-------------------------")
if(attributes(Metadata)$Omics.type!="Single.Cell"){
for (i in c(c[-1],s)){
target = unique(Metadata[[i[1]]][,"PatientsID"])
if(length(which(PpID %in% as.matrix(Metadata[[i[1]]])))==length(PpID)){message(paste(MetaDataN[i]), " : PASS") }
if(length(which(PpID %in% as.matrix(Metadata[[i[1]]])))<length(PpID)){
message(paste(MetaDataN[i]), " : FAIL")
message(paste("PatientsID not found in ", MetaDataN[i]," : "), paste0(na.omit(PpID[!PpID%in%target]),collapse = "; "))
}
}}
if(attributes(Metadata)$Omics.type=="Single.Cell"){
for (i in c(c,s)){
message(paste0("PatientsID from '", names(Metadata)[i],"', in CellsAnnotation object"))
tot=0
for (z in unique(Metadata[[i]][,"PatientsID"])) {
z = gsub("[[:punct:]]","-",z)
if(str_detect(pattern = paste0('[a-zA-Z]'),z)){ pattern = paste0(z,"-")}else {pattern=  paste0('[a-zA-Z]',z,"-")}
t = summary(str_detect(pattern = paste0(pattern,"\\b"), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
message("Total = " , tot,"/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")}
if(length(ccc)>0){ p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="Yes")}else{
p =  which(attributes(Metadata)$Data.Type=="SamplesAnnot" & attributes(Metadata)$Cleaned=="No")
}
if(length(p)>0){
for (i in p){
message(paste0("SamplesID from '", names(Metadata)[i],"', in CellsAnnotation object :"))
tot=0
for (z in Metadata[[i]][,"SamplesID"]) {
z = gsub("[[:punct:]]","-",z)
if(str_detect(pattern = paste0('[a-zA-Z]'),z)){ pattern = paste0(z,"-")}else {  paste0('[a-zA-Z]',z,"-")}
t = summary(str_detect(pattern = paste0(pattern,"\\b"), cellID))["TRUE"][1]
if(is.na(as.numeric(t))){ t = 0}
tot=tot+as.numeric(t)
}
message("Total = " , tot, "/",length(cellID), "\n Passed Checkpoint? ", tot/length(cellID)==1)
message("-------------------------")
}
}
}
}
CheckMeta(Metadata)
project <- "Steele"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path) # if all are TRUE ; next step can be done
Metadata <- CreateDataset(project,path) %>% # if  are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="patient" ,
setSamplesID.Column = "sample" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
colnames(Metadata$count)[1:5]
head(Metadata$CellsAnnot)
Metadata$Clinic
Metadata$Clinic$V1=NULL
CheckMeta(Metadata)
#Step 3 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Metadata$Clinic)
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType" = "cell_type" ))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Disease" ="cancer_type "))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
gc()
CheckMeta(Metadata)
Metadata = ExportTSV(Metadata)
gc()
attributes(Metadata)
AddLocalDatabase(Metadata = Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x V2 HiSeq4000" ,
Run.spec = NA,
First.Author = "Steele N.",
DOI = "10.1038/s43018-020-00121-4",
Comment = NA,
User = "JR-Analytics")
project <- "Lin"
path <- "E:/DataBase"# Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)
cellAnnot = as.data.frame(data.table::fread(file = file.path(Rawpath(Metadata),"Cells.csv")))
cellAnnot$cell_name = gsub("[[:punct:] ]+","-",cellAnnot$cell_name)
rownames(cellAnnot) =cellAnnot$cell_name
cellAnnot = as.data.frame(data.table::fread(file = file.path(Rawpath(Metadata),"Cells.csv")))
rownames(cellAnnot) =cellAnnot$cell_name
Metadata <- CreateDataset(project,path) %>% # if all are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setSamplesID.Column = "sample",
setPatientID.Column ="patient" ) %>%
AddExpressionMatrixSC(ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cellAnnot , # you cann pass cell annotation file as an object
setID.cellAnnotColumn = "cell_name",
Genes.file ="Genes.txt",
name = "Raw.count",
force.replace = F)
colnames(Metadata$Raw.count)[1:5]
gc()
CheckMeta(Metadata)
head(Metadata$CellsAnnot)
#Step 5 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
CL = addSeveralKeysToLexic(lexic = CL,vector = c("PatientsID" = "sample",
"CellType" = "cell_type"))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Age"="age",
"Sex" = "sex",
"PFSdelay"="PFS_DFS",
"Disease" ="cancer_type",
"OSevent" ="OS",
"PatientSampling" = "site",
"TreatmentInfo" = "site",
"PatientSampling" = "treated_naive",
"pT" = "AJCC_T",
"pN" = "AJCC_N",
"pM" = "AJCC_M",
"Stage" = "AJCC_stage",
"Size" = "size",
"Grade" = "grade") )
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
CellsLexic = CL,
SamplesLexic = SL, # setting Samples Lexic for Cells Annotation
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot" ,force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
Metadata$Patients.Clinic$Grade = gsub("W-MD", "Well-Mildly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("M-PD", "Mildly-Poorly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("WD", "Well differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("MD", "Mildly differenciated",Metadata$Patients.Clinic$Grade )
Metadata$Patients.Clinic$Grade = gsub("PD", "Poorly differenciated",Metadata$Patients.Clinic$Grade )
CheckMeta(Metadata)
gc()
# Step 5 : LocalDatabase implementation
MetaData=ExportTSV(Metadata)
gc()
attributes(Metadata)
AddLocalDatabase(Metadata,
Normalization.Method = NA,
Technology = "SingleCell",
Platform = "10x V2 HiSeq4000" ,
Run.spec = "",
First.Author = "Lin W.",
DOI = "10.1186/s13073-020-00776-9",
Comment = NA,
User = "JR-Analytics")
?require
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
project <- "Steele"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path) # if all are TRUE ; next step can be done
Metadata <- CreateDataset(project,path) %>% # if  are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="patient" ,
setSamplesID.Column = "sample" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
colnames(Metadata$count)[1:5]
head(Metadata$CellsAnnot)
Metadata$Clinic$V1=NULL
head(Metadata$Clinic)
CheckMeta(Metadata)
head(Metadata$CellsAnnot)
head(Metadata$Clinic)
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
#Step 3 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Metadata$Clinic)
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType" = "cell_type" ))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Disease" ="cancer_type "))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
gc()
CheckMeta(Metadata)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(GEOquery)
library(Matrix)
project <- "Carpenter"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
Clinic=getGEO('GSE226829',GSEMatrix=TRUE)[["GGSE226829_series_matrix.txt.gz"]]@phenoData@data
Clinic=getGEO('GSE226829',GSEMatrix=TRUE)[["GGSE226829_series_matrix.txt.gz"]]
Clinic=getGEO('GSE226829',GSEMatrix=TRUE)[["GGSE226829_series_matrix.txt.gz"]]@phenoData@data
Clinic=getGEO('GSE226829',GSEMatrix=TRUE)
View(Clinic)
Clinic$GSE226829_series_matrix.txt.gz
Clinic$GSE226829_series_matrix.txt.gz@phenoData
Clinic$GSE226829_series_matrix.txt.gz@phenoData@data
Clinic = Clinic@phenoData@data
Clinic = Clinic$GSE226829_series_matrix.txt.gz@phenoData@data
Clinic=getGEO('GSE229413',GSEMatrix=TRUE)[["GSE229413_series_matrix.txt.gz"]]@phenoData@data
View(Clinic)
library(PublicDataNorm)
library(stringr)
library(purrr)
library(dplyr)
library(GEOquery)
library(Matrix)
project <- "Carpenter"
path <- "E:/DataBase" # Change parent path parent matching your own Dir configuration
Metadata <- CreateDataset(project,path)# if all are TRUE ; next step can be done
project <- "Steele"
path <- "E:/DataBase"
Metadata <- CreateDataset(project,path) %>% # if  are TRUE ; next step can be done
AddClinicFromFile(
ClinicFile = "Meta-data.csv",
name = "Clinic",
type = "Patients",
setPatientID.Column ="patient" ,
setSamplesID.Column = "sample" ) %>%
AddExpressionMatrixSC(
ExpressionMatrix ="Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
setID.cellAnnotColumn = "cell_name",
Genes.file = "Genes.txt",
name = "count",
force.replace = F)
colnames(Metadata$count)[1:5]
head(Metadata$CellsAnnot)
head(Metadata$Clinic)
Metadata$Clinic$V1=NULL
CheckMeta(Metadata)
#Step 3 : Cleaning clinical data
PL = CreateLexic(Metadata,type = "PatientsLexic")
SL = CreateLexic(Metadata,type = "SamplesLexic")
CL = CreateLexic(Metadata,type = "CellsLexic")
colnames(Metadata$Clinic)
CL = addSeveralKeysToLexic(lexic = CL,vector = c("CellType" = "cell_type" ))
PL = addSeveralKeysToLexic(lexic = PL,vector = c("Disease" ="cancer_type "))
Metadata = CleaningData(Metadata,
PatientsLexic = PL,
PatientsAnnotToClean ="Clinic" ,
PatientsExportname ="Patients.Clinic" ,
SamplesLexic = SL,
CellsLexic = CL,
SamplesAnnotToClean = NULL,
SamplesExportname ="SamplesAnnot",
force.replace = T,
FilterSP = F, #set T, will filter with Samples/patients found in Clinic and cells annotation object and expression matrices.
keep.all.column = F, #here will add automatically a second patient or samples Annotation.
FilterGenes = F #will subset expression matrices and gene annotation with common genes
)
gc()
CheckMeta(Metadata)
Metadata = ExportTSV(Metadata)
gc()
attributes(Metadata)
attributes(Metadata)
attributes(Metadata)$Version
