#'
#' @examples "non"
CheckLocalDatabase <- function(Meta,
Local.Data.base.Path,
Normalization.Method = NA,
Technology = NA,
Platform = NA,
Run.spec=NA ,
First.Author = NA,
DOI = NA,
project = NA,
Comment = NA,
User= NA){
Databasename = "DataBaseSummary.txt"
lf <- list.files(Local.Data.base.Path)
if(is.null(attributes(Meta)$Version)){ Version = "V1"} else {   Version <- attributes(Meta)$Version }
NBS <- which(attributes(Meta)$Data.Type=="Samples.Clinical.data" & attributes(Meta)$Raw.data=="No")
NBP <- which(attributes(Meta)$Data.Type=="Patient.Clinical.data" & attributes(Meta)$Raw.data=="No")
if(length(NBS)==0){ Nsamples=0 } else{
Nsamples <- nrow(Meta[[NBS]])}
if(length(NBP)==0){ Npatient = Nsamples}else{
Npatient <- nrow(Meta[[NBP]])}
if(length(which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="Yes" ))==0){ RawGenes = 0} else {
NB.raw.mat<- which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="Yes" )
RawGenes <- nrow(Meta[[NB.raw.mat[1]]])}
if(length(which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="No" ))==0){NormGenes=0}else{
NB.norm.mat <- which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="No")
NormGenes <- nrow(Meta[[NB.norm.mat[1]]])}
if(all(is.na(Meta[[NBS]]$SamplePathologicalState))){tumor <- nrow(Meta[[NBS]]) } else {
tumor <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"TUM|PRIMARY")))
if(tumor==0 & !all(is.na(Meta[[NBS]]$SamplePathologicalState))) {
normal <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"NORM|HEAL")))
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
na <- length(which(is.na(Meta[[NBS]]$SamplePathologicalState)))
tumor = nrow(Meta[[NBS]])-normal-met-na
}
}
if(all(is.na(Meta[[NBS]]$SamplePathologicalState))){normal <- 0 } else {
normal<- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"NORM|HEAL")))
if(normal==0 & !all(is.na(Meta[[NBS]]$SamplePathologicalState))) {
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
na <- length(which(is.na(Meta[[NBS]]$SamplePathologicalState)))
normal = nrow(Meta[[NBS]])-tumor-met-na
}
}
if(length(NBP)>0){ TTT<- Meta[[NBP]] %>% subset(TreatmentInfo=="Yes")%>%nrow()
} else { TTT <- 0 }
if( TTT==0  ){
TTTinfo <- "No"
TTTtype <- NA
} else {
TTTinfo <- "Yes"
TTTtype <- paste(unique(Meta[[NBP]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType"  , "Treatment.RT"    )]),collapse = ",")
TTTtype <- paste(unique(Meta[[NBP]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType" ,  "Treatment.RT"    )]),collapse = ",")
}
if(length(NBP)>0){
if(all(is.na(Meta[[NBP]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
if(all(is.na(Meta[[NBP]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" } }
else {
OSinfo <- "No"
PFSinfo <- "No" }
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
dt <- data.frame("Project" = project,
"Version" = Version,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.TumoralSamples" = tumor,
"N.NormalSamples" = normal,
"N.Metastasis" = met,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Type" = TTTtype,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = Normalization.Method,
"Technology" = Technology,
"Platform" = Platform,
"Run.spec"=Run.spec ,
"First.Author" = First.Author,
"Article.DOI" = DOI,
"Comment" = Comment,
"User"= User)
message("Adding to data bases : ")
fp <- paste(c(Local.Data.base.Path,Databasename), collapse = "/")
if(file.exists(fp)){
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
if(length(x$Project[x$Project==project])!=0){
if(!all((x$Project[x$Project==project]==project & x$Version[x$Project==project]==attributes(Meta)$Version)==F)){
message(paste(project,"already existing in database. Reactualising database"))
proj <- which(x$Project==project)
row <- which(x$Version[proj]==attributes(Meta)$Version)
x[row,] <- dt
} else { x <- rbind(x,dt)
print(dt)
}}
if(length(x$Project[x$Project==project])==0){ x <- rbind(x,dt)
print(dt)
}
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
if(length(version)==1){
if(is.na(version)){version = "V1"}}
if(!all(is.na(version))){
if(!all(x$Version[x$Project==project]%in%version)){
proj <- which(x$Project==project)
outV <- which(!x[proj,]$Version%in%version)
message(paste("Project",project   ,"version",outV," is missing in 04VerifiedDataset. Removing from DataBaseSummary.txt\n"))
x <- x[-proj[outV],]
}}
x <- x[order(x$Project,x$Version,decreasing = F),]
write.table(x,fp,row.names = F, sep = "\t",dec = "." )
} else {
print(dt)
write.table(dt,fp,row.names = F, sep = "\t",dec = "." )
}
}
project <- "Moffit"
path <- "D:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
Meta <- list()
Meta <- AddExpressionMatrix(Metadata = Meta,
Raw = F, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file ="Moffit.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F)
head(Meta$Normalized.expression.matrix[,1:5])
rownames(Meta$Normalized.expression.matrix) <- Meta$Normalized.expression.matrix$V1
Meta$Normalized.expression.matrix$V1 <- NULL
head(Meta$Normalized.expression.matrix[,1:5])
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "raw.clinic",
type = "Samples",
force.replace = T,
merge = F,
name.local.file = "Moffit.SamplesAnnotation.txt.gz")
attributes(Meta)
CheckMeta(Meta)
head(Meta$raw.clinic)
LexicData(list.files.path) # load PatientLexic and SampelsLexic from 02Processes.
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
LexicData(list.files.path) # load PatientLexic and SampelsLexic from 02Processes.
list.files.path <- DirCheck(project,path) # if all are TRUE ; next step can be done
Meta <- AddExpressionMatrix(Metadata = Meta,
Raw = F, # True = Raw data. F = Normalized
local = T,
path = list.files.path$Project.RawData,
name.local.file ="Moffit.Normalized.expression.txt.gz",
name = "Normalized.expression",
force.replace = F)
head(Meta$Normalized.expression.matrix[,1:5])
rownames(Meta$Normalized.expression.matrix) <- Meta$Normalized.expression.matrix$V1
Meta$Normalized.expression.matrix$V1 <- NULL
head(Meta$Normalized.expression.matrix[,1:5])
Meta <- AddClinic(Metadata = Meta,
path = list.files.path$Project.RawData,
name = "raw.clinic",
type = "Samples",
force.replace = T,
merge = F,
name.local.file = "Moffit.SamplesAnnotation.txt.gz")
LexicData(list.files.path) # load PatientLexic and SampelsLexic from 02Processes.
Meta <- CleaningClinic(Metadata = Meta, type = "Sample", list.files.path = list.files.path, project = project, ForceCleaning = F)
Meta <- CleaningClinic(Metadata = Meta, type = "Patients", list.files.path = list.files.path, project = project, ForceCleaning = T)
cc <- na.omit(CheckCleaning(Meta))
Meta$Patient.clinic$OSdelay <- as.numeric(Meta$Patient.clinic$OSdelay)
Meta$Patient.clinic$OSevent <- as.numeric(Meta$Patient.clinic$OSevent)
Meta$Sample.pheno$SampleType <- ifelse(is.na(Meta$Sample.pheno$SamplePathologicalState),yes = "Cell.lines",no = "Tissue")
Meta$Patient.clinic$Tumoral.Subtypes <- ifelse(Meta$Patient.clinic$Tumoral.Subtypes==2, yes = "Basal",
ifelse(Meta$Patient.clinic$Tumoral.Subtypes==1,"Classic", NA))
Meta$Sample.pheno$Tumoral.Subtypes <- ifelse(Meta$Sample.pheno$Tumoral.Subtypes==2, yes = "Basal",
ifelse(Meta$Sample.pheno$Tumoral.Subtypes==1,"Classic", NA))
Meta$Sample.pheno$Stromal.Subtypes <- ifelse(Meta$Sample.pheno$Stromal.Subtypes==2, yes = "Normal",
ifelse(Meta$Sample.pheno$Stromal.Subtypes==1,"Low",
ifelse(Meta$Sample.pheno$Stromal.Subtypes==3,"Activated", NA)))
Meta$Patient.clinic$Stromal.Subtypes <- ifelse(Meta$Patient.clinic$Stromal.Subtypes==2, yes = "Normal",
ifelse(Meta$Patient.clinic$Stromal.Subtypes==1,"Low",
ifelse(Meta$Patient.clinic$Stromal.Subtypes==3,"Activated", NA)))
Meta$Sample.pheno$Organ.Of.Prelevement <- Meta$Sample.pheno$TissueSampling
Meta$Patient.clinic$Organ.Of.Prelevement <- Meta$Patient.clinic$PatientSampling
Meta$Patient.clinic$PatientSampling <- ifelse(is.na(Meta$Patient.clinic$SamplesInfo),yes = "Cell.lines",no = "Tissue")
Meta$Patient.clinic <- subset(Meta$Patient.clinic,PatientSampling!="Cell.lines" )
Meta <- AddgeneAnnot(Meta = Meta , gtf.file.dir =list.files.path$References ,
gtf.files = "gencode.v33.annotation.gtf.gz",
force.replace = T)
Meta$geneAnnotation <- as.data.frame(Meta$geneAnnotation)
CheckMeta(Meta)
fp <- paste(c(list.files.path$Parent,"DataBaseSummary.txt"), collapse = "/")
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
View(x)
length(x$Project[x$Project==project])!=0
!all((x$Project[x$Project==project]==project & x$Version[x$Project==project]==attributes(Meta)$Version)==F)
attributes(Meta)$Version)==F
attributes(Meta)$Version
attributes(Meta)$Version <- "V2"
x$Project[x$Project==project]==project & x$Version[x$Project==project]==attributes(Meta)$Version)==F
x$Project[x$Project==project]==project & x$Version[x$Project==project]==attributes(Meta)$Version
x$Project[x$Project==project]==project
View(x)
x$Version[x$Project==project]==attributes(Meta)$Version
!all((x$Project[x$Project==project]==project & x$Version[x$Project==project]==attributes(Meta)$Version)==F)
proj <- which(x$Project==project)
row <- which(x$Version[proj]==attributes(Meta)$Version)
row
dt <- x[2,]
dt[1,21] <- "Reactualised"
length(x$Project[x$Project==project])==0
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
df
df$Filenames
filename2
version
View(x)
if(length(version)==1){
if(is.na(version)){version = "V1"}}
!all(is.na(version))
!all(x$Version[x$Project==project]%in%version)
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "Microarray",
Platform = "Agilent" ,
Run.spec = "whole-genome 4x44K DNA",
First.Author = "Moffit R.A.",
DOI = "10.1038/ng.3398.",
project = project,
Comment = "17 Cell lines",
User = "JR-Analytics")
fp <- paste(c(list.files.path$Parent,"DataBaseSummary.txt"), collapse = "/")
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
attributes(Meta)$Version
length(x$Project[x$Project==project])!=0
attributes(Meta)$Version <- "V2"
x[2,]
View(x)
dt <- x[4,]
dt[1,21] <- "Reactualised"
length(x$Project[x$Project==project])!=0
!all((x$Project[x$Project==project]==project & x$Version[x$Project==project]==attributes(Meta)$Version)==F)
proj <- which(x$Project==project)
row <- which(x$Version[proj]==attributes(Meta)$Version)
row
length(x$Project[x$Project==project])==0
x$Project[x$Project==project]
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
length(version)
length(version)==1
is.na(version)
version
df$Filenames
!all(is.na(version))
!all(x$Version[x$Project==project]%in%version)
proj <- which(x$Project==project)
outV <- which(!x[proj,]$Version%in%version)
message(paste("Project",project   ,"version",outV," is missing in 04VerifiedDataset. Removing from DataBaseSummary.txt\n"))
ExportCSV(MetaData = Meta, list.files.path = list.files.path,project = project)
fp <- paste(c(list.files.path$Parent,"DataBaseSummary.txt"), collapse = "/")
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
attributes(Meta)$Version
View(x)
dt <- x[4,]
dt[1,21] <- "Reactualised"
length(x$Project[x$Project==project])!=0
!all((x$Project[x$Project==project]==project & x$Version[x$Project==project]==attributes(Meta)$Version)==F)
x$Project[x$Project==project]==project
x$Project[x$Project==project]
x$Version[x$Project==project]==attributes(Meta)$Version)
attributes(Meta)
x$Version[x$Project==project]==attributes(Meta)$Version
proj <- which(x$Project==project)
row <- which(x$Version[proj]==attributes(Meta)$Version)
row
x[row,] <- dt
length(x$Project[x$Project==project])==0
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
length(version)==1
!all(is.na(version))
!all(x$Version[x$Project==project]%in%version)
proj <- which(x$Project==project)
outV <- which(!x[proj,]$Version%in%version)
outV
x$Project==project
fp <- paste(c(list.files.path$Parent,"DataBaseSummary.txt"), collapse = "/")
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
x$Project==project
which(x$Project==project)
row <- which(x$Version[proj]==attributes(Meta)$Version)
x$Version[proj]
proj[row]
row
which(x$Version[proj]==attributes(Meta)$Version)
x$Version[proj]
x$Version[proj]==attributes(Meta)$Version
x[proj[row],] <- dt
View(x)
length(x$Project[x$Project==project])==0
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
which(x$Project==project)
which(!x[proj,]$Version%in%version)
x[proj,]$Version%in%version
x$Project==project
!x[proj,]$Version%in%version
x[proj,]$Version
x$Project==project
proj <- which(x$Project==project)
x[proj,]$Version
x[proj,]
length(unique(x[proj,]$Project))!=1
outV <- which(!x[proj,]$Version%in%version)
message(paste("Project",project   ,"version",outV," is missing in 04VerifiedDataset. Removing from DataBaseSummary.txt\n"))
message(paste("Project",project   ,"version",x[outV,]$Version," is missing in 04VerifiedDataset. Removing from DataBaseSummary.txt\n"))
x[outV,]
which(!x[proj,]$Version%in%version)
proj
message(paste("Project",project   ,"version",x[proj[outV],]$Version," is missing in 04VerifiedDataset. Removing from DataBaseSummary.txt\n"))
View(x)
if(!all(is.na(version))){
if(!all(x$Version[x$Project==project]%in%version)){
proj <- which(x$Project==project)
if(length(unique(x[proj,]$Project))!=1){stop("Error in actualising DataBaseSummary.txt")}
outV <- which(!x[proj,]$Version%in%version)
message(paste("Project",project   ,"version",x[proj[outV],]$Version," is missing in 04VerifiedDataset. Removing from DataBaseSummary.txt\n"))
x <- x[-proj[outV],]
}}
View(x)
View(x)
proj[outV]
outV
#' @param First.Author Defaul = NA
#' @param DOI doi of article if exist. Defaul = NA
#' @param project project name
#' @param Comment specify a comment for this export
#' @param User User who export the cleaned Meta object
#' @return a .text tab delimited database summary
#' @import data.table
#' @export
#'
#' @examples "non"
CheckLocalDatabase <- function(Meta,
Local.Data.base.Path,
Normalization.Method = NA,
Technology = NA,
Platform = NA,
Run.spec=NA ,
First.Author = NA,
DOI = NA,
project = NA,
Comment = NA,
User= NA){
Databasename = "DataBaseSummary.txt"
lf <- list.files(Local.Data.base.Path)
if(is.null(attributes(Meta)$Version)){ Version = "V1"} else {   Version <- attributes(Meta)$Version }
NBS <- which(attributes(Meta)$Data.Type=="Samples.Clinical.data" & attributes(Meta)$Raw.data=="No")
NBP <- which(attributes(Meta)$Data.Type=="Patient.Clinical.data" & attributes(Meta)$Raw.data=="No")
if(length(NBS)==0){ Nsamples=0 } else{
Nsamples <- nrow(Meta[[NBS]])}
if(length(NBP)==0){ Npatient = Nsamples}else{
Npatient <- nrow(Meta[[NBP]])}
if(length(which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="Yes" ))==0){ RawGenes = 0} else {
NB.raw.mat<- which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="Yes" )
RawGenes <- nrow(Meta[[NB.raw.mat[1]]])}
if(length(which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="No" ))==0){NormGenes=0}else{
NB.norm.mat <- which(attributes(Meta)$Data.Type=="Expression.Matrix" & attributes(Meta)$Raw.data=="No")
NormGenes <- nrow(Meta[[NB.norm.mat[1]]])}
if(all(is.na(Meta[[NBS]]$SamplePathologicalState))){tumor <- nrow(Meta[[NBS]]) } else {
tumor <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"TUM|PRIMARY")))
if(tumor==0 & !all(is.na(Meta[[NBS]]$SamplePathologicalState))) {
normal <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"NORM|HEAL")))
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
na <- length(which(is.na(Meta[[NBS]]$SamplePathologicalState)))
tumor = nrow(Meta[[NBS]])-normal-met-na
}
}
if(all(is.na(Meta[[NBS]]$SamplePathologicalState))){normal <- 0 } else {
normal<- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"NORM|HEAL")))
if(normal==0 & !all(is.na(Meta[[NBS]]$SamplePathologicalState))) {
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
na <- length(which(is.na(Meta[[NBS]]$SamplePathologicalState)))
normal = nrow(Meta[[NBS]])-tumor-met-na
}
}
if(length(NBP)>0){ TTT<- Meta[[NBP]] %>% subset(TreatmentInfo=="Yes")%>%nrow()
} else { TTT <- 0 }
if( TTT==0  ){
TTTinfo <- "No"
TTTtype <- NA
} else {
TTTinfo <- "Yes"
TTTtype <- paste(unique(Meta[[NBP]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType"  , "Treatment.RT"    )]),collapse = ",")
TTTtype <- paste(unique(Meta[[NBP]][,c("Treatment.AdjType"  ,    "Treatment.NeoAdjType" ,  "Treatment.RT"    )]),collapse = ",")
}
if(length(NBP)>0){
if(all(is.na(Meta[[NBP]]$OSdelay))){ OSinfo <- "No" } else { OSinfo <- "Yes" }
if(all(is.na(Meta[[NBP]]$PFSdelay ))){ PFSinfo <- "No" } else { PFSinfo <- "Yes" } }
else {
OSinfo <- "No"
PFSinfo <- "No" }
met <- length(which(str_detect(toupper(Meta[[NBS]]$SamplePathologicalState),"MET")))
dt <- data.frame("Project" = project,
"Version" = Version,
"Date.of.Data.Norm" = Sys.Date(),
"N.Patients" = Npatient,
"N.Samples" = Nsamples,
"N.TumoralSamples" = tumor,
"N.NormalSamples" = normal,
"N.Metastasis" = met,
"Overall.Survival" =OSinfo ,
"Progression.Free.Survival" = PFSinfo,
"Treatment.Information" = TTTinfo,
"Treatment.Type" = TTTtype,
"N.RawGenes" = RawGenes,
"N.NormalizedGenes"=NormGenes,
"Normalization.Method" = Normalization.Method,
"Technology" = Technology,
"Platform" = Platform,
"Run.spec"=Run.spec ,
"First.Author" = First.Author,
"Article.DOI" = DOI,
"Comment" = Comment,
"User"= User)
message("Adding to data bases : ")
fp <- paste(c(Local.Data.base.Path,Databasename), collapse = "/")
if(file.exists(fp)){
x <-  as.data.frame(data.table::fread(fp))
x <- x[order(x$Project,x$Version,decreasing = F),]
if(length(x$Project[x$Project==project])!=0){
if(!all((x$Project[x$Project==project]==project & x$Version[x$Project==project]==attributes(Meta)$Version)==F)){
message(paste(project,"already existing in database. Reactualising database"))
proj <- which(x$Project==project)
row <- which(x$Version[proj]==attributes(Meta)$Version)
x[proj[row],] <- dt
} else { x <- rbind(x,dt)
print(dt)
}}
if(length(x$Project[x$Project==project])==0){ x <- rbind(x,dt)
print(dt)
}
LF <- list.files(list.files.path$Propject.VerifiedDataset)
if(length(LF)!=0){
df <- file.info(list.files(list.files.path$Propject.VerifiedDataset, full.names = T))
df$Filenames <- unlist(lapply(str_split(rownames(df),paste0(project,"/")),"[[",2))
filename2 <- unlist(lapply(str_split( df$Filenames ,".csv"),"[[",1))
version <- unique(str_extract(filename2,"V[0-9]*"))
}
if(length(version)==1){
if(is.na(version)){version = "V1"}}
if(!all(is.na(version))){
if(!all(x$Version[x$Project==project]%in%version)){
proj <- which(x$Project==project)
if(length(unique(x[proj,]$Project))!=1){stop("Error in actualising DataBaseSummary.txt")}
outV <- which(!x[proj,]$Version%in%version)
message(paste("Project",project   ,"version",x[proj[outV],]$Version," is missing in 04VerifiedDataset. Removing from DataBaseSummary.txt\n"))
x <- x[-proj[outV],]
}}
x <- x[order(x$Project,x$Version,decreasing = F),]
write.table(x,fp,row.names = F, sep = "\t",dec = "." )
} else {
print(dt)
write.table(dt,fp,row.names = F, sep = "\t",dec = "." )
}
}
CheckLocalDatabase(Meta = Meta,
Local.Data.base.Path = list.files.path$Parent,
Normalization.Method = NA,
Technology = "Microarray",
Platform = "Agilent" ,
Run.spec = "whole-genome 4x44K DNA",
First.Author = "Moffit R.A.",
DOI = "10.1038/ng.3398.",
project = project,
Comment = "17 Cell lines",
User = "JR-Analytics")
library(PublicDataNorm)
