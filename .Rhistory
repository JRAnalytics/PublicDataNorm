samples <- colnames(Metadata[[zz]])
message("Found Samples :")
print(summary(samples%in%object[,ExpressionMatrixIdColumn]))
message("Unfound Samples :")
print(samples[!samples%in%object[,ExpressionMatrixIdColumn]])
return(Metadata)
}
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = c("specimen.PACA-AU.tsv.gz","donor.PACA-AU.tsv.gz"),
name = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_donor_id",
mergeBy = "icgc_donor_id",
join = "left_join" ,
Export = F)
#' @param Export  TRUE or FALSE. If data to be Exported, set T.
#' @param join c("left_join", "full_join")
#' @param force.replace set as F. T : replace an already object with the same name
#' @importFrom utils menu
#' @import purrr
#' @import dplyr
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddClinicFromFile <- function(Metadata,
ClinicFile = NULL,
ExpressionMatrixIdColumn=NULL,
name= NULL,
type = c("Samples", "Patients", "Cells"),
force.replace=F,
Export = F,
mergeToClinic = NULL,
mergeBy= NULL,
join = c("left_join", "full_join")) {
if(is.null(Metadata)){stop("No meta data object found")}
if(!is.list(Metadata)){stop("Metadata should be a list.")}
if(is.null(ClinicFile)){stop("No set ClinicFile information")}
if(!inherits(ClinicFile,"character")){stop("ClinicFile is not a character string.") }
if(is.null(ExpressionMatrixIdColumn)){stop("ExpressionMatrixIdColumn must be specifierdt (i.e character string : colname of clinic to add).")}
if(length(ExpressionMatrixIdColumn)>1){stop("ExpressionMatrixIdColumn must be of length equal to one.")}
l <-length(names(Metadata))
filepath <- paste(attributes(Metadata)$File.path$Project.RawData,ClinicFile,sep="/")
if(length(filepath)>1){
if(is.null(mergeBy)){stop("For merging data from multiple loading, mergeBy='colnames' must be specified")}
clinic <- list()
count <- 0
for (i in filepath) {
if(all(str_detect(i, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
count <- count+1
if(str_detect(i, ".rds", negate = FALSE)){clinic[[count]] <- readRDS(i) }
if(str_detect(i, ".txt|.csv|.tsv", negate = FALSE)){clinic[[count]] <- suppressWarnings(as.data.frame(data.table::fread(i, na.strings = "")))}}
if(join=="full_join"){dt <- clinic %>% purrr::reduce(full_join, by=mergeBy)}
if(join=="left_join"){dt <- clinic %>% purrr::reduce(left_join, by=mergeBy)}}
if(length(filepath)==1){
if(all(str_detect(filepath, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(filepath, ".rds", negate = FALSE)){dt <- readRDS(filepath) }
if(str_detect(filepath, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath, na.strings = "")))
rownames(dt) <-    dt[,1]}
}
if (is.null(mergeToClinic)){
if(!all(str_detect(names(Metadata),name)==F)){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt
tt = which(str_detect(names(Metadata), name))
if(!type%in%c("Samples","Patients","Cells")){stop("type must be set to Samples or Patients")}
if(type == "Samples") {attributes(Metadata)$Data.Type[tt] <-  "SamplesAnnot"}
if(type == "Patients") {attributes(Metadata)$Data.Type[tt] <- "Clinic"}
if(type == "Cells") {attributes(Metadata)$Data.Type[tt] <- "CellsAnnot"}
if(Export==T){attributes(Metadata)$Export[tt] <- "Yes" } else {
attributes(Metadata)$Export[tt] <- "No" }
} else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name
if(!type%in%c("Samples","Patients", "Cells")){stop("type must be set to Samples or Patients")}
if(l==0) {   if(type == "Samples") {attributes(Metadata)$Data.Type <-  c("SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c("Clinic")}
if(type == "Cells") {attributes(Metadata)$Data.Type <-  "CellsAnnot"}
if(Export==T){attributes(Metadata)$Export <- c("Yes") } else {attributes(Metadata)$Export <- c("No") }
} else {  if(type == "Samples") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinic")}
if(type == "Cells") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"CellsAnnot")}
if(Export==T){attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") } else {attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"No") }
}}
} else {
if(!mergeToClinic%in%names(Metadata)){stop(paste("No",mergeToClinic,"found in Meta Object.\n
For merging 1 newly loaded clinical data to an already loaded file in Meta Object, firslty load one.\n
You can list a list of caracter for multiple clinical data to load at once and will be full_join."))}
if(is.null(mergeBy)){stop("For merging data, mergeBy='colnames' must be specified")}
dt <- list(Metadata[[mergeToClinic]], dt)
if(join=="full_join"){
dt <- dt %>% purrr::reduce(full_join, by=mergeBy)
}
if(join=="left_join"){
dt <- dt %>% purrr::reduce(left_join, by=mergeBy)
}
Metadata[[mergeToClinic]] <- dt
}
if(!ExpressionMatrixIdColumn%in%colnames(dt)){stop(paste(ExpressionMatrixIdColumn, "colnames is not in the added clinical data."))}
zz <- which(attributes(Metadata)$Data.Type=="Count")[1]
samples <- colnames(Metadata[[zz]])
message("Found Samples :")
print(summary(samples%in%dt[,ExpressionMatrixIdColumn]))
message("Unfound Samples :")
print(samples[!samples%in%dt[,ExpressionMatrixIdColumn]])
return(Metadata)
}
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = c("specimen.PACA-AU.tsv.gz","donor.PACA-AU.tsv.gz"),
name = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_donor_id",
mergeBy = "icgc_donor_id",
join = "left_join" ,
Export = F)
View(list.files.path)
View(Meta)
Meta[["sampleannot"]]
Meta[["Normalized.expression"]]
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = "sample.PACA-AU.tsv.gz",
mergeToClinic = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_specimen_id",
mergeBy = "icgc_specimen_id",
join = "left_join" ,
Export = F)
View(Meta)
Meta[["sampleannot"]]
Meta <- CreateDataset(project,path) # if all are TRUE ; next step can be done
Meta <- AddExpressionMatrixMArray(Metadata = Meta,
ExpressionMatrix = DFnorm,
name = "Normalized.expression")
attributes(Meta) # attributes(Meta)$Data.type has the data type information for multiple functions
head(Meta$Normalized.expression[,1:5])
rownames(Meta$Normalized.expression) <- Meta$Normalized.expression$gene_id
Meta$Normalized.expression$gene_id <- NULL
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = "sample.PACA-AU.tsv.gz",
mergeToClinic = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_donor_id",
mergeBy = "icgc_donor_id",
join = "left_join" ,
Export = F)
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = c("specimen.PACA-AU.tsv.gz","donor.PACA-AU.tsv.gz"),
name = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_donor_id",
mergeBy = "icgc_donor_id",
join = "left_join" ,
Export = F)
View(Meta)
Meta[["sampleannot"]]
View(Meta$sampleannot)
summary(duplicated(Meta$sampleannot$icgc_specimen_id))
summary(duplicated(Meta$sampleannot$icgc_donor_id))
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = "sample.PACA-AU.tsv.gz",
mergeToClinic = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_specimen_id",
mergeBy = "icgc_specimen_id",
join = "left_join" ,
Export = F)
View(Meta$sampleannot)
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = "sample.PACA-AU.tsv.gz",
mergeToClinic = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_sample_id",
mergeBy = "icgc_specimen_id",
join = "left_join" ,
Export = F)
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = c("specimen.PACA-AU.tsv.gz","donor.PACA-AU.tsv.gz"),
name = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_sample_id",
mergeBy = "icgc_donor_id",
join = "left_join" ,
Export = F,force.replace = T)
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = c("specimen.PACA-AU.tsv.gz","donor.PACA-AU.tsv.gz"),
name = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_donor_id",
mergeBy = "icgc_donor_id",
join = "left_join" ,
Export = F,force.replace = T)
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = "sample.PACA-AU.tsv.gz",
mergeToClinic = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "icgc_sample_id",
mergeBy = "icgc_specimen_id",
join = "left_join" ,
Export = F)
View(Meta)
Meta[["sampleannot"]]
Meta$sampleannot <- as.data.frame( Meta$sampleannot)
Meta$sampleannot[Meta$sampleannot==""] <- NA
attributes(Meta)
CheckMeta(Meta)
rm(DFnorm)
rm(DFnorm,list.files.path)
View(Meta$sampleannot[Meta$sampleannot$icgc_sample_id%in%colnames(Meta$Normalized.expression),])
project <- "Peng"
path <- "E:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
Meta = CreateDataset(project, path) # if all are TRUE ; next step can be done
list.files(attribute(Meta)$File.path$Project.RawData)
list.files(attributes(Meta)$File.path$Project.RawData)
Meta = AddExpressionMatrixSC(Metadata = Meta,
Export = T,
ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cells,
Genes.file = genes,
name = "count")
Meta = AddExpressionMatrixSC(Metadata = Meta,
ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = cells,
Genes.file = genes,
name = "count")
gc()
Meta = AddExpressionMatrixSC(Metadata = Meta,
ExpressionMatrix = "Exp_data_UMIcounts.mtx",
Cell.file = "Cells.csv",
Genes.file = "Genes.txt",
name = "count")
gc()
attributes(Meta)
rownames(Meta$CellsAnnot) =Meta$CellsAnnot$cell_name
rownames(Meta$CellsAnnot)[1:5]
head(Meta$CellsAnnot)
head(Meta$geneAnnot)
#' @param Export  TRUE or FALSE. If data to be Exported, set T.
#' @param join c("left_join", "full_join")
#' @param force.replace set as F. T : replace an already object with the same name
#' @importFrom utils menu
#' @import purrr
#' @import dplyr
#' @return a data.frame in the Meta Object
#' @export
#'
#' @examples "none"
AddClinicFromFile <- function(Metadata,
ClinicFile = NULL,
ExpressionMatrixIdColumn=NULL,
name= NULL,
type = c("Samples", "Patients", "Cells"),
force.replace=F,
Export = F,
mergeToClinic = NULL,
mergeBy= NULL,
join = c("left_join", "full_join")) {
if(is.null(Metadata)){stop("No meta data object found")}
if(!is.list(Metadata)){stop("Metadata should be a list.")}
if(is.null(ClinicFile)){stop("No set ClinicFile information")}
if(!inherits(ClinicFile,"character")){stop("ClinicFile is not a character string.") }
if(is.null(ExpressionMatrixIdColumn)){stop("ExpressionMatrixIdColumn must be specifierdt (i.e character string : colname of clinic to add).")}
if(length(ExpressionMatrixIdColumn)>1){stop("ExpressionMatrixIdColumn must be of length equal to one.")}
l <-length(names(Metadata))
filepath <- paste(attributes(Metadata)$File.path$Project.RawData,ClinicFile,sep="/")
if(length(filepath)>1){
if(is.null(mergeBy)){stop("For merging data from multiple loading, mergeBy='colnames' must be specified")}
clinic <- list()
count <- 0
for (i in filepath) {
if(all(str_detect(i, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
count <- count+1
if(str_detect(i, ".rds", negate = FALSE)){clinic[[count]] <- readRDS(i) }
if(str_detect(i, ".txt|.csv|.tsv", negate = FALSE)){clinic[[count]] <- suppressWarnings(as.data.frame(data.table::fread(i, na.strings = "")))}}
if(join=="full_join"){dt <- clinic %>% purrr::reduce(full_join, by=mergeBy)}
if(join=="left_join"){dt <- clinic %>% purrr::reduce(left_join, by=mergeBy)}}
if(length(filepath)==1){
if(all(str_detect(filepath, ".rds|.txt|.csv|.tsv", negate = FALSE)==F) ){stop("No '*.rds' or '*.txt' '.csv' files in set directory. \n change path or add file")}
if(str_detect(filepath, ".rds", negate = FALSE)){dt <- readRDS(filepath) }
if(str_detect(filepath, ".txt|.csv|.tsv", negate = FALSE)){
dt <- suppressWarnings(as.data.frame(data.table::fread(filepath, na.strings = "")))
rownames(dt) <-    dt[,1]}
}
if (is.null(mergeToClinic)){
if(!all(str_detect(names(Metadata),name)==F)){
message("An Object with the same name already exist in MetaObject")
if(force.replace==F){stop("set force.replace==T to subset object.")}
message("Subsetting object.")
Metadata[[name]] <- dt
tt = which(str_detect(names(Metadata), name))
if(!type%in%c("Samples","Patients","Cells")){stop("type must be set to Samples or Patients")}
if(type == "Samples") {attributes(Metadata)$Data.Type[tt] <-  "SamplesAnnot"}
if(type == "Patients") {attributes(Metadata)$Data.Type[tt] <- "Clinic"}
if(type == "Cells") {attributes(Metadata)$Data.Type[tt] <- "CellsAnnot"}
if(Export==T){attributes(Metadata)$Export[tt] <- "Yes" } else {
attributes(Metadata)$Export[tt] <- "No" }
} else { Metadata[[l+1]] <- dt
names(Metadata)[l+1] <- name
if(!type%in%c("Samples","Patients", "Cells")){stop("type must be set to Samples or Patients")}
if(l==0) {   if(type == "Samples") {attributes(Metadata)$Data.Type <-  c("SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c("Clinic")}
if(type == "Cells") {attributes(Metadata)$Data.Type <-  "CellsAnnot"}
if(Export==T){attributes(Metadata)$Export <- c("Yes") } else {attributes(Metadata)$Export <- c("No") }
} else {  if(type == "Samples") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"SamplesAnnot")}
if(type == "Patients") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"Clinic")}
if(type == "Cells") {attributes(Metadata)$Data.Type <-  c(attributes(Metadata)$Data.Type,"CellsAnnot")}
if(Export==T){attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"Yes") } else {attributes(Metadata)$Export <- c(attributes(Metadata)$Export,"No") }
}}
} else {
if(!mergeToClinic%in%names(Metadata)){stop(paste("No",mergeToClinic,"found in Meta Object.\n
For merging 1 newly loaded clinical data to an already loaded file in Meta Object, firslty load one.\n
You can list a list of caracter for multiple clinical data to load at once and will be full_join."))}
if(is.null(mergeBy)){stop("For merging data, mergeBy='colnames' must be specified")}
dt <- list(Metadata[[mergeToClinic]], dt)
if(join=="full_join"){
dt <- dt %>% purrr::reduce(full_join, by=mergeBy)
}
if(join=="left_join"){
dt <- dt %>% purrr::reduce(left_join, by=mergeBy)
}
Metadata[[mergeToClinic]] <- dt
}
if(!ExpressionMatrixIdColumn%in%colnames(dt)){stop(paste(ExpressionMatrixIdColumn, "colnames is not in the added clinical data."))}
zz <- which(attributes(Metadata)$Data.Type=="Count")[1]
samples <- colnames(Metadata[[zz]])
message("Found Samples :")
print(summary(samples%in%dt[,ExpressionMatrixIdColumn]))
message("Unfound Samples :")
print(samples[!samples%in%dt[,ExpressionMatrixIdColumn]])
return(Metadata)
}
Meta = AddClinicFromFile(Metadata = Meta,
ClinicFile = "Meta-data.csv",
ExpressionMatrixIdColumn = "sample",
name = "Raw.clinic",
type = "Patients" )
View(Meta)
rownames(Meta$Raw.clinic) = paste0(Meta$Raw.clinic[,2],"_") # pour compter n cellules dans les colnames(Count) par partient
attributes(Meta)
library(PublicDataNorm)
library(PublicDataNorm)
CreateLexic <- function(Dataset=NULL, type = c("SamplesLexic","PatientsLexic"), replaceLexic = F){
if(is.null(Dataset)){stop("Dataset is null.")}
if(!is.list(Dataset)){stop("Dataset must be a list created from CreateDataset() function.")}
if(is.null(attributes(Dataset)$File.path) | is.null(attributes(Dataset)$Project)){stop("No attributes found in dataset. Create one with CreateDataset()")}
if(is.null(attributes(Dataset)$Omics.type)){stop("No Omics.type attributes found in dataset. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
list.files.path = attributes(Dataset)$File.path
project =   attributes(Dataset)$Project
SC.Lexic=F
if(attributes(Dataset)$Omics.type=="Single.Cell"){SC.Lexic=T}
if(c(exists("PatientLexic", mode = "any") | exists("SamplesLexic", mode = "any")) & replaceLexic==T |
c(!exists("PatientLexic", mode = "any") | !exists("SamplesLexic", mode = "any")) ){
pos <- 1
envir = as.environment(pos)
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
PL<- lapply(x, `[`, -1)
assign("PatientLexic", PL, envir = envir)} else {    PL <- scan(paste(list.files.path$Processes,"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(PL) <- sapply(PL, `[[`, 1)
PL<- lapply(PL, `[`, -1)
assign("PatientLexic", PL, envir = envir)    }
if(SC.Lexic==F) {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
assign("SamplesLexic", SL, envir = envir)
} else {
SL <- scan(paste(list.files.path$Processes,"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
assign("SamplesLexic", SL, envir = envir)
}
}
if(SC.Lexic==T) {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"SC.SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"SC.SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
assign("SamplesLexic", SL, envir = envir)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
SL <- scan(paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
} else {
SL <- scan(paste(list.files.path$Processes,"SC.SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)}
assign("SamplesLexic", SL, envir = envir)
}
}
} else {  stop("Patientlexic and SamplesLexic already loaded. Set replaceLexic=T to replace lexics.")}
}
project <- "Moffit"
path <- "E:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
Meta = CreateDataset(project, path)
library(PublicDataNorm)
project <- "Moffit"
path <- "E:/JR_analytics_Rwork/JRA_U1149_Nicolle/parent" # Change parent path parent matching your own Dir configuration
list.files(path)
Meta = CreateDataset(project, path)
Meta <- AddExpressionMatrixRNAseq(Metadata = Meta,
ExpressionMatrix ="Moffit.Normalized.expression.txt.gz" ,
name = "Normalized.expression")
head(Meta$Normalized.expression[,1:5])
rownames(Meta$Normalized.expression) <- Meta$Normalized.expression$V1
Meta$Normalized.expression$V1 <- NULL
head(Meta$Normalized.expression[,1:5])
Meta <- AddClinicFromFile(Metadata = Meta,
ClinicFile = "Moffit.SamplesAnnotation.txt.gz",
name = "sampleannot",
type = "Samples",
ExpressionMatrixIdColumn = "geo_accession",
Export = F)
attributes(Meta)
CheckMeta(Meta)
head(Meta$raw.clinic)
CreateLexic(Meta, type = "samplesLexic")
CreateLexic(Meta, type = "samplesLexic",replaceLexic = T)
CreateLexic <- function(Dataset=NULL, type = c("SamplesLexic","PatientsLexic")){
if(is.null(Dataset)){stop("Dataset is null.")}
if(!is.list(Dataset)){stop("Dataset must be a list created from CreateDataset() function.")}
if(is.null(attributes(Dataset)$File.path) | is.null(attributes(Dataset)$Project)){stop("No attributes found in dataset. Create one with CreateDataset()")}
if(is.null(attributes(Dataset)$Omics.type)){stop("No Omics.type attributes found in dataset. Firstly add ExpressionMatrix using AddExpressionMatrixRNAseq/Ma/SC functions.")}
if(!type%in%c("SamplesLexic","PatientsLexic")){stop("Type must be SamplesLexic or PatientsLexic.")}
list.files.path = attributes(Dataset)$File.path
project =   attributes(Dataset)$Project
SC.Lexic=F
if(attributes(Dataset)$Omics.type=="Single.Cell"){SC.Lexic=T}
if(type=="PatientsLexic"){
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"))){
message(paste("Importing PatientLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".PatientLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
PL<- lapply(x, `[`, -1)
return(PL)} else {    PL <- scan(paste(list.files.path$Processes,"PatientLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(PL) <- sapply(PL, `[[`, 1)
PL<- lapply(PL, `[`, -1)
return(PL)  }}
if(type=="SamplesLexic"){
if(SC.Lexic==F) {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
return(SL)
} else {
SL <- scan(paste(list.files.path$Processes,"SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
return(SL)
}
}
if(SC.Lexic==T) {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,"SC.SamplesLexic.txt"))){
message(paste("Importing SamplesLexic.txt from",project, "directory."))
x <- scan(paste0(list.files.path$Project.Processes, "/",project,"SC.SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(x) <- sapply(x, `[[`, 1)
SL<- lapply(x, `[`, -1)
return(SL)
} else {
if(file.exists(paste0(list.files.path$Project.Processes, "/",project,".SamplesLexic.txt"))){
SL <- scan(paste0(list.files.path$Project.Processes,"/",project,".SamplesLexic.txt"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)
} else {
SL <- scan(paste(list.files.path$Processes,"SC.SamplesLexic.txt",sep = "/"), what="", sep="\n")%>%strsplit("[[:space:]]+")
names(SL) <- sapply(SL, `[[`, 1)
SL<- lapply(SL, `[`, -1)}
return(SL)
}
}}
}
SL = CreateLexic(Meta, type = "samplesLexic")
SL = CreateLexic(Meta, type = "SamplesLexic")
PL = CreateLexic(Meta, type = "PatientsLexic")
library(PublicDataNorm)
#' AddKeyLexic
#'
#' @key lexic PatientLexic or SamplesLexic
#' @key key a character string: name to add into lexic
#' @key value a character string: target column in "raw" clinical data to rename as 'key' in cleaned clinical data.
#' @return a Lexic
#' @export
#'
#' @examples "None"
AddKeyLexic <- function(lexic=NULL, key = NULL,value= NULL){
if(key%in%names(lexic)){
if(!value%in%lexic[[key]]){
message(paste("Adding",value, "in", key, "."))
lexic[[key]] <-  c(lexic[[key]],value)
} else { message(paste(value, "in", key, "already present."))}
} else {
lexic[[key]] <- c(key,value)
}
return(lexic)
}
SL <- AddKeyLexic(lexic = SL,key = "SamplesID", value="id_cit")
SL
SL <- AddKeyLexic(lexic = SL,key = "SamplesID", value="id_cit")
SL <- AddKeyLexic(lexic = SL,key = "totot", value="tets")
SL
library(PublicDataNorm)
